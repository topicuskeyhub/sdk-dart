{
  "openapi": "3.0.1",
  "info": {
    "title": "Topicus KeyHub OpenAPI definition",
    "description": "Topicus KeyHub",
    "termsOfService": "https://topicus-keyhub.com",
    "contact": {
      "email": "keyhub@topicus.nl"
    },
    "version": "81"
  },
  "servers": [
    {
      "url": "https://keyhub.example.com/keyhub/rest/v1"
    }
  ],
  "tags": [
    {
      "name": "profile",
      "description": "Read and manage various aspects of your profile and authentication"
    },
    {
      "name": "provisioning",
      "description": "Manager provisioning for the current user"
    },
    {
      "name": "account",
      "description": "Read, update and delete accounts"
    },
    {
      "name": "group",
      "description": "Create, read, update and delete groups"
    },
    {
      "name": "iga",
      "description": "Operations related to IGA"
    },
    {
      "name": "vault",
      "description": "Unlock, read and update vaults and vault records"
    },
    {
      "name": "client",
      "description": "Create, read, update and delete clients of various types"
    },
    {
      "name": "miscellaneous",
      "description": "Miscellaneous operations, such as version information and settings"
    }
  ],
  "paths": {
    "/accessprofileclient/{accessprofileclientid}": {
      "get": {
        "tags": [
          "client",
          "iga"
        ],
        "summary": "Read a single client link for an access profile",
        "description": "Returns the single client link for the access profile.",
        "operationId": "get_accessprofileclient",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "accessprofileclientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileClient"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileClient"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "client",
          "iga"
        ],
        "summary": "Remove a client link from an access profile",
        "description": "Removes the specified client link, effectively removing access to the client for members of the access profile.",
        "operationId": "delete_accessprofileclient",
        "parameters": [
          {
            "name": "accessprofileclientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/accessprofileclient": {
      "get": {
        "tags": [
          "client",
          "iga"
        ],
        "summary": "Query for client links for an access profile",
        "description": "Queries over all client links for an access profile. The various query parameters can be used to filter the response.",
        "operationId": "list_accessprofileclient",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessProfile",
            "in": "query",
            "description": "Filter client access profile links on the given access profiles, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter client access profile links on the given clients, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "clientOwnerGroup",
            "in": "query",
            "description": "Only return access profile client links for which one of the given groups is the owner of its client application, specified by id. This parameter supports composition with all parameters from the groups resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "ownedBy",
            "in": "query",
            "description": "Filter access profile client links for which the given groups are owner, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileClientLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileClientLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/profilegroup/{profilegroupid}": {
      "get": {
        "tags": [
          "group",
          "profile"
        ],
        "summary": "Read a single access profile group link by id",
        "description": "Returns the access profile group link identified by the id.",
        "operationId": "get_profilegroup",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "profilegroupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileGroup"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileGroup"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "group",
          "profile"
        ],
        "summary": "Deletes an access profile group link",
        "description": "Deletes the access profile group link identified by the id.",
        "operationId": "delete_profilegroup",
        "parameters": [
          {
            "name": "profilegroupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/profilegroup": {
      "get": {
        "tags": [
          "group",
          "profile"
        ],
        "summary": "Query for access profile group links in Topicus KeyHub",
        "description": "Query for all access profile group links in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_profilegroup",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessProfile",
            "in": "query",
            "description": "Filter group access profile links on the given access profiles, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter group access profile links on the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "ownedBy",
            "in": "query",
            "description": "Filter access profile group links for which the given groups are owner, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileGroupLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileGroupLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/profileprovisioning/{profileprovisioningid}": {
      "get": {
        "tags": [
          "provisioning",
          "profile"
        ],
        "summary": "Read a single access profile provisioning link by id",
        "description": "Returns the access profile provisioning link identified by the id.",
        "operationId": "get_profileprovisioning",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "profileprovisioningid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileProvisioning"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileProvisioning"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "provisioning",
          "profile"
        ],
        "summary": "Deletes an access profile provisioning link",
        "description": "Deletes the access profile provisioning link identified by the id.",
        "operationId": "delete_profileprovisioning",
        "parameters": [
          {
            "name": "profileprovisioningid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/profileprovisioning": {
      "get": {
        "tags": [
          "provisioning",
          "profile"
        ],
        "summary": "Query for access profile provisioning in Topicus KeyHub",
        "description": "Query for all access profile provisioning links in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_profileprovisioning",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessProfile",
            "in": "query",
            "description": "Filter access profile provisioning links on the given access profiles, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOnSystem",
            "in": "query",
            "description": "Filter access profile provisioning links on the given group on systems, specified by id. This parameter supports composition with all parameters from the group on system resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOnSystemOwnerGroup",
            "in": "query",
            "description": "Only return access profile provisioning links for which one of the given groups is the owner of its group on system, specified by id. This parameter supports composition with all parameters from the groups resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "ownedBy",
            "in": "query",
            "description": "Filter access profile provisioning links for which the given groups are owner, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "system",
            "in": "query",
            "description": "Only return access profile provisioning links that are provisionined on one of the given systems, specified by id. This parameter supports composition with all parameters from the systems resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemAdminGroup",
            "in": "query",
            "description": "Only return access profile provisioning links for which one of the given groups is technical administrator for the system of its group on system, specified by id. This parameter supports composition with all parameters from the groups resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemContentAdminGroup",
            "in": "query",
            "description": "Only return access profile provisioning links for which one of the given groups is content administrator for the system of its group on system, specified by id. This parameter supports composition with all parameters from the groups resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemOwnerGroup",
            "in": "query",
            "description": "Only return access profile provisioning links for which one of the given groups is the owner of its provisioned system, specified by id. This parameter supports composition with all parameters from the groups resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileProvisioningLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileProvisioningLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/profile/{accessprofileid}/account": {
      "get": {
        "tags": [
          "account",
          "iga"
        ],
        "summary": "Query for memberships for an access profile",
        "description": "Queries over all members of an access profile. The various query parameters can be used to filter the response.",
        "operationId": "list_profile_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessProfile",
            "in": "query",
            "description": "Filter access profile memberships on the given access profiles, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter access profile memberships on the given accounts, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "ownedBy",
            "in": "query",
            "description": "Filter access profile memberships for which the given group is owner, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "accessprofileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileAccountLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileAccountLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "account",
          "iga"
        ],
        "summary": "Creates one or more new memberships for an access profile",
        "description": "Creates one or more new memberships for an access profile and returns the newly created memberships.",
        "operationId": "create_profile_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "accessprofileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/profile.AccessProfileAccountLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/profile.AccessProfileAccountLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileAccountLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileAccountLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/profile/{accessprofileid}/account/{accountid}": {
      "get": {
        "tags": [
          "account",
          "iga"
        ],
        "summary": "Read a single membership for an access profile",
        "description": "Returns the single membership for the access profile.",
        "operationId": "get_profile_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accessprofileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileAccount"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileAccount"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "account",
          "iga"
        ],
        "summary": "Update a memberships for an access profile",
        "description": "Updates the memberships for an access profile identified by the id.",
        "operationId": "update_profile_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accessprofileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/profile.AccessProfileAccount"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/profile.AccessProfileAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileAccount"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileAccount"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "account",
          "iga"
        ],
        "summary": "Remove a membership from an access profile",
        "description": "Removes the specified membership, effectively removing the account from the access profile.",
        "operationId": "delete_profile_account",
        "parameters": [
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accessprofileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/profile/{accessprofileid}/attributerule": {
      "get": {
        "tags": [
          "iga"
        ],
        "summary": "Query for account attribute rules in Topicus KeyHub",
        "description": "Query for all account attribute rules in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_profile_attributerule",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessProfile",
            "in": "query",
            "description": "Filter account attribute rules on the access profile, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessProfileOwningGroup",
            "in": "query",
            "description": "Filter account attribute rules on the owning group of the access profile, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "allowOverride",
            "in": "query",
            "description": "Only return account attribute rules that allow or do not allow manual overriding values.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "attribute",
            "in": "query",
            "description": "Filter the attribute rules by attribute definition, specified by id. This parameter supports composition with all parameters from the attribute definition resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "exclusive",
            "in": "query",
            "description": "Only return account attribute rules that are or are not exclusive.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "organizationalUnit",
            "in": "query",
            "description": "Filter account attribute rules on organizational units of the owning group of the access profile, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "accessprofileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeRuleLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeRuleLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "iga"
        ],
        "summary": "Creates one or more new account attribute rules",
        "description": "Creates one or more new account attribute rules and returns the newly created account attribute rules.",
        "operationId": "create_profile_attributerule",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "accessprofileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identity.AccountAttributeRuleLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identity.AccountAttributeRuleLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeRuleLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeRuleLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/profile/{accessprofileid}/attributerule/{attributeruleid}": {
      "get": {
        "tags": [
          "iga"
        ],
        "summary": "Read a single account attribute rule by id",
        "description": "Returns the account attribute rule identified by the id.",
        "operationId": "get_profile_attributerule",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "attributeruleid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accessprofileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeRule"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeRule"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "iga"
        ],
        "summary": "Update an account attribute rule",
        "description": "Updates the account attribute rule identified by the id.",
        "operationId": "update_profile_attributerule",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "attributeruleid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accessprofileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identity.AccountAttributeRule"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identity.AccountAttributeRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeRule"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeRule"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "iga"
        ],
        "summary": "Delete an account attribute rule",
        "description": "Deletes the account attribute rule identified by the id.",
        "operationId": "delete_profile_attributerule",
        "parameters": [
          {
            "name": "attributeruleid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accessprofileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "iga"
        ],
        "summary": "Query for access profiles in Topicus KeyHub",
        "description": "Query for all access profiles in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_profile",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accountsWithAttributes",
                  "attributeRules",
                  "audit",
                  "clients",
                  "groups",
                  "provisioning"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "containsAccount",
            "in": "query",
            "description": "Filter the access profiles by membership of accounts, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "directory",
            "in": "query",
            "description": "Filter the access profiles on the directory they are linked to,specified by id. This parameter supports composition with all parameters from the account directory resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "doesNotContainClient",
            "in": "query",
            "description": "Filter the access profiles by clients not connected to them, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasMatchRule",
            "in": "query",
            "description": "Filter the access profiles by having a match rule or not.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter access profiles on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search access profiles on (part of) the name or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameDoesNotStartWith",
            "in": "query",
            "description": "Filter access profiles with which the name does not start with the given values.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameStartsWith",
            "in": "query",
            "description": "Filter access profiles on the start of the name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "organizationalUnit",
            "in": "query",
            "description": "Filter access profiles on organizational units of their owning group, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "ownedBy",
            "in": "query",
            "description": "Filter the access profiles for which the given group is owner,specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "iga"
        ],
        "summary": "Creates one or more new access profiles",
        "description": "Creates one or more new access profiles and returns the newly created access profiles.",
        "operationId": "create_profile",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accountsWithAttributes",
                  "attributeRules",
                  "audit",
                  "clients",
                  "groups",
                  "provisioning"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/profile.AccessProfileLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/profile.AccessProfileLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfileLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/profile/{profileid}": {
      "get": {
        "tags": [
          "iga"
        ],
        "summary": "Read a single access profile by id",
        "description": "Returns the access profile identified by the id.",
        "operationId": "get_profile",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accountsWithAttributes",
                  "attributeRules",
                  "audit",
                  "clients",
                  "groups",
                  "provisioning"
                ]
              }
            }
          },
          {
            "name": "profileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfile"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfile"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "iga"
        ],
        "summary": "Update an access profile",
        "description": "Updates the access profile identified by the id.",
        "operationId": "update_profile",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accountsWithAttributes",
                  "attributeRules",
                  "audit",
                  "clients",
                  "groups",
                  "provisioning"
                ]
              }
            }
          },
          {
            "name": "profileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/profile.AccessProfile"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/profile.AccessProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfile"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/profile.AccessProfile"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/profile/{accessprofileid}/attributes/sync": {
      "post": {
        "tags": [
          "iga"
        ],
        "operationId": "syncAttributes_profile_attributes_sync",
        "parameters": [
          {
            "name": "accessprofileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "account",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "operation",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/identity.AccountAttributeUpdateOperation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {},
              "application/vnd.topicus.keyhub+xml;version=81": {}
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/attributedef": {
      "get": {
        "tags": [
          "iga"
        ],
        "summary": "Query for account attribute definitions in Topicus KeyHub",
        "description": "Query for all account attribute definitions in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_attributedef",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "availableForAccessProfile",
            "in": "query",
            "description": "Only return account attributes for which a rule can be created for all of the given access profiles, specified by id. The attribute cannot have a rule for any of the profiles, nor can it be exclusive in any other profile.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Filter account attribute definitions on the given format(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/identity.AccountAttributeFormat"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter account attribute definitions on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Filter account attribute definitions on (part of) the name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "required",
            "in": "query",
            "description": "Only return account attribute definitions that are or are not required.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "systemDefinition",
            "in": "query",
            "description": "Filter account attribute definitions on the given system definition(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/identity.AccountAttributeSystemDefinition"
              }
            }
          },
          {
            "name": "unique",
            "in": "query",
            "description": "Only return account attribute definitions that are or are not unique.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeDefinitionLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeDefinitionLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "iga"
        ],
        "summary": "Creates one or more new account attribute definitions",
        "description": "Creates one or more new account attribute definitions and returns the newly created account attribute definitions.",
        "operationId": "create_attributedef",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identity.AccountAttributeDefinitionLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identity.AccountAttributeDefinitionLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeDefinitionLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeDefinitionLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/attributedef/{attributedefid}": {
      "get": {
        "tags": [
          "iga"
        ],
        "summary": "Read a single account attribute definition by id",
        "description": "Returns the account attribute definition identified by the id.",
        "operationId": "get_attributedef",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "attributedefid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeDefinition"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeDefinition"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "iga"
        ],
        "summary": "Update an account attribute definition",
        "description": "Updates the account attribute definition identified by the id.",
        "operationId": "update_attributedef",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "attributedefid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identity.AccountAttributeDefinition"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identity.AccountAttributeDefinition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeDefinition"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeDefinition"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "iga"
        ],
        "summary": "Delete an account attribute definition",
        "description": "Deletes the account attribute definition identified by the id.",
        "operationId": "delete_attributedef",
        "parameters": [
          {
            "name": "attributedefid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/directory": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Query for directories in Topicus KeyHub",
        "description": "Query for all directories in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_directory",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "markers",
                  "status"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Only return directories that are or are not active. Defaults to true.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BooleanEnum"
              }
            }
          },
          {
            "name": "baseOrganizationalUnit",
            "in": "query",
            "description": "Filter the directories on the given base organizational unit, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "defaultDirectory",
            "in": "query",
            "description": "Only return directories that are or are not the default directory.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "expiredCertificate",
            "in": "query",
            "description": "Only return directories that use certificates that are expired at the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "helpdeskGroup",
            "in": "query",
            "description": "Filter the directories on the given helpdesk groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "isNotProvisionedDirectory",
            "in": "query",
            "description": "Only return directories that are not used for source directory provisioning for the given types of linked systems.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/provisioning.ProvisionedSystemType"
              }
            }
          },
          {
            "name": "maintenanceDirectory",
            "in": "query",
            "description": "Only return directories that are or are not the built-in maintenance directory.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter directories on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Filter directories on (part of) the name or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameDoesNotStartWith",
            "in": "query",
            "description": "Filter directories where the name does not start with the given values.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameStartsWith",
            "in": "query",
            "description": "Filter directories on the start of the name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "oidcVender",
            "in": "query",
            "description": "Only return OIDC directories for the given vendor(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/directory.OIDCVendor"
              }
            }
          },
          {
            "name": "ownedBy",
            "in": "query",
            "description": "Only return internal directories for the given owner(s), specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "tls",
            "in": "query",
            "description": "Filter LDAP directories on TLS setting(s) used.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TLSLevel"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Only return directories of the given type(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/directory.AccountDirectoryLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/directory.AccountDirectoryLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Creates one or more new directories",
        "description": "Creates one or more new directories and returns the newly created directories.",
        "operationId": "create_directory",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "markers",
                  "status"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/directory.AccountDirectoryLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/directory.AccountDirectoryLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/directory.AccountDirectoryLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/directory.AccountDirectoryLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/directory/{directoryid}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Read a single directory by id",
        "description": "Returns the directory identified by the id.",
        "operationId": "get_directory",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "markers",
                  "status"
                ]
              }
            }
          },
          {
            "name": "directoryid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/directory.AccountDirectory"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/directory.AccountDirectory"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Update a directory",
        "description": "Updates the directory identified by the id.",
        "operationId": "update_directory",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "markers",
                  "status"
                ]
              }
            }
          },
          {
            "name": "directoryid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/directory.AccountDirectory"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/directory.AccountDirectory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/directory.AccountDirectory"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/directory.AccountDirectory"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "account"
        ],
        "summary": "Delete a directory from Topicus KeyHub",
        "description": "Permanently removes the directory. This cannot be undone.",
        "operationId": "delete_directory",
        "parameters": [
          {
            "name": "directoryid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/directory/{directoryid}/internalaccount": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Query for internal accounts within a directory",
        "description": "Queries over all internal accounts within a directory. The various query parameters can be used to filter the response.",
        "operationId": "list_directory_internalaccount",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "reason"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter the internal accounts by KeyHub accounts, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "directory",
            "in": "query",
            "description": "Filter the internal accounts by directory, specified by id. This parameter supports composition with all parameters from the account directory resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "directoryOwnerGroup",
            "in": "query",
            "description": "Filter the internal accounts by the owner group of the directory, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnit",
            "in": "query",
            "description": "Filter the internal accounts by organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Only return internal accounts with the given status.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/auth.InternalAccountStatus"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "directoryid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.InternalAccountLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.InternalAccountLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Creates one or more new internal accounts within a directory",
        "description": "Creates one or more new internal accounts within a directory and returns the newly created accounts.",
        "operationId": "create_directory_internalaccount",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "reason"
                ]
              }
            }
          },
          {
            "name": "directoryid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/auth.InternalAccountLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/auth.InternalAccountLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.InternalAccountLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.InternalAccountLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/directory/{directoryid}/internalaccount/{internalaccountid}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Read a single internal accounts within a directory",
        "description": "Returns the single internal accounts within a directory.",
        "operationId": "get_directory_internalaccount",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "reason"
                ]
              }
            }
          },
          {
            "name": "internalaccountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "directoryid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.InternalAccount"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.InternalAccount"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Update a internal accounts within a directory",
        "description": "Updates the internal accounts within a directory identified by the id.",
        "operationId": "update_directory_internalaccount",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "reason"
                ]
              }
            }
          },
          {
            "name": "internalaccountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "directoryid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/auth.InternalAccount"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/auth.InternalAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.InternalAccount"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.InternalAccount"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "account"
        ],
        "summary": "Remove an internal accounts from a directory",
        "description": "Removes the specified internal accounts from a directory, including the associated KeyHub account.",
        "operationId": "delete_directory_internalaccount",
        "parameters": [
          {
            "name": "internalaccountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "directoryid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/directory/{directoryid}/internalaccount/{internalaccountid}/move": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Move an internal account",
        "description": "Move the internal account specified by the given id to a different directory.",
        "operationId": "move_directory_internalaccount_move",
        "parameters": [
          {
            "name": "internalaccountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "directoryid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/auth.MoveInternalAccount"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/auth.MoveInternalAccount"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Internal account moved"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/directory/{directoryid}/internalaccount/{internalaccountid}/status": {
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Updates the status for the internal account",
        "description": "Updates the status for the internal account. Only the status 'NOT_ACTIVATED' can be set.",
        "operationId": "updateStatus_directory_internalaccount_status",
        "parameters": [
          {
            "name": "internalaccountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "directoryid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/auth.InternalAccountStatusObject"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/auth.InternalAccountStatusObject"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Account status updated"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/attributevalue/{attributevalueid}": {
      "get": {
        "tags": [
          "iga"
        ],
        "summary": "Read a single account attribute value by id",
        "description": "Returns the account attribute value identified by the id.",
        "operationId": "get_account_attributevalue",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "previous",
                  "selection"
                ]
              }
            }
          },
          {
            "name": "attributevalueid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeValue"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeValue"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/attributevalue": {
      "get": {
        "tags": [
          "iga"
        ],
        "summary": "Query for account attribute values",
        "description": "Query for account attribute values for a specific account. The various query parameters can be used to filter the response.",
        "operationId": "list_account_attributevalue",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "previous",
                  "selection"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter the attribute values by account, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "attribute",
            "in": "query",
            "description": "Filter the attribute values by attribute definition, specified by id. This parameter supports composition with all parameters from the attribute definition resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "directory",
            "in": "query",
            "description": "Filter the attribute values by the account's directory, specified by id. This parameter supports composition with all parameters from the account directory resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "latestForSource",
            "in": "query",
            "description": "Only return attribute values that are, or are not, the latest value for its source.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Filter attribute values on the given source(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/identity.AccountAttributeSource"
              }
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Filter attribute values on the given actual value(s), ignoring case.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeValueLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.AccountAttributeValueLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/attributevalue/override": {
      "post": {
        "tags": [
          "iga"
        ],
        "summary": "Manually override an account attribute value",
        "description": "Manually override the value for an account attribute. A null value will clear the override.",
        "operationId": "setOverride_account_attributevalue_override",
        "parameters": [
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identity.AccountAttributeValueUpdate"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identity.AccountAttributeValueUpdate"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Value set"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Read a single account by id",
        "description": "Returns the account identified by the id.",
        "operationId": "get_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activeLogin",
                  "audit",
                  "groups",
                  "pendingRecoveryRequests",
                  "settings",
                  "storedAttributes",
                  "vault"
                ]
              }
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Account"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Account"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "account"
        ],
        "summary": "Delete an account from Topicus KeyHub",
        "description": "Permanently removes the account. This cannot be undone.",
        "operationId": "delete_account",
        "parameters": [
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/session": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Returns a list of active sessions for the user",
        "description": "Returns a list of active sessions for the current user.",
        "operationId": "userSessions_account_session",
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.StoredUserSessionLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.StoredUserSessionLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "account"
        ],
        "summary": "Ends all sessions except the current",
        "description": "Ends all sessions for the current user except the current session. Access tokens issued for these sessions will be revoked.",
        "operationId": "deleteOtherSessions_account_session",
        "responses": {
          "204": {
            "description": "All sessions ended"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/session/{sessionId}": {
      "delete": {
        "tags": [
          "account"
        ],
        "summary": "Ends a session",
        "description": "Ends the given session for the current user. Access tokens issued for the session will be revoked.",
        "operationId": "deleteUserSession_account_session",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Session ended"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Query for accounts in Topicus KeyHub",
        "description": "Query for all accounts in Topicus KeyHub. This will query over all directories and return both active and inactive accounts. The various query parameters can be used to filter the response.",
        "operationId": "list_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activeLogin",
                  "audit",
                  "groups",
                  "pendingRecoveryRequests",
                  "settings",
                  "storedAttributes",
                  "vault"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessProfile",
            "in": "query",
            "description": "Filter the accounts by membership of access profiles, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "activationCode",
            "in": "query",
            "description": "Only return accounts with the given activation code(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "activationDeadlineAtOrAfter",
            "in": "query",
            "description": "Only return accounts that have an activation deadline that expires at or after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Only return active or inactive accounts.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "activeSince",
            "in": "query",
            "description": "Only return accounts that have been active since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "admin",
            "in": "query",
            "description": "Only return accounts that are or are not KeyHub Administrators.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "baseOrganizationalUnitAncestorOf",
            "in": "query",
            "description": "Only return the accounts for which the base organizational unit of the directory is equal to or an ancestor of the given unit(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "directory",
            "in": "query",
            "description": "Filter the accounts by directory, specified by id. This parameter supports composition with all parameters from the account directory resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "directoryOwnedBy",
            "in": "query",
            "description": "Only return internal accounts for directories with the given owner(s), specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Only return the accounts with the given e-mail addresses.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Filter the accounts by their registered external ids. This parameter supports composition with all parameters from the 'external id' resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter the accounts by membership of groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasBeenActive",
            "in": "query",
            "description": "Only return accounts that have or have not ever been active.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasEmail",
            "in": "query",
            "description": "Only return accounts that have or don't have an e-mail address.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasVault",
            "in": "query",
            "description": "Only return accounts that have or don't have their vaults setup.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasVaultSecretForGroup",
            "in": "query",
            "description": "Only return accounts that have access to the vault for at least one of the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "idInDirectory",
            "in": "query",
            "description": "Filter accounts by exact match on the id in the directory.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "inactiveSince",
            "in": "query",
            "description": "Only return accounts that have not been active since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "licenseRole",
            "in": "query",
            "description": "Only return accounts with the given license role(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/auth.AccountLicenseRole"
              }
            }
          },
          {
            "name": "maintenanceAdmin",
            "in": "query",
            "description": "Only return the keyhub maintenance user.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "managerForGroup",
            "in": "query",
            "description": "Only return managers for at least one of the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "memberOfOrganizationalUnit",
            "in": "query",
            "description": "Filter accounts on direct connections to organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "memberOfOrganizationalUnitOwnedBy",
            "in": "query",
            "description": "Filter accounts on connections to organizational units owned by the provided group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "nameDoesNotStartWith",
            "in": "query",
            "description": "Only return accounts for which the username does not start with one of the given values.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameStartsWith",
            "in": "query",
            "description": "Only return accounts for which the display name starts with one of the given values.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "notInAccessProfile",
            "in": "query",
            "description": "Filter the accounts that are not a member of the given access profiles, specified by id. ",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "notInGroup",
            "in": "query",
            "description": "Filter the accounts that are not a member of the given groups, specified by id. ",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "owningClient",
            "in": "query",
            "description": "Filter the accounts on their 'owning' clients, specified by id. An 'owning client' is a client which can potentially modify the account. Typically this is the client which created the account (if applicable), but it could be a client which has been registered as such after the fact.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "reregistrationRequired",
            "in": "query",
            "description": "Only return account that do or do not require reregistration.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "rotatingPasswordEnabled",
            "in": "query",
            "description": "Only return accounts that have or don't have rotating password enabled.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "twoFactorStatus",
            "in": "query",
            "description": "Only return accounts that match the given 2FA status. Note that {@code APP} only matches the accounts who only have a KeyHub app linked, and similar for {@code TOTP} and {@code WEBAUTHN}. {@code MIXED} matches those who have both one or more WebAuthn keys, and either a KeyHub app or generic Totp app linked.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/auth.TwoFactorAuthenticationStatus"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter accounts on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "usernameContains",
            "in": "query",
            "description": "Search accounts on (part of) the username, display name or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "validInDirectory",
            "in": "query",
            "description": "Only return accounts that are valid or invalid in the directory.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "validity",
            "in": "query",
            "description": "Filter accounts on their validity. NOT_APPLICABLE will be seen as VALID.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/auth.AccountValidity"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Only return accounts that are the owner of one of the given vaults, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.AccountLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.AccountLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/auditstats": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Reads various account based counts and statistics",
        "description": "Returns the counts and statistics of accounts within Topicus KeyHub.",
        "operationId": "getAuditStats_account_auditstats",
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.AccountsAuditStats"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.AccountsAuditStats"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/me/notifications": {
      "get": {
        "tags": [
          "profile"
        ],
        "summary": "Returns a list of notifications for the user.",
        "description": "Returns the notifications to be displayed on the dashboard of the user. At most 50 notifications are returned.",
        "operationId": "getNotifications_account_me_notifications",
        "parameters": [
          {
            "name": "requestMailKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requestsToRetainIds",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "lang",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/notification.Notifications"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/notification.Notifications"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/me/settings": {
      "get": {
        "tags": [
          "profile"
        ],
        "summary": "Returns an overview of the settings selected by the current user.",
        "description": "Returns an overview of the settings selected by the current user.",
        "operationId": "getSettings_account_me_settings",
        "parameters": [
          {
            "name": "topicus-Vault-session",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.AccountSettings"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.AccountSettings"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/provisioning/tokenpwd": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Reads the user's rotating password",
        "description": "Returns the user's rotating password as it is set for the current user.",
        "operationId": "getTokenPassword_account_provisioning_tokenpwd",
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.TokenPassword"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.TokenPassword"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/group/{groupid}": {
      "get": {
        "tags": [
          "account",
          "group"
        ],
        "summary": "Read a single group membership for an account",
        "description": "Returns the single group membership for the account. This also contains information such as the rights and provisioning information.",
        "operationId": "get_account_group",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "vault"
                ]
              }
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.AccountGroup"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.AccountGroup"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "account",
          "group"
        ],
        "summary": "Remove a group membership from an account",
        "description": "Removes the specified group membership, effectively removing the account from the group.",
        "operationId": "delete_account_group",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/group": {
      "get": {
        "tags": [
          "account",
          "group"
        ],
        "summary": "Query for group memberships for an account",
        "description": "Queries over all groups the account is member of. The various query parameters can be used to filter the response.",
        "operationId": "list_account_group",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "vault"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter group memberships on the given accounts, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "applicableForActivation",
            "in": "query",
            "description": "Only return group memberships that can or cannot be activated by the current user.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "expiredAt",
            "in": "query",
            "description": "Only return group memberships that have an expiration set that is before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter group memberships on the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupNameContains",
            "in": "query",
            "description": "Filter group memberships on (part of) the name or uuid of the group or the folder (if any).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nested",
            "in": "query",
            "description": "Only return group memberships that are or are not nested.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "organizationalUnit",
            "in": "query",
            "description": "Filter group memberships on the given organizational unit of the group, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "rights",
            "in": "query",
            "description": "Filter group memberships on the given rights.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/group.GroupRights"
              }
            }
          },
          {
            "name": "signature",
            "in": "query",
            "description": "Filter group memberships on the given signatures, specified by id. This parameter supports composition with all parameters from the signature filter.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "vaultAccess",
            "in": "query",
            "description": "Only return group memberships that have or do not have access to the group's vault.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.AccountGroupLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.AccountGroupLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/group/{groupid}/status": {
      "put": {
        "tags": [
          "profile"
        ],
        "summary": "Update group membership status",
        "description": "Updates the display settings for the group membership for the users own account. The group can be hidden from the dashboard or placed in a folder.",
        "operationId": "updateStatus_account_group_status",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupAccountStatus"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupAccountStatus"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No content"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/identity": {
      "get": {
        "tags": [
          "iga"
        ],
        "summary": "Read a single account's identity",
        "description": "Returns the identity for the account.",
        "operationId": "getIdentity_account_identity",
        "parameters": [
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.Identity"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.Identity"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "iga"
        ],
        "summary": "Update a single account's identity",
        "description": "Updates the identity for the account.",
        "operationId": "updateIdentity_account_identity",
        "parameters": [
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identity.Identity"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identity.Identity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.Identity"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identity.Identity"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/me": {
      "get": {
        "tags": [
          "profile"
        ],
        "summary": "Current user",
        "description": "Returns the account of the currently authenticated user. The returned account will contain a complete list of all permissions of the account, restricted by the scope of the access token.",
        "operationId": "me_account_me",
        "responses": {
          "200": {
            "description": "Authenticated user",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Account"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Account"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/organizationalunit/{organizationalunitid}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Read a single organizational unit membership for an account",
        "description": "Returns the single organizational unit membership for the account.",
        "operationId": "get_account_organizationalunit",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "organizationalunitid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.AccountOrganizationalUnit"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.AccountOrganizationalUnit"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/organizationalunit": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "Query for organizational unit memberships for an account",
        "description": "Queries over all organizational units the account is member of. The various query parameters can be used to filter the response.",
        "operationId": "list_account_organizationalunit",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter the organizational units-accounts by accounts, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accountDirectoryOwnedBy",
            "in": "query",
            "description": "Filter the organizational units-accounts by groups owning the internal directory of the accounts, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnit",
            "in": "query",
            "description": "Filter the organizational units-accounts by organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnitOwnedBy",
            "in": "query",
            "description": "Filter the organizational units-accounts by groups owning the organizational unit, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.AccountOrganizationalUnitLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.AccountOrganizationalUnitLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/provisioning": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Reads the user's provisioning status",
        "description": "Returns the status of provisioning for the current user. The groups are filtered by the specified filter or group UUID.",
        "operationId": "provisioningStatus_account_provisioning",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupUuid",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loadAll",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisioningStatus"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisioningStatus"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "provisioning"
        ],
        "summary": "Updates the user's provisioning",
        "description": "Updates the provisioning for the current user. This updates the end time for the given groups. If 'ignoreErrors' is set, errors do not cause the update to abort if errors are detected. To enable groups with auditing enabled the reason query parameter is required.",
        "operationId": "updateProvisioningStatus_account_provisioning",
        "parameters": [
          {
            "name": "reason",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/provisioning.ProvisioningStatus"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/provisioning.ProvisioningStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status updated",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisioningStatus"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisioningStatus"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/provisioning/rotatepwd": {
      "post": {
        "tags": [
          "provisioning"
        ],
        "summary": "Rotates the user's rotating password",
        "description": "Manually rotates the user's rotating password. This is normally done once a day automatically.",
        "operationId": "rotateTokenPassword_account_provisioning_rotatepwd",
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.AccountProvisioningStatusReport"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.AccountProvisioningStatusReport"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/me/settings/locale": {
      "post": {
        "tags": [
          "profile"
        ],
        "summary": "Updates the locale for the current user",
        "description": "Updates the locale for the current user.",
        "operationId": "setLocale_account_me_settings_locale",
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/auth.AccountChangeLocale"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/auth.AccountChangeLocale"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Locale updated"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/export": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Prepares an export of accounts in CSV format",
        "description": "Prepares an export of accounts using the filtering specified in the query parameters. The URI of the export can be found in the returned Location header. This URI is valid for 2 minutes after being generated.",
        "operationId": "startExport_account_export",
        "parameters": [
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessProfile",
            "in": "query",
            "description": "Filter the accounts by membership of access profiles, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "activationCode",
            "in": "query",
            "description": "Only return accounts with the given activation code(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "activationDeadlineAtOrAfter",
            "in": "query",
            "description": "Only return accounts that have an activation deadline that expires at or after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Only return active or inactive accounts.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "activeSince",
            "in": "query",
            "description": "Only return accounts that have been active since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "admin",
            "in": "query",
            "description": "Only return accounts that are or are not KeyHub Administrators.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "baseOrganizationalUnitAncestorOf",
            "in": "query",
            "description": "Only return the accounts for which the base organizational unit of the directory is equal to or an ancestor of the given unit(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "directory",
            "in": "query",
            "description": "Filter the accounts by directory, specified by id. This parameter supports composition with all parameters from the account directory resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "directoryOwnedBy",
            "in": "query",
            "description": "Only return internal accounts for directories with the given owner(s), specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Only return the accounts with the given e-mail addresses.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Filter the accounts by their registered external ids. This parameter supports composition with all parameters from the 'external id' resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter the accounts by membership of groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasBeenActive",
            "in": "query",
            "description": "Only return accounts that have or have not ever been active.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasEmail",
            "in": "query",
            "description": "Only return accounts that have or don't have an e-mail address.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasVault",
            "in": "query",
            "description": "Only return accounts that have or don't have their vaults setup.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasVaultSecretForGroup",
            "in": "query",
            "description": "Only return accounts that have access to the vault for at least one of the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "idInDirectory",
            "in": "query",
            "description": "Filter accounts by exact match on the id in the directory.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "inactiveSince",
            "in": "query",
            "description": "Only return accounts that have not been active since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "licenseRole",
            "in": "query",
            "description": "Only return accounts with the given license role(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/auth.AccountLicenseRole"
              }
            }
          },
          {
            "name": "maintenanceAdmin",
            "in": "query",
            "description": "Only return the keyhub maintenance user.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "managerForGroup",
            "in": "query",
            "description": "Only return managers for at least one of the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "memberOfOrganizationalUnit",
            "in": "query",
            "description": "Filter accounts on direct connections to organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "memberOfOrganizationalUnitOwnedBy",
            "in": "query",
            "description": "Filter accounts on connections to organizational units owned by the provided group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "nameDoesNotStartWith",
            "in": "query",
            "description": "Only return accounts for which the username does not start with one of the given values.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameStartsWith",
            "in": "query",
            "description": "Only return accounts for which the display name starts with one of the given values.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "notInAccessProfile",
            "in": "query",
            "description": "Filter the accounts that are not a member of the given access profiles, specified by id. ",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "notInGroup",
            "in": "query",
            "description": "Filter the accounts that are not a member of the given groups, specified by id. ",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "owningClient",
            "in": "query",
            "description": "Filter the accounts on their 'owning' clients, specified by id. An 'owning client' is a client which can potentially modify the account. Typically this is the client which created the account (if applicable), but it could be a client which has been registered as such after the fact.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "reregistrationRequired",
            "in": "query",
            "description": "Only return account that do or do not require reregistration.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "rotatingPasswordEnabled",
            "in": "query",
            "description": "Only return accounts that have or don't have rotating password enabled.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "twoFactorStatus",
            "in": "query",
            "description": "Only return accounts that match the given 2FA status. Note that {@code APP} only matches the accounts who only have a KeyHub app linked, and similar for {@code TOTP} and {@code WEBAUTHN}. {@code MIXED} matches those who have both one or more WebAuthn keys, and either a KeyHub app or generic Totp app linked.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/auth.TwoFactorAuthenticationStatus"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter accounts on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "usernameContains",
            "in": "query",
            "description": "Search accounts on (part of) the username, display name or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "validInDirectory",
            "in": "query",
            "description": "Only return accounts that are valid or invalid in the directory.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "validity",
            "in": "query",
            "description": "Filter accounts on their validity. NOT_APPLICABLE will be seen as VALID.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/auth.AccountValidity"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Only return accounts that are the owner of one of the given vaults, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Export prepared"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/vault/unlock": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Unlocks the user's vault",
        "description": "Unlocks the vault of the authenticated user. Use the session password in the response via the topicus-Vault-session header to access secrets. The prefered way to unlock a vault is via the authentication by passing 'authVault=\"access\"' to the OAuth2 authorization endpoint.",
        "operationId": "unlockVault_account_vault_unlock",
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultUnlock"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultUnlock"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vault unlocked",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultUnlockResponse"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultUnlockResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/status": {
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Updates one or more status toggles for the account",
        "description": "Updates one or more status toggles for the account. Only the values set will be updated on the account.",
        "operationId": "updateAccountStatus_account_status",
        "parameters": [
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/auth.AccountStatus"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/auth.AccountStatus"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Account updated"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/status/bulk": {
      "put": {
        "tags": [
          "account"
        ],
        "summary": "Updates multiple accounts",
        "description": "Updates multiple accounts. The given accounts will be updated according to the selected action, for example, have their license role set to the given license role, provided this matches the current license's conditions.",
        "operationId": "updateBulk_account_status_bulk",
        "parameters": [
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessProfile",
            "in": "query",
            "description": "Filter the accounts by membership of access profiles, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "activationCode",
            "in": "query",
            "description": "Only return accounts with the given activation code(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "activationDeadlineAtOrAfter",
            "in": "query",
            "description": "Only return accounts that have an activation deadline that expires at or after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Only return active or inactive accounts.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "activeSince",
            "in": "query",
            "description": "Only return accounts that have been active since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "admin",
            "in": "query",
            "description": "Only return accounts that are or are not KeyHub Administrators.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "baseOrganizationalUnitAncestorOf",
            "in": "query",
            "description": "Only return the accounts for which the base organizational unit of the directory is equal to or an ancestor of the given unit(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "directory",
            "in": "query",
            "description": "Filter the accounts by directory, specified by id. This parameter supports composition with all parameters from the account directory resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "directoryOwnedBy",
            "in": "query",
            "description": "Only return internal accounts for directories with the given owner(s), specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Only return the accounts with the given e-mail addresses.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Filter the accounts by their registered external ids. This parameter supports composition with all parameters from the 'external id' resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter the accounts by membership of groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasBeenActive",
            "in": "query",
            "description": "Only return accounts that have or have not ever been active.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasEmail",
            "in": "query",
            "description": "Only return accounts that have or don't have an e-mail address.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasVault",
            "in": "query",
            "description": "Only return accounts that have or don't have their vaults setup.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasVaultSecretForGroup",
            "in": "query",
            "description": "Only return accounts that have access to the vault for at least one of the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "idInDirectory",
            "in": "query",
            "description": "Filter accounts by exact match on the id in the directory.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "inactiveSince",
            "in": "query",
            "description": "Only return accounts that have not been active since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "licenseRole",
            "in": "query",
            "description": "Only return accounts with the given license role(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/auth.AccountLicenseRole"
              }
            }
          },
          {
            "name": "maintenanceAdmin",
            "in": "query",
            "description": "Only return the keyhub maintenance user.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "managerForGroup",
            "in": "query",
            "description": "Only return managers for at least one of the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "memberOfOrganizationalUnit",
            "in": "query",
            "description": "Filter accounts on direct connections to organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "memberOfOrganizationalUnitOwnedBy",
            "in": "query",
            "description": "Filter accounts on connections to organizational units owned by the provided group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "nameDoesNotStartWith",
            "in": "query",
            "description": "Only return accounts for which the username does not start with one of the given values.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameStartsWith",
            "in": "query",
            "description": "Only return accounts for which the display name starts with one of the given values.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "notInAccessProfile",
            "in": "query",
            "description": "Filter the accounts that are not a member of the given access profiles, specified by id. ",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "notInGroup",
            "in": "query",
            "description": "Filter the accounts that are not a member of the given groups, specified by id. ",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "owningClient",
            "in": "query",
            "description": "Filter the accounts on their 'owning' clients, specified by id. An 'owning client' is a client which can potentially modify the account. Typically this is the client which created the account (if applicable), but it could be a client which has been registered as such after the fact.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "reregistrationRequired",
            "in": "query",
            "description": "Only return account that do or do not require reregistration.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "rotatingPasswordEnabled",
            "in": "query",
            "description": "Only return accounts that have or don't have rotating password enabled.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "twoFactorStatus",
            "in": "query",
            "description": "Only return accounts that match the given 2FA status. Note that {@code APP} only matches the accounts who only have a KeyHub app linked, and similar for {@code TOTP} and {@code WEBAUTHN}. {@code MIXED} matches those who have both one or more WebAuthn keys, and either a KeyHub app or generic Totp app linked.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/auth.TwoFactorAuthenticationStatus"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter accounts on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "usernameContains",
            "in": "query",
            "description": "Search accounts on (part of) the username, display name or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "validInDirectory",
            "in": "query",
            "description": "Only return accounts that are valid or invalid in the directory.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "validity",
            "in": "query",
            "description": "Filter accounts on their validity. NOT_APPLICABLE will be seen as VALID.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/auth.AccountValidity"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Only return accounts that are the owner of one of the given vaults, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/auth.AccountBulkUpdate"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/auth.AccountBulkUpdate"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Accounts updated"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/validate": {
      "post": {
        "tags": [
          "account"
        ],
        "summary": "Checks the validity of the account in its directory",
        "description": "Checks the validity of the account in its directory and returns the updated status.",
        "operationId": "validate_account_validate",
        "parameters": [
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Account"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Account"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/vault": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Read a vault with its records",
        "description": "Returns the vault. It is not possible to read the secrets, for this the records need to be read one by one.",
        "operationId": "getVault_account_vault",
        "parameters": [
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.Vault"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.Vault"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "vault"
        ],
        "summary": "Delete a personal vault",
        "description": "Delete the personal vault of the current user.",
        "operationId": "deleteVault_account_vault",
        "parameters": [
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vault removed"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/vault/newpassword": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Returns a random generated password",
        "description": "Returns a random generated password using the given strategy, or the default strategy if none given.",
        "operationId": "newpassword_account_vault_newpassword",
        "parameters": [
          {
            "name": "strategy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/vault/random": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Returns a random generated value",
        "description": "Returns a random generated value of the given length, default 24.",
        "operationId": "random_account_vault_random",
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "schema": {
              "maximum": 1024,
              "type": "integer",
              "format": "int32",
              "default": 24
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/vault/record": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Query for records in a vault",
        "description": "Query for vault records in a specific vault. The various query parameters can be used to filter the response. It is not possible to access secrets with a query that returns multiple results. Secrets can only be read one by one.",
        "operationId": "list_account_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessibleByAccount",
            "in": "query",
            "description": "Filter records that accessible by the given account(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByAccountAsManager",
            "in": "query",
            "description": "Filter records that accessible by the given account(s) and the account is manager of the group, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByClient",
            "in": "query",
            "description": "Filter records that accessible by the given client(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter the records by account, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter the records by client, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "Filter records on the color.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/vault.VaultRecordColor"
              }
            }
          },
          {
            "name": "expireWarningBeforeOrAt",
            "in": "query",
            "description": "Only return records that show an expiration warning at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "Filter records on the exact filename.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter the records by group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOrganizationalUnit",
            "in": "query",
            "description": "Filter the records by organizational unit of the group, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasNoPolicy",
            "in": "query",
            "description": "Only return records that have or do not have an expiration policy set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasParent",
            "in": "query",
            "description": "Filter records that are shared (have a parent record)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasValidPolicy",
            "in": "query",
            "description": "Only return records that have or do not have expired.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter records on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search records on (part of) the UUID, name, filename, URI or username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Filter records that are shared from the specified parent record, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Filter records by secret using composition. Use secret.type to filter on type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "shareExpiresBeforeOrAt",
            "in": "query",
            "description": "Only return records for which the sharing period has expired at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Filter records on the exact URI.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter records on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter records on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Filter the records by vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Creates one or more new records in a vault",
        "description": "Creates one or more new vault records and returns the newly created records. Secrets are specified via the additional object secret. It is required to specify the 'topicus-Vault-session' header. When updating a TOTP-secret, make sure to set 'writeTotp' field.",
        "operationId": "create_account_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/vault/record/{recordid}": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Read a single record by id",
        "description": "Returns the vault record identified by the id. When the 'secret' additonal object is requested, the 'topicus-Vault-session' header must be specified.",
        "operationId": "get_account_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "vault"
        ],
        "summary": "Update a vault record",
        "description": "Updates the vault record identified by the id. To update the secrets, the 'secret' additional object must be used, in addition to specifying the 'topicus-Vault-session' header. When updating a TOTP-secret, make sure to set 'writeTotp' field.",
        "operationId": "update_account_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecord"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecord"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "vault"
        ],
        "summary": "Remove a vault record",
        "description": "Removes the vault record identified by the id. This cannot be undone.",
        "operationId": "delete_account_vault_record",
        "parameters": [
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/vault/record/{recordid}/move": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Move, copy or share a vault record",
        "description": "Move, copy or share the vault record specified by the given id to/with a different vault. For this, the 'topicus-Vault-session' header must be set.",
        "operationId": "move_account_vault_record_move",
        "parameters": [
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.MoveVaultRecord"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.MoveVaultRecord"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Vault record moved/copied/shared"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/vault/record/export": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Prepares an export of vault records in CSV format",
        "description": "Prepares an export of vault records using the filtering specified in the query parameters. The URI of the export can be found in the returned Location header. This URI is valid for 2 minutes after being generated.",
        "operationId": "startExport_account_vault_record_export",
        "parameters": [
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessibleByAccount",
            "in": "query",
            "description": "Filter records that accessible by the given account(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByAccountAsManager",
            "in": "query",
            "description": "Filter records that accessible by the given account(s) and the account is manager of the group, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByClient",
            "in": "query",
            "description": "Filter records that accessible by the given client(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter the records by account, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter the records by client, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "Filter records on the color.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/vault.VaultRecordColor"
              }
            }
          },
          {
            "name": "expireWarningBeforeOrAt",
            "in": "query",
            "description": "Only return records that show an expiration warning at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "Filter records on the exact filename.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter the records by group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOrganizationalUnit",
            "in": "query",
            "description": "Filter the records by organizational unit of the group, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasNoPolicy",
            "in": "query",
            "description": "Only return records that have or do not have an expiration policy set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasParent",
            "in": "query",
            "description": "Filter records that are shared (have a parent record)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasValidPolicy",
            "in": "query",
            "description": "Only return records that have or do not have expired.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter records on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search records on (part of) the UUID, name, filename, URI or username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Filter records that are shared from the specified parent record, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Filter records by secret using composition. Use secret.type to filter on type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "shareExpiresBeforeOrAt",
            "in": "query",
            "description": "Only return records for which the sharing period has expired at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Filter records on the exact URI.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter records on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter records on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Filter the records by vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Export prepared"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/account/{accountid}/vault/recover": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Recover access to a vault",
        "description": "Recover access to a vault for a given account.",
        "operationId": "recoverSecret_account_vault_recover",
        "parameters": [
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecovery"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecovery"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Access recovered"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/audit/{auditid}": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Read a single audit record by id",
        "description": "Returns the audit record identified by the id.",
        "operationId": "get_audit",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "auditid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/audit.AuditRecord"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/audit.AuditRecord"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/audit": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Query for audit records in Topicus KeyHub",
        "description": "Query for all audit records in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_audit",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Only return records after a given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Only return records before a given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "containing",
            "in": "query",
            "description": "Perform a full text search on the contents of audit records.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeDaily",
            "in": "query",
            "description": "Include or do not include records that are considered daily use.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "onGroup",
            "in": "query",
            "description": "Only return audit records targeting the given group either via onGroup1 or onGroup2, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "onGroup1",
            "in": "query",
            "description": "Only return audit records targeting the given group specifically as onGroup1, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "onOrByAccount",
            "in": "query",
            "description": "Only return audit records performed by or targeting the given account, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "onOrByClient",
            "in": "query",
            "description": "Only return audit records performed by or targeting the given client, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "onServiceAccount",
            "in": "query",
            "description": "Only return audit records targeting the given service account, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "performedByNameSet",
            "in": "query",
            "description": "Only return audit records that have the performed-by-name set or not set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "performedByUuid",
            "in": "query",
            "description": "Only return audit records that are performed by the given account or client, specified by uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter audit records on the given type(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/audit.AuditRecordType"
              }
            }
          },
          {
            "name": "visibleFor",
            "in": "query",
            "description": "Only return audit records that are meant to be displayed to the given account, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/audit.AuditRecordLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/audit.AuditRecordLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/audit/export": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Prepares an export of audit records in CSV format",
        "description": "Prepares an export of audit records using the filtering specified in the query parameters. The URI of the export can be found in the returned Location header. This URI is valid for 2 minutes after being generated.",
        "operationId": "startExport_audit_export",
        "parameters": [
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Only return records after a given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Only return records before a given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "containing",
            "in": "query",
            "description": "Perform a full text search on the contents of audit records.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeDaily",
            "in": "query",
            "description": "Include or do not include records that are considered daily use.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "onGroup",
            "in": "query",
            "description": "Only return audit records targeting the given group either via onGroup1 or onGroup2, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "onGroup1",
            "in": "query",
            "description": "Only return audit records targeting the given group specifically as onGroup1, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "onOrByAccount",
            "in": "query",
            "description": "Only return audit records performed by or targeting the given account, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "onOrByClient",
            "in": "query",
            "description": "Only return audit records performed by or targeting the given client, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "onServiceAccount",
            "in": "query",
            "description": "Only return audit records targeting the given service account, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "performedByNameSet",
            "in": "query",
            "description": "Only return audit records that have the performed-by-name set or not set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "performedByUuid",
            "in": "query",
            "description": "Only return audit records that are performed by the given account or client, specified by uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter audit records on the given type(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/audit.AuditRecordType"
              }
            }
          },
          {
            "name": "visibleFor",
            "in": "query",
            "description": "Only return audit records that are meant to be displayed to the given account, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Export prepared"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/certificate": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Query for global trusted certificates in Topicus KeyHub",
        "description": "Query for all global trusted certificates in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_certificate",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "alias",
            "in": "query",
            "description": "Filter certificates on the exact alias.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expired",
            "in": "query",
            "description": "Only return certificates that are expired at the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "global",
            "in": "query",
            "description": "Always true, even if not specified.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/certificate.CertificateLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/certificate.CertificateLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Creates one or more new global trusted certificates",
        "description": "Creates one or more new global trusted certificates and returns the newly created certificates.",
        "operationId": "create_certificate",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/certificate.CertificateLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/certificate.CertificateLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/certificate.CertificateLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/certificate.CertificateLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/certificate/{certificateid}": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Read a single global trusted certificate by id",
        "description": "Returns the global trusted certificate identified by the id.",
        "operationId": "get_certificate",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "certificateid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/certificate.Certificate"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/certificate.Certificate"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Update a global trusted certificate",
        "description": "Updates the global trusted certificate identified by the id.",
        "operationId": "update_certificate",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "certificateid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/certificate.Certificate"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/certificate.Certificate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/certificate.Certificate"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/certificate.Certificate"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Delete a global trusted certificate",
        "description": "Permanently removes the global trusted certificate identified by the id. This cannot be undone.",
        "operationId": "delete_certificate",
        "parameters": [
          {
            "name": "certificateid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client": {
      "get": {
        "tags": [
          "client"
        ],
        "summary": "Query for clients in Topicus KeyHub",
        "description": "Query for all clients in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_client",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accessprofileclients",
                  "audit",
                  "deleteTile",
                  "groupclients",
                  "groups",
                  "organizationalUnits",
                  "secret",
                  "tile",
                  "vaultRecordCount"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessProfile",
            "in": "query",
            "description": "Filter the SSO applications connected to access profiles, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "baseOrganizationalUnitAncestorOf",
            "in": "query",
            "description": "Only return the client applications whose base organizational unit, defined as the technical administrator's organizational unit, is equal to or an ancestor of any of the given unit(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "clientId",
            "in": "query",
            "description": "Filter clients on the client ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expiredCertificate",
            "in": "query",
            "description": "Only return LDAP clients for which the client certificate is expired at the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter the SSO applications connected to groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "isProvisionedInternalLDAP",
            "in": "query",
            "description": "Only return LDAP clients that are used as provisioned internal LDAP.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "memberOfOrganizationalUnit",
            "in": "query",
            "description": "Filter client applications on direct connections to organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "memberOfOrganizationalUnitOwnedBy",
            "in": "query",
            "description": "Filter client applications on connections to organizational units by being part of the owner group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter clients on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search clients on (part of) the name, client id or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameDoesNotStartWith",
            "in": "query",
            "description": "Only return clients for which the name does not start with one of the given values.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameStartsWith",
            "in": "query",
            "description": "Only return clients for which the name starts with one of the given values.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "notInAccessProfile",
            "in": "query",
            "description": "Filter the SSO applications not connected to access profiles, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "notInGroup",
            "in": "query",
            "description": "Filter the SSO applications not connected to groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnitForEnforcement",
            "in": "query",
            "description": "Filter clients on organizational units, specified by id. This parameter is automatically set and primarily used for security permission enforcement.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "ownedBy",
            "in": "query",
            "description": "Filter the clients for which the given group is owner, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sharedSecret",
            "in": "query",
            "description": "Filter the clients by the secret shared in a vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "technicalAdministrator",
            "in": "query",
            "description": "Filter the clients for which the given group is technical administrator, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Only return clients of the given type(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "useClientCredentials",
            "in": "query",
            "description": "Only return OAuth2 clients that use or do not use the client credentials grant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Filter the OAuth 2.0 clients by vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "withPermission",
            "in": "query",
            "description": "Only return OAuth2 clients that have specific permissions, specified by id. This parameter supports composition with all parameters from the client permission resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "withPermissionForOwningGroup",
            "in": "query",
            "description": "Filter the client applications with permissions for the given groups, either directly or via provisionedsystem ownership, specified by id. ",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "withRequestedPermissionForOwningGroup",
            "in": "query",
            "description": "Filter the client applications with active requests for permissions for the given groups, either directly or via provisionedsystem ownership, specified by id. ",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/client.ClientApplicationLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/client.ClientApplicationLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "client"
        ],
        "summary": "Creates one or more new clients",
        "description": "Creates one or more new clients and returns the newly created clients.",
        "operationId": "create_client",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accessprofileclients",
                  "audit",
                  "deleteTile",
                  "groupclients",
                  "groups",
                  "organizationalUnits",
                  "secret",
                  "tile",
                  "vaultRecordCount"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/client.ClientApplicationLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/client.ClientApplicationLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/client.ClientApplicationLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/client.ClientApplicationLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client/{clientid}": {
      "get": {
        "tags": [
          "client"
        ],
        "summary": "Read a single client by id",
        "description": "Returns the client identified by the id.",
        "operationId": "get_client",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accessprofileclients",
                  "audit",
                  "deleteTile",
                  "groupclients",
                  "groups",
                  "organizationalUnits",
                  "secret",
                  "tile",
                  "vaultRecordCount"
                ]
              }
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/client.ClientApplication"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/client.ClientApplication"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "client"
        ],
        "summary": "Update a client",
        "description": "Updates the client identified by the id.",
        "operationId": "update_client",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accessprofileclients",
                  "audit",
                  "deleteTile",
                  "groupclients",
                  "groups",
                  "organizationalUnits",
                  "secret",
                  "tile",
                  "vaultRecordCount"
                ]
              }
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/client.ClientApplication"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/client.ClientApplication"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/client.ClientApplication"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/client.ClientApplication"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "client"
        ],
        "summary": "Delete a client",
        "description": "Permanently removes the client identified by the id. This cannot be undone.",
        "operationId": "delete_client",
        "parameters": [
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client/me": {
      "get": {
        "tags": [
          "client"
        ],
        "operationId": "me_client_me",
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/client.OAuth2Client"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/client.OAuth2Client"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client/{clientid}/permission/{permissionid}": {
      "get": {
        "tags": [
          "client"
        ],
        "summary": "Read a single permission by id",
        "description": "Returns the permission identified by the id.",
        "operationId": "get_client_permission",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "permissionid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/client.OAuth2ClientPermission"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/client.OAuth2ClientPermission"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "client"
        ],
        "summary": "Delete a permission",
        "description": "Deletes the permission identified by the id.",
        "operationId": "delete_client_permission",
        "parameters": [
          {
            "name": "permissionid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client/{clientid}/permission": {
      "get": {
        "tags": [
          "client"
        ],
        "summary": "Query for permissions on OAuth2 clients in Topicus KeyHub",
        "description": "Query for all permissions given to a OAuth2 client in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_client_permission",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter permissions on the clients to which they are given, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "clientAdministratorGroup",
            "in": "query",
            "description": "Filter permissions on the administrator groups of the clients to which they are given, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "clientOwnerGroup",
            "in": "query",
            "description": "Filter permissions on the owner groups of the clients to which they are given, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "forGroup",
            "in": "query",
            "description": "Filter permissions on the groups to which they apply, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "forSystem",
            "in": "query",
            "description": "Filter permissions on the systems to which they apply, specified by id. This parameter supports composition with all parameters from the system resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "forSystemContentAdministratorGroup",
            "in": "query",
            "description": "Filter permissions on the content administrator groups of the systems to which they apply, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "forSystemOwnerGroup",
            "in": "query",
            "description": "Filter permissions on the owner groups of the systems to which they apply, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "forSystemTechnicalAdministratorGroup",
            "in": "query",
            "description": "Filter permissions on the technical administrator groups of the systems to which they apply, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "targetNameContains",
            "in": "query",
            "description": "Filter permissions on (part of) the name or uuid of the target.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Filter permissions on the permission type(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/client.OAuth2ClientPermissionType"
              }
            }
          },
          {
            "name": "withPermissionForOwningGroup",
            "in": "query",
            "description": "Filter the clients for the permissions with permissions for the given groups, either directly or via provisionedsystem ownership, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "withRequestedPermissionForOwningGroup",
            "in": "query",
            "description": "Filter the clients for the permissions with active requests for permissions for the given groups, either directly or via provisionedsystem ownership, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/client.OAuth2ClientPermissionLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/client.OAuth2ClientPermissionLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client/me/secret": {
      "post": {
        "tags": [
          "client"
        ],
        "summary": "Rotate the secret for the current OAuth2 client",
        "description": "The given secret will be verified and a new secret generated and returned.",
        "operationId": "rotateSecret_client_me_secret",
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/GeneratedSecret"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/GeneratedSecret"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The new secret"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client/vault/unlock": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Unlocks the client's vault",
        "description": "Unlocks the vault of the authenticated client. Use the session password in the response via the topicus-Vault-session header to access secrets. The prefered way to unlock a vault is via the authentication by passing 'authVault=\"access\"' to the OAuth2 token endpoint.",
        "operationId": "unlockVault_client_vault_unlock",
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultUnlock"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultUnlock"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vault unlocked",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultUnlockResponse"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultUnlockResponse"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client/{clientid}/vault": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Read a vault with its records",
        "description": "Returns the vault. It is not possible to read the secrets, for this the records need to be read one by one.",
        "operationId": "getVault_client_vault",
        "parameters": [
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.Vault"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.Vault"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "vault"
        ],
        "summary": "Delete a personal vault",
        "description": "Delete the personal vault of the current user.",
        "operationId": "deleteVault_client_vault",
        "parameters": [
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vault removed"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client/{clientid}/vault/newpassword": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Returns a random generated password",
        "description": "Returns a random generated password using the given strategy, or the default strategy if none given.",
        "operationId": "newpassword_client_vault_newpassword",
        "parameters": [
          {
            "name": "strategy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client/{clientid}/vault/random": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Returns a random generated value",
        "description": "Returns a random generated value of the given length, default 24.",
        "operationId": "random_client_vault_random",
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "schema": {
              "maximum": 1024,
              "type": "integer",
              "format": "int32",
              "default": 24
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client/{clientid}/vault/record": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Query for records in a vault",
        "description": "Query for vault records in a specific vault. The various query parameters can be used to filter the response. It is not possible to access secrets with a query that returns multiple results. Secrets can only be read one by one.",
        "operationId": "list_client_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessibleByAccount",
            "in": "query",
            "description": "Filter records that accessible by the given account(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByAccountAsManager",
            "in": "query",
            "description": "Filter records that accessible by the given account(s) and the account is manager of the group, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByClient",
            "in": "query",
            "description": "Filter records that accessible by the given client(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter the records by account, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter the records by client, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "Filter records on the color.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/vault.VaultRecordColor"
              }
            }
          },
          {
            "name": "expireWarningBeforeOrAt",
            "in": "query",
            "description": "Only return records that show an expiration warning at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "Filter records on the exact filename.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter the records by group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOrganizationalUnit",
            "in": "query",
            "description": "Filter the records by organizational unit of the group, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasNoPolicy",
            "in": "query",
            "description": "Only return records that have or do not have an expiration policy set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasParent",
            "in": "query",
            "description": "Filter records that are shared (have a parent record)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasValidPolicy",
            "in": "query",
            "description": "Only return records that have or do not have expired.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter records on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search records on (part of) the UUID, name, filename, URI or username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Filter records that are shared from the specified parent record, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Filter records by secret using composition. Use secret.type to filter on type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "shareExpiresBeforeOrAt",
            "in": "query",
            "description": "Only return records for which the sharing period has expired at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Filter records on the exact URI.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter records on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter records on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Filter the records by vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Creates one or more new records in a vault",
        "description": "Creates one or more new vault records and returns the newly created records. Secrets are specified via the additional object secret. It is required to specify the 'topicus-Vault-session' header. When updating a TOTP-secret, make sure to set 'writeTotp' field.",
        "operationId": "create_client_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client/{clientid}/vault/record/{recordid}": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Read a single record by id",
        "description": "Returns the vault record identified by the id. When the 'secret' additonal object is requested, the 'topicus-Vault-session' header must be specified.",
        "operationId": "get_client_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "vault"
        ],
        "summary": "Update a vault record",
        "description": "Updates the vault record identified by the id. To update the secrets, the 'secret' additional object must be used, in addition to specifying the 'topicus-Vault-session' header. When updating a TOTP-secret, make sure to set 'writeTotp' field.",
        "operationId": "update_client_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecord"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecord"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "vault"
        ],
        "summary": "Remove a vault record",
        "description": "Removes the vault record identified by the id. This cannot be undone.",
        "operationId": "delete_client_vault_record",
        "parameters": [
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client/{clientid}/vault/record/{recordid}/move": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Move, copy or share a vault record",
        "description": "Move, copy or share the vault record specified by the given id to/with a different vault. For this, the 'topicus-Vault-session' header must be set.",
        "operationId": "move_client_vault_record_move",
        "parameters": [
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.MoveVaultRecord"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.MoveVaultRecord"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Vault record moved/copied/shared"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client/{clientid}/vault/record/export": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Prepares an export of vault records in CSV format",
        "description": "Prepares an export of vault records using the filtering specified in the query parameters. The URI of the export can be found in the returned Location header. This URI is valid for 2 minutes after being generated.",
        "operationId": "startExport_client_vault_record_export",
        "parameters": [
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessibleByAccount",
            "in": "query",
            "description": "Filter records that accessible by the given account(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByAccountAsManager",
            "in": "query",
            "description": "Filter records that accessible by the given account(s) and the account is manager of the group, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByClient",
            "in": "query",
            "description": "Filter records that accessible by the given client(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter the records by account, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter the records by client, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "Filter records on the color.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/vault.VaultRecordColor"
              }
            }
          },
          {
            "name": "expireWarningBeforeOrAt",
            "in": "query",
            "description": "Only return records that show an expiration warning at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "Filter records on the exact filename.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter the records by group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOrganizationalUnit",
            "in": "query",
            "description": "Filter the records by organizational unit of the group, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasNoPolicy",
            "in": "query",
            "description": "Only return records that have or do not have an expiration policy set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasParent",
            "in": "query",
            "description": "Filter records that are shared (have a parent record)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasValidPolicy",
            "in": "query",
            "description": "Only return records that have or do not have expired.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter records on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search records on (part of) the UUID, name, filename, URI or username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Filter records that are shared from the specified parent record, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Filter records by secret using composition. Use secret.type to filter on type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "shareExpiresBeforeOrAt",
            "in": "query",
            "description": "Only return records for which the sharing period has expired at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Filter records on the exact URI.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter records on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter records on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Filter the records by vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Export prepared"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/client/{clientid}/vault/recover": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Recover access to a vault",
        "description": "Recover access to a vault for a given account.",
        "operationId": "recoverSecret_client_vault_recover",
        "parameters": [
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecovery"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecovery"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Access recovered"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/deletedvaultholder/{deletedvaultholderid}": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Read a single deleted vault by id",
        "description": "Returns the deleted vault identified by the id.",
        "operationId": "get_deletedvaultholder",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "vault"
                ]
              }
            }
          },
          {
            "name": "deletedvaultholderid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.DeletedVaultHolder"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.DeletedVaultHolder"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "vault"
        ],
        "summary": "Permanently delete a deleted vault",
        "description": "Permanently removes the deleted vault identified by the id. This cannot be undone.",
        "operationId": "delete_deletedvaultholder",
        "parameters": [
          {
            "name": "deletedvaultholderid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/deletedvaultholder": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Query for deleted vaults in Topicus KeyHub",
        "description": "Query for all deletes vaults in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_deletedvaultholder",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "vault"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Filter the deleted vaults by vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.DeletedVaultHolderLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.DeletedVaultHolderLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/deletedvaultholder/{vaultid}/recover": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Recover a deleted vault",
        "description": "Recover a deleted vault, moving the records to a group or personal vault.",
        "operationId": "recover_deletedvaultholder_recover",
        "parameters": [
          {
            "name": "vaultid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.DeletedVaultRecovery"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.DeletedVaultRecovery"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Vault recovered"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/deletedvaultholder/{vaultid}/vault": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Read a vault with its records",
        "description": "Returns the vault. It is not possible to read the secrets, for this the records need to be read one by one.",
        "operationId": "getVault_deletedvaultholder_vault",
        "parameters": [
          {
            "name": "vaultid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.Vault"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.Vault"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "vault"
        ],
        "summary": "Delete a personal vault",
        "description": "Delete the personal vault of the current user.",
        "operationId": "deleteVault_deletedvaultholder_vault",
        "parameters": [
          {
            "name": "vaultid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vault removed"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/deletedvaultholder/{vaultid}/vault/newpassword": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Returns a random generated password",
        "description": "Returns a random generated password using the given strategy, or the default strategy if none given.",
        "operationId": "newpassword_deletedvaultholder_vault_newpassword",
        "parameters": [
          {
            "name": "strategy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vaultid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/deletedvaultholder/{vaultid}/vault/random": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Returns a random generated value",
        "description": "Returns a random generated value of the given length, default 24.",
        "operationId": "random_deletedvaultholder_vault_random",
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "schema": {
              "maximum": 1024,
              "type": "integer",
              "format": "int32",
              "default": 24
            }
          },
          {
            "name": "vaultid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/deletedvaultholder/{vaultid}/vault/record": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Query for records in a vault",
        "description": "Query for vault records in a specific vault. The various query parameters can be used to filter the response. It is not possible to access secrets with a query that returns multiple results. Secrets can only be read one by one.",
        "operationId": "list_deletedvaultholder_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessibleByAccount",
            "in": "query",
            "description": "Filter records that accessible by the given account(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByAccountAsManager",
            "in": "query",
            "description": "Filter records that accessible by the given account(s) and the account is manager of the group, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByClient",
            "in": "query",
            "description": "Filter records that accessible by the given client(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter the records by account, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter the records by client, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "Filter records on the color.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/vault.VaultRecordColor"
              }
            }
          },
          {
            "name": "expireWarningBeforeOrAt",
            "in": "query",
            "description": "Only return records that show an expiration warning at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "Filter records on the exact filename.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter the records by group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOrganizationalUnit",
            "in": "query",
            "description": "Filter the records by organizational unit of the group, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasNoPolicy",
            "in": "query",
            "description": "Only return records that have or do not have an expiration policy set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasParent",
            "in": "query",
            "description": "Filter records that are shared (have a parent record)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasValidPolicy",
            "in": "query",
            "description": "Only return records that have or do not have expired.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter records on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search records on (part of) the UUID, name, filename, URI or username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Filter records that are shared from the specified parent record, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Filter records by secret using composition. Use secret.type to filter on type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "shareExpiresBeforeOrAt",
            "in": "query",
            "description": "Only return records for which the sharing period has expired at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Filter records on the exact URI.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter records on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter records on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Filter the records by vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "vaultid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Creates one or more new records in a vault",
        "description": "Creates one or more new vault records and returns the newly created records. Secrets are specified via the additional object secret. It is required to specify the 'topicus-Vault-session' header. When updating a TOTP-secret, make sure to set 'writeTotp' field.",
        "operationId": "create_deletedvaultholder_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "vaultid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/deletedvaultholder/{vaultid}/vault/record/{recordid}": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Read a single record by id",
        "description": "Returns the vault record identified by the id. When the 'secret' additonal object is requested, the 'topicus-Vault-session' header must be specified.",
        "operationId": "get_deletedvaultholder_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "vaultid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "vault"
        ],
        "summary": "Update a vault record",
        "description": "Updates the vault record identified by the id. To update the secrets, the 'secret' additional object must be used, in addition to specifying the 'topicus-Vault-session' header. When updating a TOTP-secret, make sure to set 'writeTotp' field.",
        "operationId": "update_deletedvaultholder_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "vaultid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecord"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecord"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "vault"
        ],
        "summary": "Remove a vault record",
        "description": "Removes the vault record identified by the id. This cannot be undone.",
        "operationId": "delete_deletedvaultholder_vault_record",
        "parameters": [
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "vaultid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/deletedvaultholder/{vaultid}/vault/record/{recordid}/move": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Move, copy or share a vault record",
        "description": "Move, copy or share the vault record specified by the given id to/with a different vault. For this, the 'topicus-Vault-session' header must be set.",
        "operationId": "move_deletedvaultholder_vault_record_move",
        "parameters": [
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "vaultid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.MoveVaultRecord"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.MoveVaultRecord"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Vault record moved/copied/shared"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/deletedvaultholder/{vaultid}/vault/record/export": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Prepares an export of vault records in CSV format",
        "description": "Prepares an export of vault records using the filtering specified in the query parameters. The URI of the export can be found in the returned Location header. This URI is valid for 2 minutes after being generated.",
        "operationId": "startExport_deletedvaultholder_vault_record_export",
        "parameters": [
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessibleByAccount",
            "in": "query",
            "description": "Filter records that accessible by the given account(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByAccountAsManager",
            "in": "query",
            "description": "Filter records that accessible by the given account(s) and the account is manager of the group, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByClient",
            "in": "query",
            "description": "Filter records that accessible by the given client(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter the records by account, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter the records by client, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "Filter records on the color.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/vault.VaultRecordColor"
              }
            }
          },
          {
            "name": "expireWarningBeforeOrAt",
            "in": "query",
            "description": "Only return records that show an expiration warning at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "Filter records on the exact filename.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter the records by group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOrganizationalUnit",
            "in": "query",
            "description": "Filter the records by organizational unit of the group, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasNoPolicy",
            "in": "query",
            "description": "Only return records that have or do not have an expiration policy set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasParent",
            "in": "query",
            "description": "Filter records that are shared (have a parent record)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasValidPolicy",
            "in": "query",
            "description": "Only return records that have or do not have expired.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter records on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search records on (part of) the UUID, name, filename, URI or username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Filter records that are shared from the specified parent record, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Filter records by secret using composition. Use secret.type to filter on type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "shareExpiresBeforeOrAt",
            "in": "query",
            "description": "Only return records for which the sharing period has expired at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Filter records on the exact URI.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter records on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter records on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Filter the records by vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vaultid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Export prepared"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/deletedvaultholder/{vaultid}/vault/recover": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Recover access to a vault",
        "description": "Recover access to a vault for a given account.",
        "operationId": "recoverSecret_deletedvaultholder_vault_recover",
        "parameters": [
          {
            "name": "vaultid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecovery"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecovery"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Access recovered"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/export": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Downloads an export",
        "description": "Downloads the export previously prepared.",
        "operationId": "streamExport_export",
        "parameters": [
          {
            "name": "export",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Export download",
            "content": {
              "text/csv": {}
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/groupclassification": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Query for group classifications in Topicus KeyHub",
        "description": "Query for all group classifications in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_groupclassification",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "info"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "defaultClassification",
            "in": "query",
            "description": "Only return classifications that are or are not the default classification.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter group classifications on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Filter group classifications on (part of) the name or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupClassificationLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupClassificationLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Creates one or more new group classifications",
        "description": "Creates one or more new group classifications and returns the newly created classifications.",
        "operationId": "create_groupclassification",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "info"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupClassificationLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupClassificationLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupClassificationLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupClassificationLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/groupclassification/{groupclassificationid}": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Read a single group classification by id",
        "description": "Returns the group classification identified by the id.",
        "operationId": "get_groupclassification",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "info"
                ]
              }
            }
          },
          {
            "name": "groupclassificationid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupClassification"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupClassification"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "group"
        ],
        "summary": "Update a group classification",
        "description": "Updates the group classification identified by the id.",
        "operationId": "update_groupclassification",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "info"
                ]
              }
            }
          },
          {
            "name": "groupclassificationid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupClassification"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupClassification"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupClassification"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupClassification"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "group"
        ],
        "summary": "Delete a group classification",
        "description": "Deletes the group classification identified by the id.",
        "operationId": "delete_groupclassification",
        "parameters": [
          {
            "name": "groupclassificationid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/groupclient/{groupclientid}": {
      "get": {
        "tags": [
          "client",
          "group"
        ],
        "summary": "Read a single client link for a group",
        "description": "Returns the single client link for the group.",
        "operationId": "get_groupclient",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "groupclientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupClient"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupClient"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "client",
          "group"
        ],
        "summary": "Update a client link for a group",
        "description": "Updates the client link for a group identified by the id.",
        "operationId": "update_groupclient",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "groupclientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupClient"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupClient"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupClient"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupClient"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "client",
          "group"
        ],
        "summary": "Remove a client link from a group",
        "description": "Removes the specified client link, effectively removing access to the client for members of  the group.",
        "operationId": "delete_groupclient",
        "parameters": [
          {
            "name": "groupclientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/groupclient": {
      "get": {
        "tags": [
          "client",
          "group"
        ],
        "summary": "Query for client links for a group",
        "description": "Queries over all client links for a group. The various query parameters can be used to filter the response.",
        "operationId": "list_groupclient",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "activationRequired",
            "in": "query",
            "description": "Only return client group links that do or do not require activation.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "appAdminGroup",
            "in": "query",
            "description": "Filter client group links on the groups performing technical administration of the client, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "appOwnerGroup",
            "in": "query",
            "description": "Filter client group links on the groups with ownership of the client, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter client group links on the given clients, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter client group links on the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnitForEnforcement",
            "in": "query",
            "description": "Filter groupclients on their client's organizational units, specified by id. This parameter is automatically set and primarily used for security permission enforcement.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupClientLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupClientLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/groupfolder": {
      "get": {
        "tags": [
          "profile"
        ],
        "summary": "Query for group folders in Topicus KeyHub",
        "description": "Query for all group folders in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_groupfolder",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter group folders on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ownedBy",
            "in": "query",
            "description": "Filter group folders on the given accounts, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupFolderLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupFolderLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "profile"
        ],
        "summary": "Creates one or more new group folders",
        "description": "Creates one or more new group folders and returns the newly created folders.",
        "operationId": "create_groupfolder",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupFolderLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupFolderLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupFolderLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupFolderLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/groupfolder/{groupfolderid}": {
      "get": {
        "tags": [
          "profile"
        ],
        "summary": "Read a single group folder by id",
        "description": "Returns the group folder identified by the id.",
        "operationId": "get_groupfolder",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "groupfolderid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupFolder"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupFolder"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "profile"
        ],
        "summary": "Update a group folder",
        "description": "Updates the group folder identified by the id.",
        "operationId": "update_groupfolder",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "groupfolderid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupFolder"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupFolder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupFolder"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupFolder"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "profile"
        ],
        "summary": "Delete a group folder from Topicus KeyHub",
        "description": "Permanently removes the group folder. This cannot be undone.",
        "operationId": "delete_groupfolder",
        "parameters": [
          {
            "name": "groupfolderid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/account": {
      "get": {
        "tags": [
          "account",
          "group"
        ],
        "summary": "Query for memberships for a group",
        "description": "Queries over all members of a group. The various query parameters can be used to filter the response.",
        "operationId": "list_group_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter group memberships on the given accounts, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "applicableForActivation",
            "in": "query",
            "description": "Only return group memberships that can or cannot be activated by the current user.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "expiredAt",
            "in": "query",
            "description": "Only return group memberships that have an expiration set that is before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter group memberships on the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupNameContains",
            "in": "query",
            "description": "Filter group memberships on (part of) the name or uuid of the group or the folder (if any).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nested",
            "in": "query",
            "description": "Only return group memberships that are or are not nested.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "organizationalUnit",
            "in": "query",
            "description": "Filter group memberships on the given organizational unit of the group, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "rights",
            "in": "query",
            "description": "Filter group memberships on the given rights.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/group.GroupRights"
              }
            }
          },
          {
            "name": "signature",
            "in": "query",
            "description": "Filter group memberships on the given signatures, specified by id. This parameter supports composition with all parameters from the signature filter.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "vaultAccess",
            "in": "query",
            "description": "Only return group memberships that have or do not have access to the group's vault.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupAccountLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupAccountLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "account",
          "group"
        ],
        "summary": "Creates one or more new memberships for a group",
        "description": "Creates one or more new memberships for a group and returns the newly created memberships.",
        "operationId": "create_group_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupAccountLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupAccountLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupAccountLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupAccountLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/account/{accountid}": {
      "get": {
        "tags": [
          "account",
          "group"
        ],
        "summary": "Read a single membership for a group",
        "description": "Returns the single membership for the group. This also contains information such as the rights and provisioning information.",
        "operationId": "get_group_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupAccount"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupAccount"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "account",
          "group"
        ],
        "summary": "Update a memberships for a group",
        "description": "Updates the memberships for a group identified by the id.",
        "operationId": "update_group_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupAccount"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupAccount"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupAccount"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "account",
          "group"
        ],
        "summary": "Remove a membership from a group",
        "description": "Removes the specified membership, effectively removing the account from the group.",
        "operationId": "delete_group_account",
        "parameters": [
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/account/{accountid}/activation": {
      "delete": {
        "tags": [
          "group"
        ],
        "summary": "Revokes the permission to activate the group",
        "description": "Revokes the permission to activate the group.",
        "operationId": "revokeActivationPermission_group_account_activation",
        "parameters": [
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Permission revoked"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/account/{accountid}/nesting": {
      "put": {
        "tags": [
          "group"
        ],
        "summary": "Updates the nesting status of a group membership",
        "description": "Updates the nesting status of a group membership.",
        "operationId": "updateNesting_group_account_nesting",
        "parameters": [
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupAccountNesting"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupAccountNesting"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Nesting status updated"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/audit": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Query for audits for a group",
        "description": "Queries over all audits for a group. The various query parameters can be used to filter the response.",
        "operationId": "list_group_audit",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "Only return audits created after a given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter group audits on the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "lastForGroups",
            "in": "query",
            "description": "Only return the last audits for the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Only return audits with a given status.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/audit.GroupAuditStatus"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/audit.GroupAuditLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/audit.GroupAuditLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Create an audit for a group",
        "description": "Creates an audit for a group and returns the newly created memberships. Fetch a template for an audit via the 'new' resource.",
        "operationId": "create_group_audit",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/audit.GroupAuditLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/audit.GroupAuditLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/audit.GroupAuditLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/audit.GroupAuditLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/audit/{auditid}": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Read a single audit for a group",
        "description": "Returns a single audit for the group.",
        "operationId": "get_group_audit",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "auditid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/audit.GroupAudit"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/audit.GroupAudit"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "group"
        ],
        "summary": "Update an audit for a group",
        "description": "Updates the audit for a group identified by the id. Only audits in draft can be updated.",
        "operationId": "update_group_audit",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "auditid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/audit.GroupAudit"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/audit.GroupAudit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/audit.GroupAudit"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/audit.GroupAudit"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/audit/new": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Start a new audit or fetch a saved draft",
        "description": "Returns a template of a complete audit for the group or an earlier saved draft. The template or draft can then be filled in and posted to actually create the audit.",
        "operationId": "getNewOrDraftAudit_group_audit_new",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/audit.GroupAudit"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/audit.GroupAudit"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/audit/nextGroup": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Retrieve the next group requiring an audit",
        "description": "Returns the next group that requires an audit or a 404 Not Found if there are none.Groups you directly manage are prioritised above groups you are delegated manager of.",
        "operationId": "getNextGroup_group_audit_nextGroup",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {},
              "application/vnd.topicus.keyhub+xml;version=81": {}
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Query for groups in Topicus KeyHub",
        "description": "Query for all groups in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_group",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accounts",
                  "administeredClients",
                  "administeredSystems",
                  "admins",
                  "audit",
                  "authorizedGroups",
                  "clientPermissions",
                  "clients",
                  "contentAdministeredSystems",
                  "globalRoles",
                  "groupAccessInfo",
                  "groupauditinginfo",
                  "groupinfo",
                  "helpdesk",
                  "markers",
                  "myaccount",
                  "mydelegatedaccount",
                  "nestedGroups",
                  "onlyLinkedGOS",
                  "ownedAccessProfiles",
                  "ownedClients",
                  "ownedDirectories",
                  "ownedGroupsOnSystem",
                  "ownedOrganizationalUnits",
                  "ownedSystems",
                  "recentAudits",
                  "requeststatus",
                  "serviceAccounts",
                  "systems",
                  "vault",
                  "webhooks"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessModifiedSince",
            "in": "query",
            "description": "Search groups by connected, owned or administrated clients, linked systems, webhooks or service accounts that have been modified since the given instance.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "accessProfileAdministration",
            "in": "query",
            "description": "Only return groups that have or have not enabled access profile administration.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "accessQuicksearch",
            "in": "query",
            "description": "Search groups by name of connected, owned or administrated clients, linked systems, webhooks or service accounts.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "applicationAdministration",
            "in": "query",
            "description": "Only return groups that have or have not enabled application administration.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "auditDue",
            "in": "query",
            "description": "Only return groups that are or are not due for a periodic audit.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "auditOverDue",
            "in": "query",
            "description": "Only return groups that are or are not over due for a periodic audit.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "auditRequested",
            "in": "query",
            "description": "Only return groups for which an audit is or is not requested.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "auditedSince",
            "in": "query",
            "description": "Only return groups that have been audited since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "auditingStatus",
            "in": "query",
            "description": "Filter groups on the status of its periodic auditing. These sets are disjunct. A group always has only one status. A group that is over due for auditing will not be returned when only AUDITED is requested.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/group.GroupAuditingStatus"
              }
            }
          },
          {
            "name": "auditsReviewedBy",
            "in": "query",
            "description": "Filter groups for which audits are reviewed by one of the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "authorizedBy",
            "in": "query",
            "description": "Filter groups for which the given groups perform some form of authorization, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "classification",
            "in": "query",
            "description": "Filter groups by classification, specified by id. This parameter supports composition with all parameters from the group classification resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "containsAccount",
            "in": "query",
            "description": "Filter the groups by membership of accounts, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "containsAllAccounts",
            "in": "query",
            "description": "Filter the groups by membership of all accounts, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "containsClient",
            "in": "query",
            "description": "Filter the groups with clients connected, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "delegationGivenTo",
            "in": "query",
            "description": "Filter groups that have delegated management to one of the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "doesNotContainAccount",
            "in": "query",
            "description": "Filter the groups by accounts not being member, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "doesNotContainClient",
            "in": "query",
            "description": "Filter the groups with clients not connected, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupAuditConfig",
            "in": "query",
            "description": "Filter groups by auditing configuration.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasAnyAuthorizingGroupSet",
            "in": "query",
            "description": "Only return groups that have, or do not have, any authorizing group set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasAuditUnderReview",
            "in": "query",
            "description": "Only return groups that have or do not have an audit that is currently under review.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasAuditing",
            "in": "query",
            "description": "Only return groups that have or do not have periodic auditing setup.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasClientPermissions",
            "in": "query",
            "description": "Only return groups that have or do not have given permissions to OAuth2 clients.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasClients",
            "in": "query",
            "description": "Only return groups that have or do not have connected clients.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasMoreThanOneManager",
            "in": "query",
            "description": "Only return groups that have or do not have 2 or more managers.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasSystems",
            "in": "query",
            "description": "Only return groups that have or do not have dynamic provisioning of linked systems.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasVault",
            "in": "query",
            "description": "Only return groups that have or do not have a vault.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasWebhooks",
            "in": "query",
            "description": "Only return groups that have or do not have webhooks on audit records.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "isManager",
            "in": "query",
            "description": "Only return groups for which the given account is manager, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "keyHubAdmin",
            "in": "query",
            "description": "Only return the KeyHub administrator group or all other groups.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "meetsClassificationCriteria",
            "in": "query",
            "description": "Only return groups that do or do not meet the various criteria set in the classification (if any).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/group.GroupClassificationConformance"
              }
            }
          },
          {
            "name": "membershipAuthorizedBy",
            "in": "query",
            "description": "Filter groups for which membership is authorized by one of the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "myGroups",
            "in": "query",
            "description": "Filter my groups for the given accounts, specified by id. This contains the groups the account is member of or for which the account has delegated management privileges.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter groups on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Filter groups on (part of) the name or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameDoesNotStartWith",
            "in": "query",
            "description": "Filter groups with which the name does not start with the given values.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameOrDescriptionContains",
            "in": "query",
            "description": "Filter groups on (part of) the name, description or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameStartsWith",
            "in": "query",
            "description": "Filter groups on the start of the name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nestedGroup",
            "in": "query",
            "description": "Only return groups that are, or are not, nested under another group.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "nestedUnder",
            "in": "query",
            "description": "Only return groups that are nested under the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "notNestedUnder",
            "in": "query",
            "description": "Only return groups that are not nested under the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "notPartOfAccessProfile",
            "in": "query",
            "description": "Filter the groups not part of the given access profiles, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "numberOfAccountsGreaterOrEqual",
            "in": "query",
            "description": "Only return groups that have at least the given number of members.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnit",
            "in": "query",
            "description": "Filter groups on organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "ownsClients",
            "in": "query",
            "description": "Only return groups that own or do not own clients.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "ownsDirectories",
            "in": "query",
            "description": "Only return groups that own or do not own internal directories.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "ownsGroupOnSystems",
            "in": "query",
            "description": "Only return groups that own or do not own groups on linked systems.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "ownsSystems",
            "in": "query",
            "description": "Only return groups that own or do not own provisioned systems.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "partOfAccessProfile",
            "in": "query",
            "description": "Filter the groups part of the given access profiles, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "privateGroup",
            "in": "query",
            "description": "Only return groups that are, or are not, marked as private group.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "provisioningAuthorizedBy",
            "in": "query",
            "description": "Filter groups for which provisioning is authorized by one of the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "rotatingPasswordRequired",
            "in": "query",
            "description": "Only return groups that do, or do not, require a rotating password to activate.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "singleManaged",
            "in": "query",
            "description": "Only return groups that allow or do not allow management by a single manager.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Filter the groups by vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "vaultRecovery",
            "in": "query",
            "description": "Only return groups with the given vault recovery availability.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/group.VaultRecoveryAvailability"
              }
            }
          },
          {
            "name": "vaultRequiresActivation",
            "in": "query",
            "description": "Only return groups for which activation is or is not required when accessing the vault.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "Filter groups on whether they are public or only visible to members. Possible values are ALL (\"return all groups (public and hidden)\"), PUBLIC (\"return only public groups\") and PUBLIC_OR_MEMBER (\"return public groups and hidden groups of which the current subject is a member\"). Default is PUBLIC_OR_MEMBER. This option does not influence permissions, i.e. filtering on ALL can lead to errors if the current subject does not have the correct permissions on one or more groups.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/group.GroupVisibility"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Creates one or more new groups",
        "description": "Creates one or more new groups and returns the newly created groups. It is required to specify the first admin via the admins additional object.",
        "operationId": "create_group",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accounts",
                  "administeredClients",
                  "administeredSystems",
                  "admins",
                  "audit",
                  "authorizedGroups",
                  "clientPermissions",
                  "clients",
                  "contentAdministeredSystems",
                  "globalRoles",
                  "groupAccessInfo",
                  "groupauditinginfo",
                  "groupinfo",
                  "helpdesk",
                  "markers",
                  "myaccount",
                  "mydelegatedaccount",
                  "nestedGroups",
                  "onlyLinkedGOS",
                  "ownedAccessProfiles",
                  "ownedClients",
                  "ownedDirectories",
                  "ownedGroupsOnSystem",
                  "ownedOrganizationalUnits",
                  "ownedSystems",
                  "recentAudits",
                  "requeststatus",
                  "serviceAccounts",
                  "systems",
                  "vault",
                  "webhooks"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Read a single group by id",
        "description": "Returns the group identified by the id.",
        "operationId": "get_group",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accounts",
                  "administeredClients",
                  "administeredSystems",
                  "admins",
                  "audit",
                  "authorizedGroups",
                  "clientPermissions",
                  "clients",
                  "contentAdministeredSystems",
                  "globalRoles",
                  "groupAccessInfo",
                  "groupauditinginfo",
                  "groupinfo",
                  "helpdesk",
                  "markers",
                  "myaccount",
                  "mydelegatedaccount",
                  "nestedGroups",
                  "onlyLinkedGOS",
                  "ownedAccessProfiles",
                  "ownedClients",
                  "ownedDirectories",
                  "ownedGroupsOnSystem",
                  "ownedOrganizationalUnits",
                  "ownedSystems",
                  "recentAudits",
                  "requeststatus",
                  "serviceAccounts",
                  "systems",
                  "vault",
                  "webhooks"
                ]
              }
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.Group"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.Group"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "group"
        ],
        "summary": "Update a group",
        "description": "Updates the group identified by the id.",
        "operationId": "update_group",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accounts",
                  "administeredClients",
                  "administeredSystems",
                  "admins",
                  "audit",
                  "authorizedGroups",
                  "clientPermissions",
                  "clients",
                  "contentAdministeredSystems",
                  "globalRoles",
                  "groupAccessInfo",
                  "groupauditinginfo",
                  "groupinfo",
                  "helpdesk",
                  "markers",
                  "myaccount",
                  "mydelegatedaccount",
                  "nestedGroups",
                  "onlyLinkedGOS",
                  "ownedAccessProfiles",
                  "ownedClients",
                  "ownedDirectories",
                  "ownedGroupsOnSystem",
                  "ownedOrganizationalUnits",
                  "ownedSystems",
                  "recentAudits",
                  "requeststatus",
                  "serviceAccounts",
                  "systems",
                  "vault",
                  "webhooks"
                ]
              }
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.Group"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.Group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.Group"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.Group"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/auditstats": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Reads various group based counts and statistics",
        "description": "Returns the counts and statistics of groups within Topicus KeyHub.",
        "operationId": "getAuditStats_group_auditstats",
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupsAuditStats"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupsAuditStats"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/mail": {
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Send a mail to the managers of a group",
        "description": "Send a mail to the managers of the group identified by the id.",
        "operationId": "mail_group_mail",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupAdminMail"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupAdminMail"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Mail sent"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/requestaudit": {
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Request an audit from the managers of a group",
        "description": "Request an audit from the managers of the group identified by the id.",
        "operationId": "requestAudit_group_requestaudit",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Audit requested"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/segments": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Reads the segments of the groups",
        "description": "Returns the segments and counts of the groups. Groups will not be returned, but the counts will be filtered with the specified query parameters.",
        "operationId": "segments_group_segments",
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupSegmentedLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.GroupSegmentedLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/export": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Prepares an export of groups in CSV format",
        "description": "Prepares an export of groups using the filtering specified in the query parameters. The URI of the export can be found in the returned Location header. This URI is valid for 2 minutes after being generated.",
        "operationId": "startExport_group_export",
        "parameters": [
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessModifiedSince",
            "in": "query",
            "description": "Search groups by connected, owned or administrated clients, linked systems, webhooks or service accounts that have been modified since the given instance.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "accessProfileAdministration",
            "in": "query",
            "description": "Only return groups that have or have not enabled access profile administration.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "accessQuicksearch",
            "in": "query",
            "description": "Search groups by name of connected, owned or administrated clients, linked systems, webhooks or service accounts.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "applicationAdministration",
            "in": "query",
            "description": "Only return groups that have or have not enabled application administration.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "auditDue",
            "in": "query",
            "description": "Only return groups that are or are not due for a periodic audit.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "auditOverDue",
            "in": "query",
            "description": "Only return groups that are or are not over due for a periodic audit.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "auditRequested",
            "in": "query",
            "description": "Only return groups for which an audit is or is not requested.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "auditedSince",
            "in": "query",
            "description": "Only return groups that have been audited since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "auditingStatus",
            "in": "query",
            "description": "Filter groups on the status of its periodic auditing. These sets are disjunct. A group always has only one status. A group that is over due for auditing will not be returned when only AUDITED is requested.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/group.GroupAuditingStatus"
              }
            }
          },
          {
            "name": "auditsReviewedBy",
            "in": "query",
            "description": "Filter groups for which audits are reviewed by one of the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "authorizedBy",
            "in": "query",
            "description": "Filter groups for which the given groups perform some form of authorization, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "classification",
            "in": "query",
            "description": "Filter groups by classification, specified by id. This parameter supports composition with all parameters from the group classification resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "containsAccount",
            "in": "query",
            "description": "Filter the groups by membership of accounts, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "containsAllAccounts",
            "in": "query",
            "description": "Filter the groups by membership of all accounts, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "containsClient",
            "in": "query",
            "description": "Filter the groups with clients connected, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "delegationGivenTo",
            "in": "query",
            "description": "Filter groups that have delegated management to one of the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "doesNotContainAccount",
            "in": "query",
            "description": "Filter the groups by accounts not being member, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "doesNotContainClient",
            "in": "query",
            "description": "Filter the groups with clients not connected, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupAuditConfig",
            "in": "query",
            "description": "Filter groups by auditing configuration.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasAnyAuthorizingGroupSet",
            "in": "query",
            "description": "Only return groups that have, or do not have, any authorizing group set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasAuditUnderReview",
            "in": "query",
            "description": "Only return groups that have or do not have an audit that is currently under review.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasAuditing",
            "in": "query",
            "description": "Only return groups that have or do not have periodic auditing setup.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasClientPermissions",
            "in": "query",
            "description": "Only return groups that have or do not have given permissions to OAuth2 clients.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasClients",
            "in": "query",
            "description": "Only return groups that have or do not have connected clients.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasMoreThanOneManager",
            "in": "query",
            "description": "Only return groups that have or do not have 2 or more managers.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasSystems",
            "in": "query",
            "description": "Only return groups that have or do not have dynamic provisioning of linked systems.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasVault",
            "in": "query",
            "description": "Only return groups that have or do not have a vault.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasWebhooks",
            "in": "query",
            "description": "Only return groups that have or do not have webhooks on audit records.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "isManager",
            "in": "query",
            "description": "Only return groups for which the given account is manager, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "keyHubAdmin",
            "in": "query",
            "description": "Only return the KeyHub administrator group or all other groups.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "meetsClassificationCriteria",
            "in": "query",
            "description": "Only return groups that do or do not meet the various criteria set in the classification (if any).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/group.GroupClassificationConformance"
              }
            }
          },
          {
            "name": "membershipAuthorizedBy",
            "in": "query",
            "description": "Filter groups for which membership is authorized by one of the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "myGroups",
            "in": "query",
            "description": "Filter my groups for the given accounts, specified by id. This contains the groups the account is member of or for which the account has delegated management privileges.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter groups on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Filter groups on (part of) the name or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameDoesNotStartWith",
            "in": "query",
            "description": "Filter groups with which the name does not start with the given values.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameOrDescriptionContains",
            "in": "query",
            "description": "Filter groups on (part of) the name, description or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameStartsWith",
            "in": "query",
            "description": "Filter groups on the start of the name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nestedGroup",
            "in": "query",
            "description": "Only return groups that are, or are not, nested under another group.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "nestedUnder",
            "in": "query",
            "description": "Only return groups that are nested under the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "notNestedUnder",
            "in": "query",
            "description": "Only return groups that are not nested under the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "notPartOfAccessProfile",
            "in": "query",
            "description": "Filter the groups not part of the given access profiles, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "numberOfAccountsGreaterOrEqual",
            "in": "query",
            "description": "Only return groups that have at least the given number of members.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnit",
            "in": "query",
            "description": "Filter groups on organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "ownsClients",
            "in": "query",
            "description": "Only return groups that own or do not own clients.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "ownsDirectories",
            "in": "query",
            "description": "Only return groups that own or do not own internal directories.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "ownsGroupOnSystems",
            "in": "query",
            "description": "Only return groups that own or do not own groups on linked systems.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "ownsSystems",
            "in": "query",
            "description": "Only return groups that own or do not own provisioned systems.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "partOfAccessProfile",
            "in": "query",
            "description": "Filter the groups part of the given access profiles, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "privateGroup",
            "in": "query",
            "description": "Only return groups that are, or are not, marked as private group.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "provisioningAuthorizedBy",
            "in": "query",
            "description": "Filter groups for which provisioning is authorized by one of the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "rotatingPasswordRequired",
            "in": "query",
            "description": "Only return groups that do, or do not, require a rotating password to activate.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "singleManaged",
            "in": "query",
            "description": "Only return groups that allow or do not allow management by a single manager.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Filter the groups by vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "vaultRecovery",
            "in": "query",
            "description": "Only return groups with the given vault recovery availability.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/group.VaultRecoveryAvailability"
              }
            }
          },
          {
            "name": "vaultRequiresActivation",
            "in": "query",
            "description": "Only return groups for which activation is or is not required when accessing the vault.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "Filter groups on whether they are public or only visible to members. Possible values are ALL (\"return all groups (public and hidden)\"), PUBLIC (\"return only public groups\") and PUBLIC_OR_MEMBER (\"return public groups and hidden groups of which the current subject is a member\"). Default is PUBLIC_OR_MEMBER. This option does not influence permissions, i.e. filtering on ALL can lead to errors if the current subject does not have the correct permissions on one or more groups.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/group.GroupVisibility"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Export prepared"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/account/export": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Prepares an export of groupaccounts in CSV format",
        "description": "Prepares an export of groupaccounts using the filtering on groups specified in the query parameters. The URI of the export can be found in the returned Location header. This URI is valid for 2 minutes after being generated.",
        "operationId": "startGroupAccountExport_group_account_export",
        "parameters": [
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessModifiedSince",
            "in": "query",
            "description": "Search groups by connected, owned or administrated clients, linked systems, webhooks or service accounts that have been modified since the given instance.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "accessProfileAdministration",
            "in": "query",
            "description": "Only return groups that have or have not enabled access profile administration.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "accessQuicksearch",
            "in": "query",
            "description": "Search groups by name of connected, owned or administrated clients, linked systems, webhooks or service accounts.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "applicationAdministration",
            "in": "query",
            "description": "Only return groups that have or have not enabled application administration.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "auditDue",
            "in": "query",
            "description": "Only return groups that are or are not due for a periodic audit.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "auditOverDue",
            "in": "query",
            "description": "Only return groups that are or are not over due for a periodic audit.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "auditRequested",
            "in": "query",
            "description": "Only return groups for which an audit is or is not requested.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "auditedSince",
            "in": "query",
            "description": "Only return groups that have been audited since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "auditingStatus",
            "in": "query",
            "description": "Filter groups on the status of its periodic auditing. These sets are disjunct. A group always has only one status. A group that is over due for auditing will not be returned when only AUDITED is requested.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/group.GroupAuditingStatus"
              }
            }
          },
          {
            "name": "auditsReviewedBy",
            "in": "query",
            "description": "Filter groups for which audits are reviewed by one of the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "authorizedBy",
            "in": "query",
            "description": "Filter groups for which the given groups perform some form of authorization, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "classification",
            "in": "query",
            "description": "Filter groups by classification, specified by id. This parameter supports composition with all parameters from the group classification resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "containsAccount",
            "in": "query",
            "description": "Filter the groups by membership of accounts, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "containsAllAccounts",
            "in": "query",
            "description": "Filter the groups by membership of all accounts, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "containsClient",
            "in": "query",
            "description": "Filter the groups with clients connected, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "delegationGivenTo",
            "in": "query",
            "description": "Filter groups that have delegated management to one of the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "doesNotContainAccount",
            "in": "query",
            "description": "Filter the groups by accounts not being member, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "doesNotContainClient",
            "in": "query",
            "description": "Filter the groups with clients not connected, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupAuditConfig",
            "in": "query",
            "description": "Filter groups by auditing configuration.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasAnyAuthorizingGroupSet",
            "in": "query",
            "description": "Only return groups that have, or do not have, any authorizing group set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasAuditUnderReview",
            "in": "query",
            "description": "Only return groups that have or do not have an audit that is currently under review.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasAuditing",
            "in": "query",
            "description": "Only return groups that have or do not have periodic auditing setup.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasClientPermissions",
            "in": "query",
            "description": "Only return groups that have or do not have given permissions to OAuth2 clients.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasClients",
            "in": "query",
            "description": "Only return groups that have or do not have connected clients.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasMoreThanOneManager",
            "in": "query",
            "description": "Only return groups that have or do not have 2 or more managers.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasSystems",
            "in": "query",
            "description": "Only return groups that have or do not have dynamic provisioning of linked systems.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasVault",
            "in": "query",
            "description": "Only return groups that have or do not have a vault.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasWebhooks",
            "in": "query",
            "description": "Only return groups that have or do not have webhooks on audit records.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "isManager",
            "in": "query",
            "description": "Only return groups for which the given account is manager, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "keyHubAdmin",
            "in": "query",
            "description": "Only return the KeyHub administrator group or all other groups.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "meetsClassificationCriteria",
            "in": "query",
            "description": "Only return groups that do or do not meet the various criteria set in the classification (if any).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/group.GroupClassificationConformance"
              }
            }
          },
          {
            "name": "membershipAuthorizedBy",
            "in": "query",
            "description": "Filter groups for which membership is authorized by one of the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "myGroups",
            "in": "query",
            "description": "Filter my groups for the given accounts, specified by id. This contains the groups the account is member of or for which the account has delegated management privileges.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter groups on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Filter groups on (part of) the name or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameDoesNotStartWith",
            "in": "query",
            "description": "Filter groups with which the name does not start with the given values.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameOrDescriptionContains",
            "in": "query",
            "description": "Filter groups on (part of) the name, description or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameStartsWith",
            "in": "query",
            "description": "Filter groups on the start of the name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nestedGroup",
            "in": "query",
            "description": "Only return groups that are, or are not, nested under another group.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "nestedUnder",
            "in": "query",
            "description": "Only return groups that are nested under the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "notNestedUnder",
            "in": "query",
            "description": "Only return groups that are not nested under the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "notPartOfAccessProfile",
            "in": "query",
            "description": "Filter the groups not part of the given access profiles, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "numberOfAccountsGreaterOrEqual",
            "in": "query",
            "description": "Only return groups that have at least the given number of members.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnit",
            "in": "query",
            "description": "Filter groups on organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "ownsClients",
            "in": "query",
            "description": "Only return groups that own or do not own clients.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "ownsDirectories",
            "in": "query",
            "description": "Only return groups that own or do not own internal directories.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "ownsGroupOnSystems",
            "in": "query",
            "description": "Only return groups that own or do not own groups on linked systems.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "ownsSystems",
            "in": "query",
            "description": "Only return groups that own or do not own provisioned systems.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "partOfAccessProfile",
            "in": "query",
            "description": "Filter the groups part of the given access profiles, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "privateGroup",
            "in": "query",
            "description": "Only return groups that are, or are not, marked as private group.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "provisioningAuthorizedBy",
            "in": "query",
            "description": "Filter groups for which provisioning is authorized by one of the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "rotatingPasswordRequired",
            "in": "query",
            "description": "Only return groups that do, or do not, require a rotating password to activate.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "singleManaged",
            "in": "query",
            "description": "Only return groups that allow or do not allow management by a single manager.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Filter the groups by vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "vaultRecovery",
            "in": "query",
            "description": "Only return groups with the given vault recovery availability.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/group.VaultRecoveryAvailability"
              }
            }
          },
          {
            "name": "vaultRequiresActivation",
            "in": "query",
            "description": "Only return groups for which activation is or is not required when accessing the vault.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "Filter groups on whether they are public or only visible to members. Possible values are ALL (\"return all groups (public and hidden)\"), PUBLIC (\"return only public groups\") and PUBLIC_OR_MEMBER (\"return public groups and hidden groups of which the current subject is a member\"). Default is PUBLIC_OR_MEMBER. This option does not influence permissions, i.e. filtering on ALL can lead to errors if the current subject does not have the correct permissions on one or more groups.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/group.GroupVisibility"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Export prepared"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/vault": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Read a vault with its records",
        "description": "Returns the vault. It is not possible to read the secrets, for this the records need to be read one by one.",
        "operationId": "getVault_group_vault",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.Vault"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.Vault"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "vault"
        ],
        "summary": "Delete a personal vault",
        "description": "Delete the personal vault of the current user.",
        "operationId": "deleteVault_group_vault",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vault removed"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/vault/newpassword": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Returns a random generated password",
        "description": "Returns a random generated password using the given strategy, or the default strategy if none given.",
        "operationId": "newpassword_group_vault_newpassword",
        "parameters": [
          {
            "name": "strategy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/vault/random": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Returns a random generated value",
        "description": "Returns a random generated value of the given length, default 24.",
        "operationId": "random_group_vault_random",
        "parameters": [
          {
            "name": "length",
            "in": "query",
            "schema": {
              "maximum": 1024,
              "type": "integer",
              "format": "int32",
              "default": 24
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.StringValue"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/vault/record": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Query for records in a vault",
        "description": "Query for vault records in a specific vault. The various query parameters can be used to filter the response. It is not possible to access secrets with a query that returns multiple results. Secrets can only be read one by one.",
        "operationId": "list_group_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessibleByAccount",
            "in": "query",
            "description": "Filter records that accessible by the given account(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByAccountAsManager",
            "in": "query",
            "description": "Filter records that accessible by the given account(s) and the account is manager of the group, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByClient",
            "in": "query",
            "description": "Filter records that accessible by the given client(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter the records by account, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter the records by client, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "Filter records on the color.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/vault.VaultRecordColor"
              }
            }
          },
          {
            "name": "expireWarningBeforeOrAt",
            "in": "query",
            "description": "Only return records that show an expiration warning at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "Filter records on the exact filename.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter the records by group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOrganizationalUnit",
            "in": "query",
            "description": "Filter the records by organizational unit of the group, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasNoPolicy",
            "in": "query",
            "description": "Only return records that have or do not have an expiration policy set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasParent",
            "in": "query",
            "description": "Filter records that are shared (have a parent record)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasValidPolicy",
            "in": "query",
            "description": "Only return records that have or do not have expired.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter records on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search records on (part of) the UUID, name, filename, URI or username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Filter records that are shared from the specified parent record, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Filter records by secret using composition. Use secret.type to filter on type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "shareExpiresBeforeOrAt",
            "in": "query",
            "description": "Only return records for which the sharing period has expired at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Filter records on the exact URI.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter records on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter records on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Filter the records by vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Creates one or more new records in a vault",
        "description": "Creates one or more new vault records and returns the newly created records. Secrets are specified via the additional object secret. It is required to specify the 'topicus-Vault-session' header. When updating a TOTP-secret, make sure to set 'writeTotp' field.",
        "operationId": "create_group_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/vault/record/{recordid}": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Read a single record by id",
        "description": "Returns the vault record identified by the id. When the 'secret' additonal object is requested, the 'topicus-Vault-session' header must be specified.",
        "operationId": "get_group_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "vault"
        ],
        "summary": "Update a vault record",
        "description": "Updates the vault record identified by the id. To update the secrets, the 'secret' additional object must be used, in addition to specifying the 'topicus-Vault-session' header. When updating a TOTP-secret, make sure to set 'writeTotp' field.",
        "operationId": "update_group_vault_record",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "deleteTile",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecord"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecord"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "vault"
        ],
        "summary": "Remove a vault record",
        "description": "Removes the vault record identified by the id. This cannot be undone.",
        "operationId": "delete_group_vault_record",
        "parameters": [
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/vault/record/{recordid}/move": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Move, copy or share a vault record",
        "description": "Move, copy or share the vault record specified by the given id to/with a different vault. For this, the 'topicus-Vault-session' header must be set.",
        "operationId": "move_group_vault_record_move",
        "parameters": [
          {
            "name": "recordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.MoveVaultRecord"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.MoveVaultRecord"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Vault record moved/copied/shared"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/vault/record/export": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Prepares an export of vault records in CSV format",
        "description": "Prepares an export of vault records using the filtering specified in the query parameters. The URI of the export can be found in the returned Location header. This URI is valid for 2 minutes after being generated.",
        "operationId": "startExport_group_vault_record_export",
        "parameters": [
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessibleByAccount",
            "in": "query",
            "description": "Filter records that accessible by the given account(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByAccountAsManager",
            "in": "query",
            "description": "Filter records that accessible by the given account(s) and the account is manager of the group, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByClient",
            "in": "query",
            "description": "Filter records that accessible by the given client(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter the records by account, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter the records by client, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "Filter records on the color.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/vault.VaultRecordColor"
              }
            }
          },
          {
            "name": "expireWarningBeforeOrAt",
            "in": "query",
            "description": "Only return records that show an expiration warning at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "Filter records on the exact filename.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter the records by group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOrganizationalUnit",
            "in": "query",
            "description": "Filter the records by organizational unit of the group, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasNoPolicy",
            "in": "query",
            "description": "Only return records that have or do not have an expiration policy set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasParent",
            "in": "query",
            "description": "Filter records that are shared (have a parent record)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasValidPolicy",
            "in": "query",
            "description": "Only return records that have or do not have expired.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter records on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search records on (part of) the UUID, name, filename, URI or username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Filter records that are shared from the specified parent record, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Filter records by secret using composition. Use secret.type to filter on type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "shareExpiresBeforeOrAt",
            "in": "query",
            "description": "Only return records for which the sharing period has expired at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Filter records on the exact URI.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter records on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter records on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Filter the records by vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Export prepared"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/vault/recover": {
      "post": {
        "tags": [
          "vault"
        ],
        "summary": "Recover access to a vault",
        "description": "Recover access to a vault for a given account.",
        "operationId": "recoverSecret_group_vault_recover",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecovery"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/vault.VaultRecovery"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Access recovered"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/group/{groupid}/classification": {
      "put": {
        "tags": [
          "group"
        ],
        "summary": "Update the classification of a group",
        "description": "Update the classification of the group identified by the id.",
        "operationId": "writeClassification_group_classification",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupClassificationUpdate"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.GroupClassificationUpdate"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Classification set"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/identitysource": {
      "get": {
        "tags": [
          "identitysource"
        ],
        "summary": "Query for identity sources in Topicus KeyHub",
        "description": "Query for all identity sources in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_identitysource",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter identity sources on the OAuth2 client used on the SCIM interface. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter identity sources on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search identity sources on (part of) the name or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identitysource.IdentitySourceLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identitysource.IdentitySourceLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "identitysource"
        ],
        "summary": "Creates one or more new identity sources",
        "description": "Creates one or more new identity sources and returns the newly created sources.",
        "operationId": "create_identitysource",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identitysource.IdentitySourceLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identitysource.IdentitySourceLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identitysource.IdentitySourceLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identitysource.IdentitySourceLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/identitysource/{identitysourceid}": {
      "get": {
        "tags": [
          "identitysource"
        ],
        "summary": "Read a single identity source by id",
        "description": "Returns the identity source identified by the id.",
        "operationId": "get_identitysource",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "identitysourceid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identitysource.IdentitySource"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identitysource.IdentitySource"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "identitysource"
        ],
        "summary": "Update an identity source",
        "description": "Updates the identity source identified by the id.",
        "operationId": "update_identitysource",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "identitysourceid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identitysource.IdentitySource"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/identitysource.IdentitySource"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identitysource.IdentitySource"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/identitysource.IdentitySource"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "identitysource"
        ],
        "summary": "Delete an identity source",
        "description": "Permanently removes the identity source identified by the id. This cannot be undone.",
        "operationId": "delete_identitysource",
        "parameters": [
          {
            "name": "identitysourceid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/identitysource/{identitysourceid}/sync": {
      "post": {
        "tags": [
          "identitysource"
        ],
        "summary": "Trigger a full synchronization of an identity source",
        "description": "Perform a full synchronization of the identity source specified by the given id. The synchronization runs in the background.",
        "operationId": "sync_identitysource_sync",
        "parameters": [
          {
            "name": "identitysourceid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Synchronization started"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/info": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Get information about Topicus KeyHub",
        "description": "Returns information about Topicus KeyHub: the version and the supported API versions.",
        "operationId": "getInfo_info",
        "responses": {
          "200": {
            "description": "Version info",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.VersionInfo"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/simple.VersionInfo"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/launchpadtile": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Query for launchpad tiles",
        "description": "Queries over all launchpad tiles. The various query parameters can be used to filter the response.",
        "operationId": "list_launchpadtile",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "application",
            "in": "query",
            "description": "Filter tiles on the given clients, specified by id. Only returns SSO tiles. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter tiles on the given groups, specified by id. Only returns manual tiles. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Filter the tiles by exact match of the title. Only returns manual tiles.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vaultRecord",
            "in": "query",
            "description": "Filter tiles on the given vault records, specified by id. Only returns vault record tiles. This parameter supports composition with all parameters from the vault record resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/launchpad.LaunchpadTileLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/launchpad.LaunchpadTileLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Creates one or more new launchpad tiles",
        "description": "Creates one or more new launchpad tiles and returns the newly created tiles.",
        "operationId": "create_launchpadtile",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/launchpad.LaunchpadTileLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/launchpad.LaunchpadTileLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/launchpad.LaunchpadTileLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/launchpad.LaunchpadTileLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/launchpadtile/{launchpadtileid}": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Read a single launchpad tile",
        "description": "Returns the single launchpad tile.",
        "operationId": "get_launchpadtile",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "launchpadtileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/launchpad.LaunchpadTile"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/launchpad.LaunchpadTile"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Update a launchpad tile",
        "description": "Updates the launchpad tile identified by the id.",
        "operationId": "update_launchpadtile",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "launchpadtileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/launchpad.LaunchpadTile"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/launchpad.LaunchpadTile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/launchpad.LaunchpadTile"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/launchpad.LaunchpadTile"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Remove a launchpad tile",
        "description": "Removes the specified launchpad tile.",
        "operationId": "delete_launchpadtile",
        "parameters": [
          {
            "name": "launchpadtileid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/launchpadtile/display": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Query tiles for display on the launchpad",
        "description": "Query tiles for display on the launchpad. This returns a normalized view over the tiles, per group. A single tile can be returned multiple times if access is given via multiple groups.",
        "operationId": "display_launchpadtile_display",
        "parameters": [
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "The tiles",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/launchpad.DisplayedLaunchpadTiles"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/launchpad.DisplayedLaunchpadTiles"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/request/{requestid}/cancel": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Cancel request",
        "description": "Cancel a modification request.",
        "operationId": "cancel_request_cancel",
        "parameters": [
          {
            "name": "requestid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request canceled"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/request": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Query for modification requests",
        "description": "Queries over all modification requests. The various query parameters can be used to filter the response.",
        "operationId": "list_request",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "acceptParams",
                  "audit",
                  "resetStatus"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessProfile",
            "in": "query",
            "description": "Filter requests on the given access profiles, specified by id. This parameter supports composition with all parameters from the access profile unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accountToUpdate",
            "in": "query",
            "description": "Only return UpdateGroupMembershipRequest for the given account(s), specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "adminToRevoke",
            "in": "query",
            "description": "Only return RevokeAdminRequest for the given account(s), specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "application",
            "in": "query",
            "description": "Filter requests on the given applications, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "authorizationType",
            "in": "query",
            "description": "Only return SetupAuthorizingGroupRequest for the given type of authorization.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/request.AuthorizingGroupType"
              }
            }
          },
          {
            "name": "authorizingGroupType",
            "in": "query",
            "description": "Only return SetupAuthorizingGroupRequest(s) for the given authorization type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/request.AuthorizingGroupType"
              }
            }
          },
          {
            "name": "clientPermission",
            "in": "query",
            "description": "Only return GrantClientPermissionRequest for the given permission type(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/client.OAuth2ClientPermissionType"
              }
            }
          },
          {
            "name": "connectAuthorization",
            "in": "query",
            "description": "Only return SetupAuthorizingGroupRequest(s) that either connect or disconnect additional authorization.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "directory",
            "in": "query",
            "description": "Only return requests for the given directory(ies), specified by id. This parameter supports composition with all parameters from the directory resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "grantGroupOnSystemRequestActivationRequired",
            "in": "query",
            "description": "Only return GrantGroupOnSystemRequest(s) that either have activation required enabled or disabled.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "grantGroupOnSystemRequestRequestActivationRequired",
            "in": "query",
            "description": "Only return GrantGroupOnSystemRequestRequest(s) that either have activation required enabled or disabled.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter requests on the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOnSystem",
            "in": "query",
            "description": "Filter requests on the given group on system, specified by id. This parameter supports composition with all parameters from the group on system resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupsOverlapWith",
            "in": "query",
            "description": "Filter requests for multiple groups if they contain any of the given groups.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "internalAccount",
            "in": "query",
            "description": "Only return VerifyInternalAccountRequest for the given internal account(s), specified by id. This parameter supports composition with all parameters from the internal account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "mailKey",
            "in": "query",
            "description": "Filter requests on the exact mail keys.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "newAdmin",
            "in": "query",
            "description": "Only return AddGroupAdminRequest for the given account(s), specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "newGroupName",
            "in": "query",
            "description": "Only return CreateGroupRequest with an exact match on the group name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "newGroupOnSystemName",
            "in": "query",
            "description": "Only return CreateGroupOnSystemRequest with an exact match on the name in system.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "newNamespaceName",
            "in": "query",
            "description": "Only return CreateProvisionedNamespaceRequest with an exact match on the namespace name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "newServiceAccountName",
            "in": "query",
            "description": "Only return CreateServiceAccountRequest with an exact match on the username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "organizationalUnit",
            "in": "query",
            "description": "Filter requests on the given organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "ownerGroup",
            "in": "query",
            "description": "Only return CreateGroupOnSystemRequest with the given owner group(s), specified by id. This parameter supports composition with all parameters from the grouop resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "precededBy",
            "in": "query",
            "description": "Only return requests that were preceded by the given request(s), specified by id. This parameter supports composition with all parameters from the request resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "processedBy",
            "in": "query",
            "description": "Only return modification requests that can be processed by the given account, specified by id. This includes requests requested by the given account that are not yet processed or have been declined in the past 2 days.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "requestedBy",
            "in": "query",
            "description": "Only return requests requested by the given account(s), specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "requestingGroup",
            "in": "query",
            "description": "Only return requests that are requested for the given groups, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "serviceAccount",
            "in": "query",
            "description": "Filter requests on the given service accounts, specified by id. This parameter supports composition with all parameters from the service account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter requests on the given status(es).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/request.ModificationRequestStatus"
              }
            }
          },
          {
            "name": "system",
            "in": "query",
            "description": "Filter requests on the given systems, specified by id. This parameter supports composition with all parameters from the system resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "triggeredFollowUpRequest",
            "in": "query",
            "description": "Only return requests that did or did not trigger a follow up request.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Only return requests of the given type(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "updateGroupMembershipType",
            "in": "query",
            "description": "Only return UpdateGroupMembershipRequest(s) of the given update type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/request.UpdateGroupMembershipType"
              }
            }
          },
          {
            "name": "wasProcessedBy",
            "in": "query",
            "description": "Only return requests the were processed by the given account(s), specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/request.ModificationRequestLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/request.ModificationRequestLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Creates one or more new modification requests",
        "description": "Creates one or more new modification requests and returns the newly created requests.",
        "operationId": "create_request",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "acceptParams",
                  "audit",
                  "resetStatus"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/request.ModificationRequestLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/request.ModificationRequestLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/request.ModificationRequestLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/request.ModificationRequestLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/request/{requestid}": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Read a single modification request",
        "description": "Returns the single modification request.",
        "operationId": "get_request",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "acceptParams",
                  "audit",
                  "resetStatus"
                ]
              }
            }
          },
          {
            "name": "requestid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/request.ModificationRequest"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/request.ModificationRequest"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Update a modification request",
        "description": "Updates the modification request identified by the id. Only the status and feedback can be updated and only when the request currently has status 'REQUESTED'.",
        "operationId": "update_request",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "acceptParams",
                  "audit",
                  "resetStatus"
                ]
              }
            }
          },
          {
            "name": "requestid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/request.ModificationRequest"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/request.ModificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/request.ModificationRequest"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/request.ModificationRequest"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/request/report": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "operationId": "report_request_report",
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/request.ModificationRequest"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/request.ModificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/request.ModificationRequestReport"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/request.ModificationRequestReport"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/organizationalunit/{organizationalunitid}/account": {
      "get": {
        "tags": [
          "account",
          "miscellaneous"
        ],
        "summary": "Query for accounts member of an organizational unit",
        "description": "Queries over accounts that are member of the organizational unit. The various query parameters can be used to filter the response.",
        "operationId": "list_organizationalunit_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter the organizational units-accounts by accounts, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accountDirectoryOwnedBy",
            "in": "query",
            "description": "Filter the organizational units-accounts by groups owning the internal directory of the accounts, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnit",
            "in": "query",
            "description": "Filter the organizational units-accounts by organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnitOwnedBy",
            "in": "query",
            "description": "Filter the organizational units-accounts by groups owning the organizational unit, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "organizationalunitid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitAccountLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitAccountLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "account",
          "miscellaneous"
        ],
        "summary": "Add one or more accounts to the organizational unit",
        "description": "Adds one or more accounts to the organizational unit and returns the newly created memberships.",
        "operationId": "create_organizationalunit_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "organizationalunitid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/organization.OrganizationalUnitAccountLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/organization.OrganizationalUnitAccountLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitAccountLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitAccountLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/organizationalunit/{organizationalunitid}/account/{accountid}": {
      "get": {
        "tags": [
          "account",
          "miscellaneous"
        ],
        "summary": "Read a single account member of an organizational unit",
        "description": "Returns the single account member of the organizational unit.",
        "operationId": "get_organizationalunit_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "organizationalunitid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitAccount"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitAccount"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "account",
          "miscellaneous"
        ],
        "summary": "Remove an account from an organizational unit",
        "description": "Removes the specified account from the organizational unit.",
        "operationId": "delete_organizationalunit_account",
        "parameters": [
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "organizationalunitid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/organizationalunit/{organizationalunitid}/client": {
      "get": {
        "tags": [
          "account",
          "miscellaneous"
        ],
        "summary": "Query for client applications member of an organizational unit",
        "description": "Queries over client applications that are member of the organizational unit. The various query parameters can be used to filter the response.",
        "operationId": "list_organizationalunit_client",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter the organizational unit-client links by the client application, specified by id. This parameter supports composition with all parameters from the client application resource",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnit",
            "in": "query",
            "description": "Filter the organizational unit-client links by the organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnitOwnedBy",
            "in": "query",
            "description": "Filter the organizational units-clients by groups owning the organizational unit, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "withPermissionForOwningGroup",
            "in": "query",
            "description": "Filter the clients for the permissions with permissions for the given groups, either directly or via provisionedsystem ownership, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "withRequestedPermissionForOwningGroup",
            "in": "query",
            "description": "Filter the clients for the permissions with active requests for permissions for the given groups, either directly or via provisionedsystem ownership, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "organizationalunitid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitClientApplicationLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitClientApplicationLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "account",
          "miscellaneous"
        ],
        "summary": "Add one or more client applications to the organizational unit",
        "description": "Adds one or more client applications to the organizational unit and returns the newly created memberships.",
        "operationId": "create_organizationalunit_client",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "organizationalunitid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/organization.OrganizationalUnitClientApplicationLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/organization.OrganizationalUnitClientApplicationLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitClientApplicationLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitClientApplicationLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/organizationalunit/{organizationalunitid}/client/{clientid}": {
      "get": {
        "tags": [
          "account",
          "miscellaneous"
        ],
        "summary": "Read a single client application member of an organizational unit",
        "description": "Returns the single client application member of the organizational unit.",
        "operationId": "get_organizationalunit_client",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "organizationalunitid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitClientApplication"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitClientApplication"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "account",
          "miscellaneous"
        ],
        "summary": "Remove an client application from an organizational unit",
        "description": "Removes the specified client application from the organizational unit.",
        "operationId": "delete_organizationalunit_client",
        "parameters": [
          {
            "name": "clientid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "organizationalunitid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/organizationalunit": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Query for organizational units in Topicus KeyHub",
        "description": "Query for all organizational units in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_organizationalunit",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "createAsParentOf",
                  "settings"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accountIsAuditor",
            "in": "query",
            "description": "Filter the organizational units for which the given account is auditor, either directly or inherited from one of the parent units, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "ancestorOfOrEqualTo",
            "in": "query",
            "description": "Only return the organizational units that are equal to or an ancestor of the given unit(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "auditorGroup",
            "in": "query",
            "description": "Filter the organizational units for which the given group is auditor group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "connectedToAccount",
            "in": "query",
            "description": "Filter the organizational units by accounts, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "createGroupApproveGroup",
            "in": "query",
            "description": "Filter the organizational units for which the given group is create group approve group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "descendantOfOrEqualTo",
            "in": "query",
            "description": "Only return the organizational units that are equal to or a descendant of the given unit(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "enableTechAdminApproveGroup",
            "in": "query",
            "description": "Filter the organizational units for which the given group is enable tech admin approve group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter organizational units on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Filter organizational units on (part of) the name or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ownedBy",
            "in": "query",
            "description": "Filter the organizational units for which the given group is owner, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Filter the organizational units by parent, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "recoveryFallbackGroup",
            "in": "query",
            "description": "Filter the organizational units for which the given group is recovery fallback group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "removeGroupApproveGroup",
            "in": "query",
            "description": "Filter the organizational units for which the given group is remove group approve group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "root",
            "in": "query",
            "description": "Only return organizational units that are or are not the root of the organizational tree.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Creates one or more new organizational units",
        "description": "Creates one or more new organizational units and returns the newly created units.",
        "operationId": "create_organizationalunit",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "createAsParentOf",
                  "settings"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/organization.OrganizationalUnitLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/organization.OrganizationalUnitLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/organizationalunit/{organizationalunitid}": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Read a single organizational unit by id",
        "description": "Returns the organizational unit identified by the id.",
        "operationId": "get_organizationalunit",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "createAsParentOf",
                  "settings"
                ]
              }
            }
          },
          {
            "name": "organizationalunitid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnit"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnit"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Update a organizational unit",
        "description": "Updates the organizational unit identified by the id.",
        "operationId": "update_organizationalunit",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "createAsParentOf",
                  "settings"
                ]
              }
            }
          },
          {
            "name": "organizationalunitid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/organization.OrganizationalUnit"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/organization.OrganizationalUnit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnit"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnit"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/numberseq": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Query for provision number sequences in Topicus KeyHub",
        "description": "Query for all provision number sequences in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_numberseq",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "systems"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter number sequences on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionNumberSequenceLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionNumberSequenceLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "provisioning"
        ],
        "summary": "Creates one or more new provision number sequences",
        "description": "Creates one or more new provision number sequences and returns the newly created sequences.",
        "operationId": "create_numberseq",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "systems"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/provisioning.ProvisionNumberSequenceLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/provisioning.ProvisionNumberSequenceLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionNumberSequenceLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionNumberSequenceLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/numberseq/{numberseqid}": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Read a single provision number sequence by id",
        "description": "Returns the provision number sequence identified by the id.",
        "operationId": "get_numberseq",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "systems"
                ]
              }
            }
          },
          {
            "name": "numberseqid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionNumberSequence"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionNumberSequence"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "provisioning"
        ],
        "summary": "Update a provision number sequence",
        "description": "Updates the provision number sequence identified by the id.",
        "operationId": "update_numberseq",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "systems"
                ]
              }
            }
          },
          {
            "name": "numberseqid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/provisioning.ProvisionNumberSequence"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/provisioning.ProvisionNumberSequence"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionNumberSequence"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionNumberSequence"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "provisioning"
        ],
        "summary": "Delete a provision number sequence from Topicus KeyHub",
        "description": "Permanently removes the provision number sequence. This cannot be undone.",
        "operationId": "delete_numberseq",
        "parameters": [
          {
            "name": "numberseqid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/system/{systemid}/account/{accountid}": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Read a single provisioned account by id",
        "description": "Returns the provisioned account identified by the id.",
        "operationId": "get_system_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "accountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "systemid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionedAccount"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionedAccount"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/system/{systemid}/account": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Query for provisioned accounts in a system",
        "description": "Query for provisioned accounts in a system. The various query parameters can be used to filter the response.",
        "operationId": "list_system_account",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Only return provisioned accounts for the given accounts, specified by id. This parameter supports composition with all parameters from the accounts resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Only return provisioned accounts with the given statusses.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PProvisionedAccountStatus"
              }
            }
          },
          {
            "name": "system",
            "in": "query",
            "description": "Only return provisioned accounts for one of the given systems, specified by id. This parameter supports composition with all parameters from the systems resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "systemid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionedAccountLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionedAccountLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/system": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Query for provisioned systems in Topicus KeyHub",
        "description": "Query for all provisioned systems in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_system",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "account",
                  "audit",
                  "issuedPermissions",
                  "loginName",
                  "managementPermissions",
                  "markers",
                  "statistics",
                  "supportedGroupTypes"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessProfileProvisioning",
            "in": "query",
            "description": "Filter the systems by access profile provisioning which reference a group on the returned systems, specified by id. This parameter supports composition with all parameters from the access profile provisioning resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessprofile",
            "in": "query",
            "description": "Filter the systems by access profiles which reference a group on the returned systems, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter the systems by provisioned accounts, specified by id. This parameter supports composition with all parameters from the provisioned account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accountsWritable",
            "in": "query",
            "description": "Only return source directory provisioning systems for which accounts are writable.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Only return active or inactive systems.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BooleanEnum"
              }
            }
          },
          {
            "name": "contentAdministrator",
            "in": "query",
            "description": "Filter the systems on groups that perform content administration for them, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "expiredCertificate",
            "in": "query",
            "description": "Only return systems for which one of the certificates used is expired at the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "externalUuid",
            "in": "query",
            "description": "Filter the systems on one or more UUIDs as read from the system.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "forAzureOIDCDirectory",
            "in": "query",
            "description": "Filter systems on the Azure OIDC directory for which it is a provisioned source directory, specified by id. This parameter supports composition with all parameters from the directory resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "forBaseSystem",
            "in": "query",
            "description": "Filter provisioned namespaces on their base system, specified by id. This parameter supports composition with all parameters from the provisioned system resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "forClient",
            "in": "query",
            "description": "Filter systems on the clients for which it is an internal provisioned LDAP, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "forLDAPDirectory",
            "in": "query",
            "description": "Filter systems on the LDAP directory for which it is a provisioned source directory, specified by id. This parameter supports composition with all parameters from the directory resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter the systems by groups for which a provisioning group references a group on the returned systems, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupDN",
            "in": "query",
            "description": "Filter systems on the specified groupDN, for those system types that have such a property.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupOnSystem",
            "in": "query",
            "description": "Filter systems on the groups on a system, specified by id. This parameter supports composition with all parameters from the group on system resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter systems on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search systems on (part of) the name or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameDoesNotStartWith",
            "in": "query",
            "description": "Only return systems for which the name does not start with the given prefix.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameStartsWith",
            "in": "query",
            "description": "Only return systems for which the name starts with the given prefix.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "notInGroup",
            "in": "query",
            "description": "Filter the systems on not having a provisioning group for a group on system on the returned systems, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "numbering",
            "in": "query",
            "description": "Filter provisioned LDAPs on the numbering used (uid or gid), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnit",
            "in": "query",
            "description": "Filter systems on organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnitForEnforcement",
            "in": "query",
            "description": "Filter systems on organizational units, specified by id. This parameter is automatically set and primarily used for security permission enforcement.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "ownedBy",
            "in": "query",
            "description": "Filter the systems for which the given group is owner, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "provisioningGroup",
            "in": "query",
            "description": "Filter the systems by provisioning groups which reference a group on the returned systems, specified by id. This parameter supports composition with all parameters from the provisioning group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "selfServiceExistingGroups",
            "in": "query",
            "description": "Only return systems for which self-service for existing groups on system is enabled.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "selfServiceNewGroups",
            "in": "query",
            "description": "Only return systems for which self-service for new groups on system is enabled.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "selfServiceServiceAccounts",
            "in": "query",
            "description": "Only return systems for which self-service for service accounts is enabled.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "serviceAccountDN",
            "in": "query",
            "description": "Filter systems on the specified serviceAccountDN, for those system types that have such a property.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "technicalAdministrator",
            "in": "query",
            "description": "Filter the systems on groups that perform technical administration for them, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "tls",
            "in": "query",
            "description": "Filter the systems on the TLS setting used.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TLSLevel"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Only return systems of the given type(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionedSystemLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionedSystemLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "provisioning"
        ],
        "summary": "Creates one or more new provisioned systems",
        "description": "Creates one or more new provisioned systems and returns the newly created systems.",
        "operationId": "create_system",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "account",
                  "audit",
                  "issuedPermissions",
                  "loginName",
                  "managementPermissions",
                  "markers",
                  "statistics",
                  "supportedGroupTypes"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/provisioning.ProvisionedSystemLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/provisioning.ProvisionedSystemLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionedSystemLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionedSystemLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/system/{systemid}/deactivate": {
      "post": {
        "tags": [
          "provisioning"
        ],
        "summary": "Deactivate a provisioned system",
        "description": "Deactivates the provisioned system specified by the given id. The action runs in the background.",
        "operationId": "deactivate_system_deactivate",
        "parameters": [
          {
            "name": "systemid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "action",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/provisioning.DeprovisionAction"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "System deactivated"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/system/{systemid}": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Read a single provisioned system by id",
        "description": "Returns the provisioned system identified by the id.",
        "operationId": "get_system",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "account",
                  "audit",
                  "issuedPermissions",
                  "loginName",
                  "managementPermissions",
                  "markers",
                  "statistics",
                  "supportedGroupTypes"
                ]
              }
            }
          },
          {
            "name": "systemid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "provisioning"
        ],
        "summary": "Update a provisioned system",
        "description": "Updates the provisioned system identified by the id.",
        "operationId": "update_system",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "account",
                  "audit",
                  "issuedPermissions",
                  "loginName",
                  "managementPermissions",
                  "markers",
                  "statistics",
                  "supportedGroupTypes"
                ]
              }
            }
          },
          {
            "name": "systemid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/system/{systemid}/group": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Query for groups on systems in Topicus KeyHub",
        "description": "Query for all groups on systems within a provisioned system in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_system_group",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accessProfileProvisioning",
                  "audit",
                  "provgroups",
                  "serviceAccounts"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessProfile",
            "in": "query",
            "description": "Only return groups on system that have an access profile provisioning link with one of the given access profiles, specified by id. This parameter supports composition with all parameters from the access profile resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "adminnedBy",
            "in": "query",
            "description": "Filter the groups on system on groups that perform technical administration for the systems they belong to, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "contentAdminnedBy",
            "in": "query",
            "description": "Filter the groups on system on groups that perform content administration for the systems they belong to, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Only return groups on system that have a provisioning group with one of the given groups, specified by id. This parameter supports composition with all parameters from the groups resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search groups on (part of) the display name or the name in system.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameInSystem",
            "in": "query",
            "description": "Filter groups on system on the exact name in system.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "notLinkedToGroup",
            "in": "query",
            "description": "Only return groups on system that do not have a provisioning group with one of the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "notLinkedToServiceAccount",
            "in": "query",
            "description": "Only return groups on system that do are not linked to the given service account, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnit",
            "in": "query",
            "description": "Filter groups-on-system on organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnitForEnforcement",
            "in": "query",
            "description": "Filter groups-on-system on organizational units, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "ownedBy",
            "in": "query",
            "description": "Filter the groups on system on groups that are owner for them, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "system",
            "in": "query",
            "description": "Only return groups that are the on one of the given systems, specified by id. This parameter supports composition with all parameters from the systems resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemForEnforcement",
            "in": "query",
            "description": "Constrain groups-on-system on the system the current user is content admin or owner of, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemOwnedBy",
            "in": "query",
            "description": "Filter the groups on system on groups that own the systems they belong to, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "tier2OwnedBy",
            "in": "query",
            "description": "Filter the groups on system on groups that are tier 2 owner for them, specified by id. A tier 2 owner is an owner of a group on system that is linked to a service account this group on system is also linked to.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter groups on system on the type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/provisioning.GroupOnSystemType"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "systemid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.GroupOnSystemLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.GroupOnSystemLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "provisioning"
        ],
        "summary": "Creates one or more new groups on systems",
        "description": "Creates one or more new groups on systems and returns the newly created groups on systems. The groups will also be provisioned to the targeted provisioned system. By default, for every group on system, a provisioning group will be created granting the owner access to the newly created group. It is also possible to specify the provisioning groups to be created via the 'provgroups' addionalObjects property.",
        "operationId": "create_system_group",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accessProfileProvisioning",
                  "audit",
                  "provgroups",
                  "serviceAccounts"
                ]
              }
            }
          },
          {
            "name": "systemid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/provisioning.GroupOnSystemLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/provisioning.GroupOnSystemLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.GroupOnSystemLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.GroupOnSystemLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/system/{systemid}/group/{groupid}": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Read a single group on system by id",
        "description": "Returns the group on system identified by the id.",
        "operationId": "get_system_group",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accessProfileProvisioning",
                  "audit",
                  "provgroups",
                  "serviceAccounts"
                ]
              }
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "systemid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.GroupOnSystem"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.GroupOnSystem"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "provisioning"
        ],
        "summary": "Update a group on system",
        "description": "Updates the group on system identified by the id.",
        "operationId": "update_system_group",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "accessProfileProvisioning",
                  "audit",
                  "provgroups",
                  "serviceAccounts"
                ]
              }
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "systemid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/provisioning.GroupOnSystem"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/provisioning.GroupOnSystem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.GroupOnSystem"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/provisioning.GroupOnSystem"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "provisioning"
        ],
        "summary": "Delete a group on system",
        "description": "Deletes the group on system identified by the id. If 'system=true' is passed as query parameter, the group is also removed from the system.",
        "operationId": "delete_system_group",
        "parameters": [
          {
            "name": "system",
            "in": "query",
            "description": "When false, the group will not be removed from the system.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "systemid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/system/{systemid}/sync": {
      "post": {
        "tags": [
          "provisioning"
        ],
        "summary": "Synchronize a provisioned system",
        "description": "Perform a full synchronization of the provisioned system specified by the given id. The synchronization runs in the background.",
        "operationId": "sync_system_sync",
        "parameters": [
          {
            "name": "systemid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Synchronization started"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/provisioninggroup/{provisioninggroupid}": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Read a single provisioning group by id",
        "description": "Returns the provisioning group identified by the id.",
        "operationId": "get_provisioninggroup",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "provisioninggroupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.ProvisioningGroup"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.ProvisioningGroup"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "provisioning"
        ],
        "summary": "Update a provisioning group",
        "description": "Updates the provisioning group identified by the id.",
        "operationId": "update_provisioninggroup",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "provisioninggroupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.ProvisioningGroup"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/group.ProvisioningGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.ProvisioningGroup"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.ProvisioningGroup"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "provisioning"
        ],
        "summary": "Deletes a provisioning group",
        "description": "Deletes the provisioning group identified by the id.",
        "operationId": "delete_provisioninggroup",
        "parameters": [
          {
            "name": "provisioninggroupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/provisioninggroup": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Query for provisioning groups in Topicus KeyHub",
        "description": "Query for all provisioning groups in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_provisioninggroup",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "activationRequired",
            "in": "query",
            "description": "Only return provisioning groups that do or do not require activation.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Only return provisioning groups for one of the given groups, specified by id. This parameter supports composition with all parameters from the groups resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOnSystem",
            "in": "query",
            "description": "Only return provisioning groups for one of the given groups on system, specified by id. This parameter supports composition with all parameters from the groups on system resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOnSystemOwnerGroup",
            "in": "query",
            "description": "Only return provisioning groups for which one of the given groups is the owner of its group on system, specified by id. This parameter supports composition with all parameters from the groups resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organizationalUnitForEnforcement",
            "in": "query",
            "description": "Filter provisioning groups on organizational units of the group on system, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "system",
            "in": "query",
            "description": "Only return provisioning groups that are provisionined the on one of the given systems, specified by id. This parameter supports composition with all parameters from the systems resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemAdminGroup",
            "in": "query",
            "description": "Only return provisioning groups for which one of the given groups is technical administrator for its group on system, specified by id. This parameter supports composition with all parameters from the groups resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemContentAdminGroup",
            "in": "query",
            "description": "Only return provisioning groups for which one of the given groups is content administrator for its group on system, specified by id. This parameter supports composition with all parameters from the groups resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemOwnerGroup",
            "in": "query",
            "description": "Only return provisioning groups for which one of the given groups is the owner of its provisioned system, specified by id. This parameter supports composition with all parameters from the groups resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.ProvisioningGroupLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/group.ProvisioningGroupLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/serviceaccount": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Query for service accounts in Topicus KeyHub",
        "description": "Query for all service accounts in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_serviceaccount",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "groups",
                  "secret",
                  "supportedFeatures"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Only return active or inactive service accounts.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BooleanEnum"
              }
            }
          },
          {
            "name": "groupOnSystem",
            "in": "query",
            "description": "Filter the service accounts by groups on systems, specified by id. This parameter supports composition with all parameters from the group on system resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOnSystemOwners",
            "in": "query",
            "description": "Filter the service accounts on group on systems owned by any of the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter service accounts on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search service accounts on (part of) the name, username or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameDoesNotStartWith",
            "in": "query",
            "description": "Only return service accounts for which the name does not start with the given prefix.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameStartsWith",
            "in": "query",
            "description": "Only return service accounts for which the name starts with the given prefix.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "organizationalUnitForEnforcement",
            "in": "query",
            "description": "Filter service accounts on their organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Filter the service accounts by the password shared in the vault, specified by id. This parameter supports composition with all parameters from the vault record resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "passwordRotation",
            "in": "query",
            "description": "Only return service accounts with the given password rotation scheme.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/serviceaccount.PasswordRotationScheme"
              }
            }
          },
          {
            "name": "requestedGroupOnSystemOwners",
            "in": "query",
            "description": "Filter the service accounts on active requests for group on systems owned by any of the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "system",
            "in": "query",
            "description": "Filter the service accounts by provisioned systems, specified by id. This parameter supports composition with all parameters from the provisioned system resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemContentAdministrators",
            "in": "query",
            "description": "Filter the service accounts on the content administration group of a provisioned system, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemOwners",
            "in": "query",
            "description": "Filter the service accounts on the owning group of its provisioned system, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemTechnicalAdministrators",
            "in": "query",
            "description": "Filter the service accounts on the technical administrator group of its provisioned system, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "technicalAdministrator",
            "in": "query",
            "description": "Filter the service accounts on groups that perform technical administration for them, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter service accounts on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/serviceaccount.ServiceAccountLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/serviceaccount.ServiceAccountLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "provisioning"
        ],
        "summary": "Create one or more service accounts",
        "description": "Creates one or more new service accounts and returns the newly created service accounts.",
        "operationId": "create_serviceaccount",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "groups",
                  "secret",
                  "supportedFeatures"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/serviceaccount.ServiceAccountLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/serviceaccount.ServiceAccountLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/serviceaccount.ServiceAccountLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/serviceaccount.ServiceAccountLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/serviceaccount/{serviceaccountid}/deactivate": {
      "post": {
        "tags": [
          "provisioning"
        ],
        "summary": "Deactivates the service account",
        "description": "Deactivates the service account. ",
        "operationId": "deactivate_serviceaccount_deactivate",
        "parameters": [
          {
            "name": "serviceaccountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Service account deactivated"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/serviceaccount/{serviceaccountid}": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Read a single service account by id",
        "description": "Returns the service account identified by the id.",
        "operationId": "get_serviceaccount",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "groups",
                  "secret",
                  "supportedFeatures"
                ]
              }
            }
          },
          {
            "name": "serviceaccountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/serviceaccount.ServiceAccount"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/serviceaccount.ServiceAccount"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "provisioning"
        ],
        "summary": "Update a service account",
        "description": "Updates the service account identified by the id.",
        "operationId": "update_serviceaccount",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit",
                  "groups",
                  "secret",
                  "supportedFeatures"
                ]
              }
            }
          },
          {
            "name": "serviceaccountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/serviceaccount.ServiceAccount"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/serviceaccount.ServiceAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/serviceaccount.ServiceAccount"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/serviceaccount.ServiceAccount"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "provisioning"
        ],
        "operationId": "delete_serviceaccount",
        "parameters": [
          {
            "name": "serviceaccountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/serviceaccount/auditstats": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Reads various service account based counts and statistics",
        "description": "Returns the counts and statistics of service accounts within Topicus KeyHub.",
        "operationId": "getAuditStats_serviceaccount_auditstats",
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/serviceaccount.ServiceAccountsAuditStats"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/serviceaccount.ServiceAccountsAuditStats"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/serviceaccount/{serviceaccountid}/group/{groupid}": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Read a single group for a service account by id",
        "description": "Returns the group for a service account identified by the id.",
        "operationId": "get_serviceaccount_group",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "serviceaccountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/serviceaccount.ServiceAccountGroup"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/serviceaccount.ServiceAccountGroup"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "provisioning"
        ],
        "summary": "Delete a group for a service account",
        "description": "Deletes the group for a service account identified by the id.",
        "operationId": "delete_serviceaccount_group",
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "serviceaccountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/serviceaccount/{serviceaccountid}/group": {
      "get": {
        "tags": [
          "provisioning"
        ],
        "summary": "Query for groups for a service account in Topicus KeyHub",
        "description": "Query for all groups for a service system in Topicus KeyHub. The various query parameters can be used to filter the response.",
        "operationId": "list_serviceaccount_group",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "groupOnSystem",
            "in": "query",
            "description": "Filter the service account groups on the groups on systems, specified by id. This parameter supports composition with all parameters from the groups on system resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "serviceAccount",
            "in": "query",
            "description": "Filter the service account groups on the service accounts, specified by id. This parameter supports composition with all parameters from the service account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "serviceaccountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/serviceaccount.ServiceAccountGroupLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/serviceaccount.ServiceAccountGroupLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/serviceaccount/export": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Prepares an export of service accounts in CSV format",
        "description": "Prepares an export of service accounts using the filtering specified in the query parameters. The URI of the export can be found in the returned Location header. This URI is valid for 2 minutes after being generated.",
        "operationId": "startExport_serviceaccount_export",
        "parameters": [
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Only return active or inactive service accounts.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BooleanEnum"
              }
            }
          },
          {
            "name": "groupOnSystem",
            "in": "query",
            "description": "Filter the service accounts by groups on systems, specified by id. This parameter supports composition with all parameters from the group on system resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOnSystemOwners",
            "in": "query",
            "description": "Filter the service accounts on group on systems owned by any of the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter service accounts on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search service accounts on (part of) the name, username or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameDoesNotStartWith",
            "in": "query",
            "description": "Only return service accounts for which the name does not start with the given prefix.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameStartsWith",
            "in": "query",
            "description": "Only return service accounts for which the name starts with the given prefix.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "organizationalUnitForEnforcement",
            "in": "query",
            "description": "Filter service accounts on their organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Filter the service accounts by the password shared in the vault, specified by id. This parameter supports composition with all parameters from the vault record resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "passwordRotation",
            "in": "query",
            "description": "Only return service accounts with the given password rotation scheme.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/serviceaccount.PasswordRotationScheme"
              }
            }
          },
          {
            "name": "requestedGroupOnSystemOwners",
            "in": "query",
            "description": "Filter the service accounts on active requests for group on systems owned by any of the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "system",
            "in": "query",
            "description": "Filter the service accounts by provisioned systems, specified by id. This parameter supports composition with all parameters from the provisioned system resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemContentAdministrators",
            "in": "query",
            "description": "Filter the service accounts on the content administration group of a provisioned system, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemOwners",
            "in": "query",
            "description": "Filter the service accounts on the owning group of its provisioned system, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemTechnicalAdministrators",
            "in": "query",
            "description": "Filter the service accounts on the technical administrator group of its provisioned system, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "technicalAdministrator",
            "in": "query",
            "description": "Filter the service accounts on groups that perform technical administration for them, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter service accounts on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Export prepared"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/serviceaccount/group/export": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Prepares an export of service account group on systems in CSV format",
        "description": "Prepares an export of service account group on systems using the filtering specified in the query parameters. The URI of the export can be found in the returned Location header. This URI is valid for 2 minutes after being generated.",
        "operationId": "startGroupExport_serviceaccount_group_export",
        "parameters": [
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Only return active or inactive service accounts.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BooleanEnum"
              }
            }
          },
          {
            "name": "groupOnSystem",
            "in": "query",
            "description": "Filter the service accounts by groups on systems, specified by id. This parameter supports composition with all parameters from the group on system resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOnSystemOwners",
            "in": "query",
            "description": "Filter the service accounts on group on systems owned by any of the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter service accounts on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search service accounts on (part of) the name, username or uuid.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameDoesNotStartWith",
            "in": "query",
            "description": "Only return service accounts for which the name does not start with the given prefix.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameStartsWith",
            "in": "query",
            "description": "Only return service accounts for which the name starts with the given prefix.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "organizationalUnitForEnforcement",
            "in": "query",
            "description": "Filter service accounts on their organizational units, specified by id. This parameter supports composition with all parameters from the organizational unit resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "Filter the service accounts by the password shared in the vault, specified by id. This parameter supports composition with all parameters from the vault record resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "passwordRotation",
            "in": "query",
            "description": "Only return service accounts with the given password rotation scheme.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/serviceaccount.PasswordRotationScheme"
              }
            }
          },
          {
            "name": "requestedGroupOnSystemOwners",
            "in": "query",
            "description": "Filter the service accounts on active requests for group on systems owned by any of the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "system",
            "in": "query",
            "description": "Filter the service accounts by provisioned systems, specified by id. This parameter supports composition with all parameters from the provisioned system resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemContentAdministrators",
            "in": "query",
            "description": "Filter the service accounts on the content administration group of a provisioned system, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemOwners",
            "in": "query",
            "description": "Filter the service accounts on the owning group of its provisioned system, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemTechnicalAdministrators",
            "in": "query",
            "description": "Filter the service accounts on the technical administrator group of its provisioned system, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "technicalAdministrator",
            "in": "query",
            "description": "Filter the service accounts on groups that perform technical administration for them, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter service accounts on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Export prepared"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/serviceaccount/{serviceaccountid}/status": {
      "put": {
        "tags": [
          "provisioning"
        ],
        "summary": "Updates the status toggle for the service account",
        "description": "Updates the status toggle for the service account. ",
        "operationId": "updateStatus_serviceaccount_status",
        "parameters": [
          {
            "name": "serviceaccountid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/serviceaccount.ServiceAccountStatus"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/serviceaccount.ServiceAccountStatus"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Service account updated"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/vaultrecord/{vaultrecordid}": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Read a single record by id",
        "description": "Returns the vault record identified by the id. To access the secrets, use the full uri of the record. This endpoint does not support reading secrets.",
        "operationId": "get_vaultrecord",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "vaultrecordid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/vaultrecord": {
      "get": {
        "tags": [
          "vault"
        ],
        "summary": "Query for records over all vaults",
        "description": "Query for vault records over all vaults the user can access. The various query parameters can be used to filter the response. It is not possible to access secrets with a query that returns multiple results. Secrets can only be read one by one.",
        "operationId": "list_vaultrecord",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activationStatus",
                  "audit",
                  "parent",
                  "passwordMetadata",
                  "secret",
                  "shareSummary",
                  "shares",
                  "tile",
                  "vaultholder"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accessibleByAccount",
            "in": "query",
            "description": "Filter records that accessible by the given account(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByAccountAsManager",
            "in": "query",
            "description": "Filter records that accessible by the given account(s) and the account is manager of the group, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "accessibleByClient",
            "in": "query",
            "description": "Filter records that accessible by the given client(s), specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter the records by account, specified by id. This parameter supports composition with all parameters from the account resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter the records by client, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "color",
            "in": "query",
            "description": "Filter records on the color.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/vault.VaultRecordColor"
              }
            }
          },
          {
            "name": "expireWarningBeforeOrAt",
            "in": "query",
            "description": "Only return records that show an expiration warning at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "Filter records on the exact filename.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter the records by group, specified by id. This parameter supports composition with all parameters from the group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "groupOrganizationalUnit",
            "in": "query",
            "description": "Filter the records by organizational unit of the group, specified by id. This parameter supports composition with all parameters from the client resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "hasNoPolicy",
            "in": "query",
            "description": "Only return records that have or do not have an expiration policy set.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasParent",
            "in": "query",
            "description": "Filter records that are shared (have a parent record)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "hasValidPolicy",
            "in": "query",
            "description": "Only return records that have or do not have expired.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter records on the exact name.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Search records on (part of) the UUID, name, filename, URI or username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "parent",
            "in": "query",
            "description": "Filter records that are shared from the specified parent record, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Filter records by secret using composition. Use secret.type to filter on type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "shareExpiresBeforeOrAt",
            "in": "query",
            "description": "Only return records for which the sharing period has expired at or before the given date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Filter records on the exact URI.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Filter records on the exact username.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter records on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vault",
            "in": "query",
            "description": "Filter the records by vault, specified by id. This parameter supports composition with all parameters from the vault resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/vault.VaultRecordLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/webhook": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Query for webhooks",
        "description": "Queries over all webhooks. The various query parameters can be used to filter the response.",
        "operationId": "list_webhook",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "Filter webhooks on the given accounts, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Only return active or inactive webhooks.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BooleanEnum"
              }
            }
          },
          {
            "name": "appAdminGroup",
            "in": "query",
            "description": "Filter webhooks on the given groups performing technical administration for the client for the webhooks, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "appOwnerGroup",
            "in": "query",
            "description": "Filter the webhooks by groups owning the client, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "client",
            "in": "query",
            "description": "Filter webhooks on the given clients, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "contentAdminGroup",
            "in": "query",
            "description": "Filter webhooks on the given groups performing content administration for the system for the webhooks, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "directory",
            "in": "query",
            "description": "Filter webhooks on the given directories, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "directoryOwnerGroup",
            "in": "query",
            "description": "Filter the webhooks by groups owning the internal directory, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "expiredCertificate",
            "in": "query",
            "description": "Only return webhooks that use certificates that are expired at the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "global",
            "in": "query",
            "description": "Only return webhooks that are or are not global.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "group",
            "in": "query",
            "description": "Filter webhooks on the given groups, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "nameContains",
            "in": "query",
            "description": "Filter webhooks on (part of) the name, uuid or URL.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "serviceAccount",
            "in": "query",
            "description": "Filter webhooks on the given service accounts, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "serviceAccountNotNull",
            "in": "query",
            "description": "Filter webhooks on the given service accounts, specified by id. This parameter supports composition with all parameters from the provisioning group resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "system",
            "in": "query",
            "description": "Filter webhooks on the given systems, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemAdminGroup",
            "in": "query",
            "description": "Filter webhooks on the given groups performing technical administration for the system for the webhooks, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "systemOwnerGroup",
            "in": "query",
            "description": "Filter the webhooks by groups owning the provisioned system, specified by id.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "tls",
            "in": "query",
            "description": "Filter results on the given TLS mode(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TLSLevel"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Only return webhooks that trigger on one of the given type(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/audit.AuditRecordType"
              }
            }
          },
          {
            "name": "url",
            "in": "query",
            "description": "Filter results on one or more URLs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Filter results on one or more UUIDs.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.WebhookLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.WebhookLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Creates one or more new webhooks",
        "description": "Creates one or more new webhooks and returns the newly created webhooks.",
        "operationId": "create_webhook",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/webhook.WebhookLinkableWrapper"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/webhook.WebhookLinkableWrapper"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.WebhookLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.WebhookLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/webhook/{webhookid}": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Read a single webhook",
        "description": "Returns the single webhook.",
        "operationId": "get_webhook",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "webhookid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.Webhook"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.Webhook"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "put": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Update a webhook",
        "description": "Updates the webhook identified by the id.",
        "operationId": "update_webhook",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "webhookid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.topicus.keyhub+json;version=81": {
              "schema": {
                "$ref": "#/components/schemas/webhook.Webhook"
              }
            },
            "application/vnd.topicus.keyhub+xml;version=81": {
              "schema": {
                "$ref": "#/components/schemas/webhook.Webhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.Webhook"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.Webhook"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      },
      "delete": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Remove a webhook",
        "description": "Removes the specified webhook.",
        "operationId": "delete_webhook",
        "parameters": [
          {
            "name": "webhookid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/webhook/{webhookid}/delivery/{deliveryid}": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Read a single webhook delivery",
        "description": "Returns the single webhook delivery.",
        "operationId": "get_webhook_delivery",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "deliveryid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "webhookid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.WebhookDelivery"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.WebhookDelivery"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/webhook/{webhookid}/delivery": {
      "get": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Query for webhook deliveries",
        "description": "Queries over all deliveries for a webhook. The various query parameters can be used to filter the response.",
        "operationId": "list_webhook_delivery",
        "parameters": [
          {
            "name": "additional",
            "in": "query",
            "description": "Request additional information to be returned for every record.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "audit"
                ]
              }
            }
          },
          {
            "name": "any",
            "in": "query",
            "description": "Return all or no records. This can be useful when composing parameters.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "createdAfter",
            "in": "query",
            "description": "Only return records that have been created after the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "createdBefore",
            "in": "query",
            "description": "Only return records that have been created before the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Filter the results to exclude the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter the results on the given ids.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "Only return records that have been modified since the given instant.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter records on a complex CQL query.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "webhook",
            "in": "query",
            "description": "Filter deliveries on the given webhooks, specified by id. This parameter supports composition with all parameters from the webhook resource.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the items. Use 'asc-<name>' for ascending and 'desc-<name>' for descending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Range",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/RequestRange"
            }
          },
          {
            "name": "webhookid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "default response",
            "content": {
              "application/vnd.topicus.keyhub+json;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.WebhookDeliveryLinkableWrapper"
                }
              },
              "application/vnd.topicus.keyhub+xml;version=81": {
                "schema": {
                  "$ref": "#/components/schemas/webhook.WebhookDeliveryLinkableWrapper"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    },
    "/webhook/{webhookid}/delivery/{deliveryid}/redeliver": {
      "post": {
        "tags": [
          "miscellaneous"
        ],
        "summary": "Perform a redelivery of the webhook payload",
        "description": "Perform a redelivery of the webhook payload.",
        "operationId": "redeliver_webhook_delivery_redeliver",
        "parameters": [
          {
            "name": "deliveryid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "webhookid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook redelivered"
          },
          "4XX": {
            "$ref": "#/components/responses/error"
          },
          "5XX": {
            "$ref": "#/components/responses/error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuditInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AuditInfo",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "createdBy": {
                "type": "string",
                "readOnly": true
              },
              "lastModifiedAt": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "lastModifiedBy": {
                "type": "string",
                "readOnly": true
              },
              "$type": {
                "type": "string",
                "default": "AuditInfo"
              }
            },
            "x-tkh-discriminator": "AuditInfo"
          }
        ]
      },
      "BooleanEnum": {
        "type": "string",
        "enum": [
          "TRUE",
          "FALSE",
          "BOTH"
        ]
      },
      "ErrorReport": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "x-tkh-default": 0
          },
          "reason": {
            "type": "string"
          },
          "exception": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "applicationError": {
            "type": "string"
          },
          "applicationErrorParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "stacktrace": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "x-tkh-discriminator": "ErrorReport"
      },
      "GeneratedSecret": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "GeneratedSecret",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "generatedSecret": {
                "type": "string",
                "readOnly": true,
                "x-tkh-sensitive": true
              },
              "oldSecret": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "regenerate": {
                "type": "boolean"
              },
              "$type": {
                "type": "string",
                "default": "GeneratedSecret"
              }
            },
            "x-tkh-discriminator": "GeneratedSecret"
          }
        ]
      },
      "HttpAuthenticationScheme": {
        "type": "string",
        "enum": [
          "NONE",
          "BASIC",
          "BEARER",
          "CUSTOM"
        ]
      },
      "Link": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "x-tkh-immutable": true
          },
          "rel": {
            "type": "string",
            "x-tkh-immutable": true
          },
          "type": {
            "type": "string",
            "x-tkh-immutable": true
          },
          "href": {
            "type": "string",
            "format": "uri",
            "x-tkh-immutable": true
          }
        },
        "x-tkh-discriminator": "Link"
      },
      "Linkable": {
        "required": [
          "$type"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "x-tkh-immutable": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/auth.Permission"
            },
            "x-tkh-immutable": true
          },
          "$type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "$type",
          "mapping": {
            "Linkable": "#/components/schemas/Linkable",
            "audit.AuditRecord": "#/components/schemas/audit.AuditRecord",
            "audit.GroupAudit": "#/components/schemas/audit.GroupAudit",
            "audit.GroupAuditAccount": "#/components/schemas/audit.GroupAuditAccount",
            "audit.NestedGroupAudit": "#/components/schemas/audit.NestedGroupAudit",
            "auth.Account": "#/components/schemas/auth.Account",
            "auth.AccountPrimer": "#/components/schemas/auth.AccountPrimer",
            "auth.InternalAccount": "#/components/schemas/auth.InternalAccount",
            "auth.StoredUserSession": "#/components/schemas/auth.StoredUserSession",
            "auth.WebAuthnKey": "#/components/schemas/auth.WebAuthnKey",
            "certificate.Certificate": "#/components/schemas/certificate.Certificate",
            "certificate.CertificatePrimer": "#/components/schemas/certificate.CertificatePrimer",
            "client.ClientApplication": "#/components/schemas/client.ClientApplication",
            "client.ClientApplicationPrimer": "#/components/schemas/client.ClientApplicationPrimer",
            "client.ClientConsent": "#/components/schemas/client.ClientConsent",
            "client.LdapClient": "#/components/schemas/client.LdapClient",
            "client.OAuth2Client": "#/components/schemas/client.OAuth2Client",
            "client.OAuth2ClientPermission": "#/components/schemas/client.OAuth2ClientPermission",
            "client.OAuth2ClientPermissionWithClient": "#/components/schemas/client.OAuth2ClientPermissionWithClient",
            "client.Saml2Client": "#/components/schemas/client.Saml2Client",
            "directory.AccountDirectory": "#/components/schemas/directory.AccountDirectory",
            "directory.AccountDirectoryPrimer": "#/components/schemas/directory.AccountDirectoryPrimer",
            "directory.AccountDirectorySummary": "#/components/schemas/directory.AccountDirectorySummary",
            "directory.InternalDirectory": "#/components/schemas/directory.InternalDirectory",
            "directory.LDAPDirectory": "#/components/schemas/directory.LDAPDirectory",
            "directory.MaintenanceDirectory": "#/components/schemas/directory.MaintenanceDirectory",
            "directory.OIDCDirectory": "#/components/schemas/directory.OIDCDirectory",
            "directory.PendingAccountsDirectory": "#/components/schemas/directory.PendingAccountsDirectory",
            "group.AccountGroup": "#/components/schemas/group.AccountGroup",
            "group.Group": "#/components/schemas/group.Group",
            "group.GroupAccount": "#/components/schemas/group.GroupAccount",
            "group.GroupAuditConfig": "#/components/schemas/group.GroupAuditConfig",
            "group.GroupClassification": "#/components/schemas/group.GroupClassification",
            "group.GroupClassificationPrimer": "#/components/schemas/group.GroupClassificationPrimer",
            "group.GroupClient": "#/components/schemas/group.GroupClient",
            "group.GroupFolder": "#/components/schemas/group.GroupFolder",
            "group.GroupPrimer": "#/components/schemas/group.GroupPrimer",
            "group.ProvisioningGroup": "#/components/schemas/group.ProvisioningGroup",
            "identity.AccountAttributeDefinition": "#/components/schemas/identity.AccountAttributeDefinition",
            "identity.AccountAttributeRule": "#/components/schemas/identity.AccountAttributeRule",
            "identity.AccountAttributeValue": "#/components/schemas/identity.AccountAttributeValue",
            "identity.Identity": "#/components/schemas/identity.Identity",
            "identitysource.AFASIdentitySource": "#/components/schemas/identitysource.AFASIdentitySource",
            "identitysource.IdentitySource": "#/components/schemas/identitysource.IdentitySource",
            "identitysource.IdentitySourcePrimer": "#/components/schemas/identitysource.IdentitySourcePrimer",
            "launchpad.DisplayedLaunchpadTile": "#/components/schemas/launchpad.DisplayedLaunchpadTile",
            "launchpad.LaunchpadTile": "#/components/schemas/launchpad.LaunchpadTile",
            "launchpad.LaunchpadTilePrimer": "#/components/schemas/launchpad.LaunchpadTilePrimer",
            "launchpad.ManualLaunchpadTile": "#/components/schemas/launchpad.ManualLaunchpadTile",
            "launchpad.SsoApplicationLaunchpadTile": "#/components/schemas/launchpad.SsoApplicationLaunchpadTile",
            "launchpad.VaultRecordLaunchpadTile": "#/components/schemas/launchpad.VaultRecordLaunchpadTile",
            "organization.AccountOrganizationalUnit": "#/components/schemas/organization.AccountOrganizationalUnit",
            "organization.ClientApplicationOrganizationalUnit": "#/components/schemas/organization.ClientApplicationOrganizationalUnit",
            "organization.OrganizationalUnit": "#/components/schemas/organization.OrganizationalUnit",
            "organization.OrganizationalUnitAccount": "#/components/schemas/organization.OrganizationalUnitAccount",
            "organization.OrganizationalUnitClientApplication": "#/components/schemas/organization.OrganizationalUnitClientApplication",
            "organization.OrganizationalUnitPrimer": "#/components/schemas/organization.OrganizationalUnitPrimer",
            "profile.AccessProfile": "#/components/schemas/profile.AccessProfile",
            "profile.AccessProfileAccount": "#/components/schemas/profile.AccessProfileAccount",
            "profile.AccessProfileAccountWithAttributes": "#/components/schemas/profile.AccessProfileAccountWithAttributes",
            "profile.AccessProfileClient": "#/components/schemas/profile.AccessProfileClient",
            "profile.AccessProfileGroup": "#/components/schemas/profile.AccessProfileGroup",
            "profile.AccessProfilePrimer": "#/components/schemas/profile.AccessProfilePrimer",
            "profile.AccessProfileProvisioning": "#/components/schemas/profile.AccessProfileProvisioning",
            "provisioning.AbstractProvisionedLDAP": "#/components/schemas/provisioning.AbstractProvisionedLDAP",
            "provisioning.GroupOnSystem": "#/components/schemas/provisioning.GroupOnSystem",
            "provisioning.GroupOnSystemPrimer": "#/components/schemas/provisioning.GroupOnSystemPrimer",
            "provisioning.ProvisionNumberSequence": "#/components/schemas/provisioning.ProvisionNumberSequence",
            "provisioning.ProvisionedAD": "#/components/schemas/provisioning.ProvisionedAD",
            "provisioning.ProvisionedAccount": "#/components/schemas/provisioning.ProvisionedAccount",
            "provisioning.ProvisionedAzureOIDCDirectory": "#/components/schemas/provisioning.ProvisionedAzureOIDCDirectory",
            "provisioning.ProvisionedAzureSyncLDAPDirectory": "#/components/schemas/provisioning.ProvisionedAzureSyncLDAPDirectory",
            "provisioning.ProvisionedAzureTenant": "#/components/schemas/provisioning.ProvisionedAzureTenant",
            "provisioning.ProvisionedInternalLDAP": "#/components/schemas/provisioning.ProvisionedInternalLDAP",
            "provisioning.ProvisionedLDAP": "#/components/schemas/provisioning.ProvisionedLDAP",
            "provisioning.ProvisionedLDAPDirectory": "#/components/schemas/provisioning.ProvisionedLDAPDirectory",
            "provisioning.ProvisionedNamespace": "#/components/schemas/provisioning.ProvisionedNamespace",
            "provisioning.ProvisionedSCIM": "#/components/schemas/provisioning.ProvisionedSCIM",
            "provisioning.ProvisionedSystem": "#/components/schemas/provisioning.ProvisionedSystem",
            "provisioning.ProvisionedSystemPrimer": "#/components/schemas/provisioning.ProvisionedSystemPrimer",
            "provisioning.ProvisioningOperationLog": "#/components/schemas/provisioning.ProvisioningOperationLog",
            "provisioning.ProvisioningOperationLogLine": "#/components/schemas/provisioning.ProvisioningOperationLogLine",
            "request.AbstractAccessProfileModificationRequest": "#/components/schemas/request.AbstractAccessProfileModificationRequest",
            "request.AbstractApplicationModificationRequest": "#/components/schemas/request.AbstractApplicationModificationRequest",
            "request.AbstractOrganizationalUnitModificationRequest": "#/components/schemas/request.AbstractOrganizationalUnitModificationRequest",
            "request.AbstractProvisionedSystemModificationRequest": "#/components/schemas/request.AbstractProvisionedSystemModificationRequest",
            "request.AddGroupAdminRequest": "#/components/schemas/request.AddGroupAdminRequest",
            "request.AddGroupToAccessProfileRequest": "#/components/schemas/request.AddGroupToAccessProfileRequest",
            "request.CreateGroupOnSystemRequest": "#/components/schemas/request.CreateGroupOnSystemRequest",
            "request.CreateGroupRequest": "#/components/schemas/request.CreateGroupRequest",
            "request.CreateProvisionedNamespaceRequest": "#/components/schemas/request.CreateProvisionedNamespaceRequest",
            "request.CreateServiceAccountRequest": "#/components/schemas/request.CreateServiceAccountRequest",
            "request.Disable2FARequest": "#/components/schemas/request.Disable2FARequest",
            "request.EnableProfileAdministrationRequest": "#/components/schemas/request.EnableProfileAdministrationRequest",
            "request.EnableTechnicalAdministrationRequest": "#/components/schemas/request.EnableTechnicalAdministrationRequest",
            "request.ExtendAccessRequest": "#/components/schemas/request.ExtendAccessRequest",
            "request.GrantAccessRequest": "#/components/schemas/request.GrantAccessRequest",
            "request.GrantApplicationRequest": "#/components/schemas/request.GrantApplicationRequest",
            "request.GrantClientPermissionRequest": "#/components/schemas/request.GrantClientPermissionRequest",
            "request.GrantGroupOnSystemRequest": "#/components/schemas/request.GrantGroupOnSystemRequest",
            "request.GrantGroupOnSystemRequestRequest": "#/components/schemas/request.GrantGroupOnSystemRequestRequest",
            "request.GrantServiceAccountGroupRequest": "#/components/schemas/request.GrantServiceAccountGroupRequest",
            "request.JoinGroupRequest": "#/components/schemas/request.JoinGroupRequest",
            "request.JoinVaultRequest": "#/components/schemas/request.JoinVaultRequest",
            "request.LinkDirectoryToAccessProfileRequest": "#/components/schemas/request.LinkDirectoryToAccessProfileRequest",
            "request.ModificationRequest": "#/components/schemas/request.ModificationRequest",
            "request.MoveGroupsRequest": "#/components/schemas/request.MoveGroupsRequest",
            "request.PasswordResetRequest": "#/components/schemas/request.PasswordResetRequest",
            "request.RemoveAccessProfileRequest": "#/components/schemas/request.RemoveAccessProfileRequest",
            "request.RemoveGroupRequest": "#/components/schemas/request.RemoveGroupRequest",
            "request.RemoveOrganizationalUnitRequest": "#/components/schemas/request.RemoveOrganizationalUnitRequest",
            "request.RemoveProvisionedSystemRequest": "#/components/schemas/request.RemoveProvisionedSystemRequest",
            "request.ReviewAuditRequest": "#/components/schemas/request.ReviewAuditRequest",
            "request.RevokeAdminRequest": "#/components/schemas/request.RevokeAdminRequest",
            "request.SetupAuthorizingGroupRequest": "#/components/schemas/request.SetupAuthorizingGroupRequest",
            "request.SetupNestedGroupRequest": "#/components/schemas/request.SetupNestedGroupRequest",
            "request.TransferAccessProfileOwnershipRequest": "#/components/schemas/request.TransferAccessProfileOwnershipRequest",
            "request.TransferApplicationAdministrationRequest": "#/components/schemas/request.TransferApplicationAdministrationRequest",
            "request.TransferApplicationOwnershipRequest": "#/components/schemas/request.TransferApplicationOwnershipRequest",
            "request.TransferGroupOnSystemOwnershipRequest": "#/components/schemas/request.TransferGroupOnSystemOwnershipRequest",
            "request.TransferOrganizationalUnitOwnershipRequest": "#/components/schemas/request.TransferOrganizationalUnitOwnershipRequest",
            "request.TransferProvisionedSystemAdministrationRequest": "#/components/schemas/request.TransferProvisionedSystemAdministrationRequest",
            "request.TransferProvisionedSystemContentAdministrationRequest": "#/components/schemas/request.TransferProvisionedSystemContentAdministrationRequest",
            "request.TransferProvisionedSystemOwnershipRequest": "#/components/schemas/request.TransferProvisionedSystemOwnershipRequest",
            "request.TransferServiceAccountAdministrationRequest": "#/components/schemas/request.TransferServiceAccountAdministrationRequest",
            "request.UpdateGroupMembershipRequest": "#/components/schemas/request.UpdateGroupMembershipRequest",
            "request.UpdateLicenseRequest": "#/components/schemas/request.UpdateLicenseRequest",
            "request.VerifyInternalAccountRequest": "#/components/schemas/request.VerifyInternalAccountRequest",
            "serviceaccount.ServiceAccount": "#/components/schemas/serviceaccount.ServiceAccount",
            "serviceaccount.ServiceAccountGroup": "#/components/schemas/serviceaccount.ServiceAccountGroup",
            "serviceaccount.ServiceAccountPrimer": "#/components/schemas/serviceaccount.ServiceAccountPrimer",
            "vault.DeletedVaultHolder": "#/components/schemas/vault.DeletedVaultHolder",
            "vault.Vault": "#/components/schemas/vault.Vault",
            "vault.VaultRecord": "#/components/schemas/vault.VaultRecord",
            "vault.VaultRecordPrimer": "#/components/schemas/vault.VaultRecordPrimer",
            "webhook.Webhook": "#/components/schemas/webhook.Webhook",
            "webhook.WebhookDelivery": "#/components/schemas/webhook.WebhookDelivery"
          }
        },
        "x-tkh-discriminator": "Linkable"
      },
      "Month": {
        "type": "string",
        "enum": [
          "JANUARY",
          "FEBRUARY",
          "MARCH",
          "APRIL",
          "MAY",
          "JUNE",
          "JULY",
          "AUGUST",
          "SEPTEMBER",
          "OCTOBER",
          "NOVEMBER",
          "DECEMBER"
        ]
      },
      "NonLinkable": {
        "required": [
          "$type"
        ],
        "type": "object",
        "properties": {
          "$type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "$type",
          "mapping": {
            "AuditInfo": "#/components/schemas/AuditInfo",
            "GeneratedSecret": "#/components/schemas/GeneratedSecret",
            "NonLinkable": "#/components/schemas/NonLinkable",
            "SegmentCount": "#/components/schemas/SegmentCount",
            "auth.AccountBulkUpdate": "#/components/schemas/auth.AccountBulkUpdate",
            "auth.AccountChangeLocale": "#/components/schemas/auth.AccountChangeLocale",
            "auth.AccountRecoveryStatus": "#/components/schemas/auth.AccountRecoveryStatus",
            "auth.AccountSettings": "#/components/schemas/auth.AccountSettings",
            "auth.AccountStatus": "#/components/schemas/auth.AccountStatus",
            "auth.AccountsAuditStats": "#/components/schemas/auth.AccountsAuditStats",
            "auth.InternalAccountStatusObject": "#/components/schemas/auth.InternalAccountStatusObject",
            "auth.MoveInternalAccount": "#/components/schemas/auth.MoveInternalAccount",
            "auth.StoredAccountAttribute": "#/components/schemas/auth.StoredAccountAttribute",
            "auth.StoredAccountAttributes": "#/components/schemas/auth.StoredAccountAttributes",
            "directory.AccountDirectoryStatusReport": "#/components/schemas/directory.AccountDirectoryStatusReport",
            "group.GroupAccessInfo": "#/components/schemas/group.GroupAccessInfo",
            "group.GroupAccountNesting": "#/components/schemas/group.GroupAccountNesting",
            "group.GroupAccountStatus": "#/components/schemas/group.GroupAccountStatus",
            "group.GroupAdminMail": "#/components/schemas/group.GroupAdminMail",
            "group.GroupAuditingInfo": "#/components/schemas/group.GroupAuditingInfo",
            "group.GroupClassificationInfo": "#/components/schemas/group.GroupClassificationInfo",
            "group.GroupClassificationUpdate": "#/components/schemas/group.GroupClassificationUpdate",
            "group.GroupGlobalRoleInfo": "#/components/schemas/group.GroupGlobalRoleInfo",
            "group.GroupInfo": "#/components/schemas/group.GroupInfo",
            "group.GroupsAuditStats": "#/components/schemas/group.GroupsAuditStats",
            "identity.AccountAttributeValueSelection": "#/components/schemas/identity.AccountAttributeValueSelection",
            "identity.AccountAttributeValueSummary": "#/components/schemas/identity.AccountAttributeValueSummary",
            "identity.AccountAttributeValueUpdate": "#/components/schemas/identity.AccountAttributeValueUpdate",
            "launchpad.DisplayedLaunchpadTiles": "#/components/schemas/launchpad.DisplayedLaunchpadTiles",
            "license.KeyHubLicenseInfo": "#/components/schemas/license.KeyHubLicenseInfo",
            "mark.ItemMarker": "#/components/schemas/mark.ItemMarker",
            "mark.ItemMarkers": "#/components/schemas/mark.ItemMarkers",
            "misc.AttributeCustomization": "#/components/schemas/misc.AttributeCustomization",
            "notification.CertificateExpiredNotification": "#/components/schemas/notification.CertificateExpiredNotification",
            "notification.GroupAuditRequiredNotification": "#/components/schemas/notification.GroupAuditRequiredNotification",
            "notification.GroupEditRequiredNotification": "#/components/schemas/notification.GroupEditRequiredNotification",
            "notification.InvalidSignaturesDetectedNotification": "#/components/schemas/notification.InvalidSignaturesDetectedNotification",
            "notification.LicenseStatusNotification": "#/components/schemas/notification.LicenseStatusNotification",
            "notification.ModificationRequestNotification": "#/components/schemas/notification.ModificationRequestNotification",
            "notification.Notification": "#/components/schemas/notification.Notification",
            "notification.Notifications": "#/components/schemas/notification.Notifications",
            "notification.OldApiVersionUsageNotification": "#/components/schemas/notification.OldApiVersionUsageNotification",
            "notification.ProvisionConfigRequiredNotification": "#/components/schemas/notification.ProvisionConfigRequiredNotification",
            "notification.RotatingPasswordRequiredNotification": "#/components/schemas/notification.RotatingPasswordRequiredNotification",
            "notification.UpdateAvailableNotification": "#/components/schemas/notification.UpdateAvailableNotification",
            "notification.VaultRecordExpiredNotification": "#/components/schemas/notification.VaultRecordExpiredNotification",
            "organization.OrganizationalUnitSettings": "#/components/schemas/organization.OrganizationalUnitSettings",
            "provisioning.AccountProvisioningStatus": "#/components/schemas/provisioning.AccountProvisioningStatus",
            "provisioning.AccountProvisioningStatusReport": "#/components/schemas/provisioning.AccountProvisioningStatusReport",
            "provisioning.CircuitBreakerStatistics": "#/components/schemas/provisioning.CircuitBreakerStatistics",
            "provisioning.GroupOnSystemTypes": "#/components/schemas/provisioning.GroupOnSystemTypes",
            "provisioning.GroupProvisioningStatus": "#/components/schemas/provisioning.GroupProvisioningStatus",
            "provisioning.ProvisioningManagementPermissions": "#/components/schemas/provisioning.ProvisioningManagementPermissions",
            "provisioning.ProvisioningStatus": "#/components/schemas/provisioning.ProvisioningStatus",
            "provisioning.TokenPassword": "#/components/schemas/provisioning.TokenPassword",
            "request.AcceptCreateGroupOnSystemRequestParameters": "#/components/schemas/request.AcceptCreateGroupOnSystemRequestParameters",
            "request.AcceptCreateGroupRequestParameters": "#/components/schemas/request.AcceptCreateGroupRequestParameters",
            "request.AcceptCreateProvisionedNamespaceRequestParameters": "#/components/schemas/request.AcceptCreateProvisionedNamespaceRequestParameters",
            "request.AcceptCreateServiceAccountRequestParameters": "#/components/schemas/request.AcceptCreateServiceAccountRequestParameters",
            "request.AcceptGrantAccessRequestParameters": "#/components/schemas/request.AcceptGrantAccessRequestParameters",
            "request.AcceptJoinGroupRequestParameters": "#/components/schemas/request.AcceptJoinGroupRequestParameters",
            "request.AcceptModificationRequestParameters": "#/components/schemas/request.AcceptModificationRequestParameters",
            "request.ModificationRequestReport": "#/components/schemas/request.ModificationRequestReport",
            "request.ModificationRequestReportChangeDetails": "#/components/schemas/request.ModificationRequestReportChangeDetails",
            "request.ModificationRequestReportErrorDetails": "#/components/schemas/request.ModificationRequestReportErrorDetails",
            "request.ModificationRequestReportObjectChangeDetails": "#/components/schemas/request.ModificationRequestReportObjectChangeDetails",
            "request.PasswordResetRequestStatus": "#/components/schemas/request.PasswordResetRequestStatus",
            "serviceaccount.ServiceAccountStatus": "#/components/schemas/serviceaccount.ServiceAccountStatus",
            "serviceaccount.ServiceAccountSupportedFeatures": "#/components/schemas/serviceaccount.ServiceAccountSupportedFeatures",
            "serviceaccount.ServiceAccountsAuditStats": "#/components/schemas/serviceaccount.ServiceAccountsAuditStats",
            "simple.StringValue": "#/components/schemas/simple.StringValue",
            "simple.VersionInfo": "#/components/schemas/simple.VersionInfo",
            "vault.DeletedVaultRecovery": "#/components/schemas/vault.DeletedVaultRecovery",
            "vault.MoveVaultRecord": "#/components/schemas/vault.MoveVaultRecord",
            "vault.PasswordMetadata": "#/components/schemas/vault.PasswordMetadata",
            "vault.VaultActivationStatus": "#/components/schemas/vault.VaultActivationStatus",
            "vault.VaultRecordSecrets": "#/components/schemas/vault.VaultRecordSecrets",
            "vault.VaultRecordShare": "#/components/schemas/vault.VaultRecordShare",
            "vault.VaultRecordShareSummary": "#/components/schemas/vault.VaultRecordShareSummary",
            "vault.VaultRecovery": "#/components/schemas/vault.VaultRecovery",
            "vault.VaultUnlock": "#/components/schemas/vault.VaultUnlock",
            "vault.VaultUnlockResponse": "#/components/schemas/vault.VaultUnlockResponse",
            "webhook.WebhookNameUuid": "#/components/schemas/webhook.WebhookNameUuid",
            "webhook.WebhookPush": "#/components/schemas/webhook.WebhookPush"
          }
        },
        "x-tkh-discriminator": "NonLinkable"
      },
      "PProvisionedAccountStatus": {
        "type": "string",
        "enum": [
          "NON_EXISTENT",
          "EXISTS_PASSWORD_SET",
          "EXISTS_PASSWORD_UNSET"
        ]
      },
      "RequestRange": {
        "type": "object",
        "properties": {
          "start": {
            "type": "integer",
            "format": "int64"
          },
          "end": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SegmentCount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "SegmentCount",
            "required": [
              "$type",
              "count"
            ],
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "format": "int64",
                "x-tkh-default": 0
              },
              "name": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "SegmentCount"
              }
            },
            "x-tkh-discriminator": "SegmentCount"
          }
        ]
      },
      "TLSLevel": {
        "type": "string",
        "enum": [
          "VERIFIED_PINNED",
          "VERIFIED",
          "SECURE_PINNED",
          "SECURE",
          "ENCRYPTED",
          "UNSECURE"
        ]
      },
      "audit.AuditAccountAction": {
        "type": "string",
        "enum": [
          "APPROVE",
          "ADD_AS_MANAGER",
          "ADD_AS_NORMAL",
          "CHANGE_TO_MANAGER",
          "CHANGE_TO_NORMAL",
          "REMOVE",
          "CONNECT_NESTED"
        ]
      },
      "audit.AuditNestedGroupAction": {
        "type": "string",
        "enum": [
          "INCLUDE",
          "EXCLUDE",
          "MISMATCH"
        ]
      },
      "audit.AuditRecord": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "AuditRecord",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "dateTime": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/audit.AuditRecordType"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "performedBy": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "onAccount": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "onGroup": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "onGroup2": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "onGroupClassification": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "onDirectory": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "onClient": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "onSystem": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "onServiceAccount": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "onCertificate": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "onVaultRecord": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "onWebhook": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "onOrganizationalUnit": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "onAccessProfile": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "onIdentitySource": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "securityLevel": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/auth.SecurityLevel"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "parameter1": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "parameter2": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "parameter3": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "$type": {
                "type": "string",
                "default": "audit.AuditRecord"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-discriminator": "audit.AuditRecord"
          }
        ]
      },
      "audit.AuditRecordLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/audit.AuditRecord"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "audit.AuditRecordType": {
        "type": "string",
        "enum": [
          "ACCESS_PROFILE_CREATED",
          "ACCESS_PROFILE_MODIFIED",
          "ACCESS_PROFILE_REMOVED",
          "ACCOUNT_2FA_DISABLED",
          "ACCOUNT_2FA_ENABLED",
          "ACCOUNT_ACCESS_PROFILE_DEPROVISIONED",
          "ACCOUNT_ACCESS_PROFILE_PROVISIONED",
          "ACCOUNT_ACTIVATION_CODE_USED",
          "ACCOUNT_ADDED_TO_ACCESS_PROFILE",
          "ACCOUNT_ADDED_TO_GROUP",
          "ACCOUNT_ADDED_TO_ORGANIZATIONAL_UNIT",
          "ACCOUNT_CREATED",
          "ACCOUNT_DEPROVISIONED",
          "ACCOUNT_DISABLED",
          "ACCOUNT_ENABLED",
          "ACCOUNT_GROUP_ACTIVATED",
          "ACCOUNT_GROUP_ACTIVATION_REASON",
          "ACCOUNT_GROUP_DEPROVISIONED",
          "ACCOUNT_GROUP_PROVISIONED",
          "ACCOUNT_LOGIN",
          "ACCOUNT_LOGIN_FAILED",
          "ACCOUNT_MODIFIED_FOR_ACCESS_PROFILE",
          "ACCOUNT_MODIFIED_FOR_GROUP",
          "ACCOUNT_PASSWORD_CHANGED",
          "ACCOUNT_PROVISIONED",
          "ACCOUNT_PROVISIONING_DESTROYED",
          "ACCOUNT_PROVISIONING_INITED",
          "ACCOUNT_PROVISIONING_MOVED",
          "ACCOUNT_PROVISIONING_SETUP",
          "ACCOUNT_REMOVED",
          "ACCOUNT_REMOVED_FROM_ACCESS_PROFILE",
          "ACCOUNT_REMOVED_FROM_GROUP",
          "ACCOUNT_REMOVED_FROM_ORGANIZATIONAL_UNIT",
          "ACCOUNT_REREGISTERED",
          "ACCOUNT_SSH_PUBLIC_KEY_MODIFIED",
          "ACCOUNT_TOKEN_SIGNED",
          "ACCOUNT_TOTP_OFFSET_CHANGED",
          "ACCOUNT_VAULT_UNLOCKED",
          "ADD_GROUP_ADMIN_ACCEPTED",
          "ADD_GROUP_ADMIN_DECLINED",
          "ADD_GROUP_ADMIN_REQUESTED",
          "ADD_GROUP_TO_ACCESS_PROFILE_ACCEPTED",
          "ADD_GROUP_TO_ACCESS_PROFILE_DECLINED",
          "ADD_GROUP_TO_ACCESS_PROFILE_REQUESTED",
          "AUDITOR_EXPORT_GENERATED",
          "CERTIFICATE_CREATED",
          "CERTIFICATE_MODIFIED",
          "CERTIFICATE_REMOVED",
          "CLIENT_ADDED_TO_ACCESS_PROFILE",
          "CLIENT_ADDED_TO_GROUP",
          "CLIENT_ADDED_TO_ORGANIZATIONAL_UNIT",
          "CLIENT_CREATED",
          "CLIENT_MODIFIED",
          "CLIENT_MODIFIED_FOR_GROUP",
          "CLIENT_PERMISSION_GRANTED",
          "CLIENT_PERMISSION_REVOKED",
          "CLIENT_REMOVED",
          "CLIENT_REMOVED_FROM_ACCESS_PROFILE",
          "CLIENT_REMOVED_FROM_GROUP",
          "CLIENT_REMOVED_FROM_ORGANIZATIONAL_UNIT",
          "CLIENT_SECRET_ROTATED",
          "CREATE_GROUP_ACCEPTED",
          "CREATE_GROUP_DECLINED",
          "CREATE_GROUP_REQUESTED",
          "CREATE_GROUP_ON_SYSTEM_ACCEPTED",
          "CREATE_GROUP_ON_SYSTEM_DECLINED",
          "CREATE_GROUP_ON_SYSTEM_REQUESTED",
          "CREATE_PROVISIONED_NAMESPACE_ACCEPTED",
          "CREATE_PROVISIONED_NAMESPACE_DECLINED",
          "CREATE_PROVISIONED_NAMESPACE_REQUESTED",
          "CREATE_SERVICE_ACCOUNT_ACCEPTED",
          "CREATE_SERVICE_ACCOUNT_DECLINED",
          "CREATE_SERVICE_ACCOUNT_REQUESTED",
          "DIRECTORY_CREATED",
          "DIRECTORY_HELPDESK_MODIFIED",
          "DIRECTORY_MODIFIED",
          "DIRECTORY_REMOVED",
          "DISABLE_2FA_ACCEPTED",
          "DISABLE_2FA_DECLINED",
          "DISABLE_2FA_REQUESTED",
          "ENABLE_PROFILE_ADMINISTRATION_ACCEPTED",
          "ENABLE_PROFILE_ADMINISTRATION_DECLINED",
          "ENABLE_PROFILE_ADMINISTRATION_REQUESTED",
          "ENABLE_TECHNICAL_ADMINISTRATION_ACCEPTED",
          "ENABLE_TECHNICAL_ADMINISTRATION_DECLINED",
          "ENABLE_TECHNICAL_ADMINISTRATION_REQUESTED",
          "EXTENDED_ACCESS_ACCEPTED",
          "EXTENDED_ACCESS_DECLINED",
          "EXTENDED_ACCESS_REQUESTED",
          "GRANT_ACCESS_ACCEPTED",
          "GRANT_ACCESS_DECLINED",
          "GRANT_ACCESS_REQUESTED",
          "GRANT_APPLICATION_ACCEPTED",
          "GRANT_APPLICATION_DECLINED",
          "GRANT_APPLICATION_REQUESTED",
          "GRANT_CLIENT_PERMISSION_ACCEPTED",
          "GRANT_CLIENT_PERMISSION_DECLINED",
          "GRANT_CLIENT_PERMISSION_REQUESTED",
          "GRANT_GROUP_ON_SYSTEM_ACCEPTED",
          "GRANT_GROUP_ON_SYSTEM_DECLINED",
          "GRANT_GROUP_ON_SYSTEM_REQUESTED",
          "GRANT_GROUP_ON_SYSTEM_REQUEST_ACCEPTED",
          "GRANT_GROUP_ON_SYSTEM_REQUEST_DECLINED",
          "GRANT_GROUP_ON_SYSTEM_REQUEST_REQUESTED",
          "GRANT_SERVICE_ACCOUNT_GROUP_ACCEPTED",
          "GRANT_SERVICE_ACCOUNT_GROUP_DECLINED",
          "GRANT_SERVICE_ACCOUNT_GROUP_REQUESTED",
          "GROUP_ADDED_TO_ACCESS_PROFILE",
          "GROUP_AUDIT_CREATED",
          "GROUP_AUDIT_REQUESTED",
          "GROUP_AUTHORIZATION_CONNECTED",
          "GROUP_AUTHORIZATION_DISCONNECTED",
          "GROUP_CLASSIFICATION_ASSIGNED",
          "GROUP_CLASSIFICATION_CREATED",
          "GROUP_CLASSIFICATION_MODIFIED",
          "GROUP_CLASSIFICATION_REMOVED",
          "GROUP_CREATED",
          "GROUP_MODIFIED",
          "GROUP_MOVED",
          "GROUP_NESTING_CONNECTED",
          "GROUP_NESTING_DISCONNECTED",
          "GROUP_ON_SYSTEM_MODIFIED",
          "GROUP_ON_SYSTEM_DEPROVISIONED",
          "GROUP_ON_SYSTEM_CREATED",
          "GROUP_ON_SYSTEM_PROVISIONED",
          "GROUP_ON_SYSTEM_REMOVED",
          "GROUP_REMOVED",
          "GROUP_REMOVED_FROM_ACCESS_PROFILE",
          "IDENTITY_SOURCE_CREATED",
          "IDENTITY_SOURCE_MODIFIED",
          "IDENTITY_SOURCE_REMOVED",
          "INTERNAL_ACCOUNT_ACTIVATED",
          "INTERNAL_ACCOUNT_CREATED",
          "INTERNAL_ACCOUNT_MODIFIED",
          "INTERNAL_ACCOUNT_REMOVED",
          "INVALID_SIGNATURE_DETECTED",
          "JOIN_GROUP_ACCEPTED",
          "JOIN_GROUP_DECLINED",
          "JOIN_GROUP_REQUESTED",
          "JOIN_VAULT_ACCEPTED",
          "JOIN_VAULT_DECLINED",
          "JOIN_VAULT_REQUESTED",
          "LICENSE_KEY_UPLOADED",
          "LINK_DIRECTORY_TO_ACCESS_PROFILE_ACCEPTED",
          "LINK_DIRECTORY_TO_ACCESS_PROFILE_DECLINED",
          "LINK_DIRECTORY_TO_ACCESS_PROFILE_REQUESTED",
          "MOVE_GROUPS_ACCEPTED",
          "MOVE_GROUPS_DECLINED",
          "MOVE_GROUPS_REQUESTED",
          "ORGANIZATIONAL_UNIT_CREATED",
          "ORGANIZATIONAL_UNIT_MODIFIED",
          "ORGANIZATIONAL_UNIT_REMOVED",
          "PROVISIONED_SYSTEM_ADDED_TO_ACCESS_PROFILE",
          "PROVISIONED_SYSTEM_ADDED_TO_GROUP",
          "PROVISIONED_SYSTEM_CREATED",
          "PROVISIONED_SYSTEM_MODIFIED",
          "PROVISIONED_SYSTEM_MODIFIED_FOR_GROUP",
          "PROVISIONED_SYSTEM_REMOVED",
          "PROVISIONED_SYSTEM_REMOVED_FROM_ACCESS_PROFILE",
          "PROVISIONED_SYSTEM_REMOVED_FROM_GROUP",
          "PROVISIONED_SYSTEM_UNKNOWN_ACCOUNT_DESTROYED",
          "REMOVE_ACCESS_PROFILE_ACCEPTED",
          "REMOVE_ACCESS_PROFILE_DECLINED",
          "REMOVE_ACCESS_PROFILE_REQUESTED",
          "REMOVE_GROUP_ACCEPTED",
          "REMOVE_GROUP_DECLINED",
          "REMOVE_GROUP_REQUESTED",
          "REMOVE_ORGANIZATIONAL_UNIT_ACCEPTED",
          "REMOVE_ORGANIZATIONAL_UNIT_DECLINED",
          "REMOVE_ORGANIZATIONAL_UNIT_REQUESTED",
          "REMOVE_PROVISIONED_SYSTEM_ACCEPTED",
          "REMOVE_PROVISIONED_SYSTEM_DECLINED",
          "REMOVE_PROVISIONED_SYSTEM_REQUESTED",
          "RESET_PASSWORD_ACCEPTED",
          "RESET_PASSWORD_DECLINED",
          "RESET_PASSWORD_FINISHED",
          "RESET_PASSWORD_REQUESTED",
          "REVIEW_AUDIT_ACCEPTED",
          "REVIEW_AUDIT_DECLINED",
          "REVIEW_AUDIT_REQUESTED",
          "REVOKE_ADMIN_ACCEPTED",
          "REVOKE_ADMIN_DECLINED",
          "REVOKE_ADMIN_REQUESTED",
          "SERVICE_ACCOUNT_ADDED_TO_GROUP",
          "SERVICE_ACCOUNT_CREATED",
          "SERVICE_ACCOUNT_DEPROVISIONED",
          "SERVICE_ACCOUNT_GROUP_DEPROVISIONED",
          "SERVICE_ACCOUNT_GROUP_PROVISIONED",
          "SERVICE_ACCOUNT_MODIFIED",
          "SERVICE_ACCOUNT_PASSWORD_ROTATED",
          "SERVICE_ACCOUNT_PROVISIONED",
          "SERVICE_ACCOUNT_PROVISIONING_DESTROYED",
          "SERVICE_ACCOUNT_PROVISIONING_INITED",
          "SERVICE_ACCOUNT_REMOVED",
          "SERVICE_ACCOUNT_REMOVED_FROM_GROUP",
          "SETTING_MODIFIED",
          "SETUP_AUTHORIZING_GROUP_CONNECT_ACCEPTED",
          "SETUP_AUTHORIZING_GROUP_CONNECT_DECLINED",
          "SETUP_AUTHORIZING_GROUP_CONNECT_REQUESTED",
          "SETUP_AUTHORIZING_GROUP_DISCONNECT_ACCEPTED",
          "SETUP_AUTHORIZING_GROUP_DISCONNECT_DECLINED",
          "SETUP_AUTHORIZING_GROUP_DISCONNECT_REQUESTED",
          "SETUP_NESTED_GROUP_CONNECT_ACCEPTED",
          "SETUP_NESTED_GROUP_CONNECT_DECLINED",
          "SETUP_NESTED_GROUP_CONNECT_REQUESTED",
          "SETUP_NESTED_GROUP_DISCONNECT_ACCEPTED",
          "SETUP_NESTED_GROUP_DISCONNECT_DECLINED",
          "SETUP_NESTED_GROUP_DISCONNECT_REQUESTED",
          "TRANSFER_ACCESS_PROFILE_OWNERSHIP_ACCEPTED",
          "TRANSFER_ACCESS_PROFILE_OWNERSHIP_DECLINED",
          "TRANSFER_ACCESS_PROFILE_OWNERSHIP_REQUESTED",
          "TRANSFER_APPLICATION_ADMINISTRATION_ACCEPTED",
          "TRANSFER_APPLICATION_ADMINISTRATION_DECLINED",
          "TRANSFER_APPLICATION_ADMINISTRATION_REQUESTED",
          "TRANSFER_APPLICATION_OWNERSHIP_ACCEPTED",
          "TRANSFER_APPLICATION_OWNERSHIP_DECLINED",
          "TRANSFER_APPLICATION_OWNERSHIP_REQUESTED",
          "TRANSFER_GROUP_ON_SYSTEM_OWNERSHIP_ACCEPTED",
          "TRANSFER_GROUP_ON_SYSTEM_OWNERSHIP_DECLINED",
          "TRANSFER_GROUP_ON_SYSTEM_OWNERSHIP_REQUESTED",
          "TRANSFER_ORGANIZATIONAL_UNIT_OWNERSHIP_ACCEPTED",
          "TRANSFER_ORGANIZATIONAL_UNIT_OWNERSHIP_DECLINED",
          "TRANSFER_ORGANIZATIONAL_UNIT_OWNERSHIP_REQUESTED",
          "TRANSFER_PROVISIONED_SYSTEM_ADMINISTRATION_ACCEPTED",
          "TRANSFER_PROVISIONED_SYSTEM_ADMINISTRATION_DECLINED",
          "TRANSFER_PROVISIONED_SYSTEM_ADMINISTRATION_REQUESTED",
          "TRANSFER_PROVISIONED_SYSTEM_CONTENT_ADMINISTRATION_ACCEPTED",
          "TRANSFER_PROVISIONED_SYSTEM_CONTENT_ADMINISTRATION_DECLINED",
          "TRANSFER_PROVISIONED_SYSTEM_CONTENT_ADMINISTRATION_REQUESTED",
          "TRANSFER_PROVISIONED_SYSTEM_OWNERSHIP_ACCEPTED",
          "TRANSFER_PROVISIONED_SYSTEM_OWNERSHIP_DECLINED",
          "TRANSFER_PROVISIONED_SYSTEM_OWNERSHIP_REQUESTED",
          "TRANSFER_SERVICE_ACCOUNT_ADMINISTRATION_ACCEPTED",
          "TRANSFER_SERVICE_ACCOUNT_ADMINISTRATION_DECLINED",
          "TRANSFER_SERVICE_ACCOUNT_ADMINISTRATION_REQUESTED",
          "UPDATE_GROUP_MEMBERSHIP_ACCEPTED",
          "UPDATE_GROUP_MEMBERSHIP_DECLINED",
          "UPDATE_GROUP_MEMBERSHIP_REQUESTED",
          "UPDATE_LICENSE_ACCEPTED",
          "UPDATE_LICENSE_DECLINED",
          "UPDATE_LICENSE_REQUESTED",
          "VAULT_ACCESS_RESTORED",
          "VAULT_EXPORTED",
          "VAULT_PERSONAL_RESET",
          "VAULT_PERSONAL_SETUP",
          "VAULT_RECORD_CREATED",
          "VAULT_RECORD_MODIFIED",
          "VAULT_RECORD_MOVED_COPIED_SHARED",
          "VAULT_RECORD_READ",
          "VAULT_RECORD_REMOVED",
          "VAULT_RECOVERED",
          "VERIFY_INTERNAL_ACCOUNT_ACCEPTED",
          "VERIFY_INTERNAL_ACCOUNT_DECLINED",
          "VERIFY_INTERNAL_ACCOUNT_REQUESTED",
          "WEBHOOK_CREATED",
          "WEBHOOK_MODIFIED",
          "WEBHOOK_REMOVED"
        ]
      },
      "audit.AuditRequiredSourceType": {
        "type": "string",
        "enum": [
          "CONFORM",
          "PERIODIC",
          "REQUESTED"
        ]
      },
      "audit.GroupAudit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "GroupAudit",
            "required": [
              "$type",
              "status"
            ],
            "type": "object",
            "properties": {
              "createdBy": {
                "type": "string",
                "readOnly": true
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "submittedBy": {
                "type": "string",
                "readOnly": true
              },
              "submittedAt": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "reviewedBy": {
                "type": "string",
                "readOnly": true
              },
              "reviewedAt": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "groupName": {
                "type": "string",
                "readOnly": true
              },
              "status": {
                "$ref": "#/components/schemas/audit.GroupAuditStatus"
              },
              "nameOnAudit": {
                "type": "string",
                "readOnly": true
              },
              "comment": {
                "type": "string"
              },
              "accounts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/audit.GroupAuditAccount"
                }
              },
              "nestedGroups": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/audit.NestedGroupAudit"
                }
              },
              "$type": {
                "type": "string",
                "default": "audit.GroupAudit"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "audit.GroupAudit": true,
              "audit.GroupAuditAccount": true,
              "audit.NestedGroupAudit": true
            },
            "x-tkh-discriminator": "audit.GroupAudit"
          }
        ]
      },
      "audit.GroupAuditAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "GroupAuditAccount",
            "required": [
              "$type",
              "accountValid",
              "disconnectedNested",
              "nested",
              "newMember"
            ],
            "type": "object",
            "properties": {
              "accountUuid": {
                "type": "string"
              },
              "username": {
                "type": "string",
                "readOnly": true
              },
              "displayName": {
                "type": "string",
                "readOnly": true
              },
              "lastUsed": {
                "type": "string",
                "format": "date",
                "readOnly": true
              },
              "lastActive": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "rights": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupRights"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "endDate": {
                "type": "string",
                "format": "date",
                "readOnly": true
              },
              "action": {
                "$ref": "#/components/schemas/audit.AuditAccountAction"
              },
              "comment": {
                "type": "string"
              },
              "accountValid": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "nested": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "disconnectedNested": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "audit.GroupAuditAccount"
              }
            },
            "x-tkh-discriminator": "audit.GroupAuditAccount"
          }
        ]
      },
      "audit.GroupAuditLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/audit.GroupAudit"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "audit.GroupAuditStatus": {
        "type": "string",
        "enum": [
          "NEW",
          "DRAFT",
          "UNDER_REVIEW",
          "FINAL"
        ]
      },
      "audit.NestedGroupAudit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "NestedGroupAudit",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "groupUuid": {
                "type": "string"
              },
              "name": {
                "type": "string",
                "readOnly": true
              },
              "action": {
                "$ref": "#/components/schemas/audit.AuditNestedGroupAction"
              },
              "comment": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "audit.NestedGroupAudit"
              }
            },
            "x-tkh-discriminator": "audit.NestedGroupAudit"
          }
        ]
      },
      "auth.Account": {
        "allOf": [
          {
            "$ref": "#/components/schemas/auth.AccountPrimer"
          },
          {
            "title": "Account",
            "required": [
              "$type",
              "active",
              "canRequestGroups",
              "directoryPasswordChangeRequired",
              "keyHubPasswordChangeRequired",
              "reregistrationRequired",
              "tokenPasswordEnabled",
              "validInDirectory"
            ],
            "type": "object",
            "properties": {
              "active": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "reregistrationRequired": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "validInDirectory": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "canRequestGroups": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "tokenPasswordEnabled": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "keyHubPasswordChangeRequired": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "directoryPasswordChangeRequired": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "idInDirectory": {
                "type": "string",
                "readOnly": true
              },
              "email": {
                "type": "string",
                "readOnly": true
              },
              "accountPermissions": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/auth.Permission"
                }
              },
              "directoryType": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/directory.AccountDirectoryType"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "directoryName": {
                "type": "string",
                "readOnly": true
              },
              "directoryRotatingPassword": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/directory.DirectoryRotatingPassword"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "locale": {
                "type": "string",
                "readOnly": true
              },
              "lastModifiedAt": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "directory": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/directory.AccountDirectoryPrimer"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "twoFactorStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/auth.TwoFactorAuthenticationStatus"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "licenseRole": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/auth.AccountLicenseRole"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "identity": {
                "$ref": "#/components/schemas/identity.Identity"
              },
              "$type": {
                "type": "string",
                "default": "auth.Account"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "groups": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.AccountGroupLinkableWrapperWithCount"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "activeLogin": {
                    "type": "boolean",
                    "readOnly": true
                  },
                  "vault": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/vault.Vault"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "storedAttributes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/auth.StoredAccountAttributes"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "pendingRecoveryRequests": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/auth.AccountRecoveryStatus"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "settings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/auth.AccountSettings"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "auth.Account": "#/components/schemas/auth.Account",
                "auth.InternalAccount": "#/components/schemas/auth.InternalAccount"
              }
            },
            "x-tkh-discriminator": "auth.Account"
          }
        ]
      },
      "auth.AccountBulkUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AccountBulkUpdate",
            "required": [
              "$type",
              "action",
              "exclusiveSelection",
              "selectedAccounts"
            ],
            "type": "object",
            "properties": {
              "action": {
                "$ref": "#/components/schemas/auth.AccountBulkUpdateAction"
              },
              "selectedAccounts": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "exclusiveSelection": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "auth.AccountBulkUpdate"
              }
            },
            "x-tkh-discriminator": "auth.AccountBulkUpdate"
          }
        ]
      },
      "auth.AccountBulkUpdateAction": {
        "type": "string",
        "enum": [
          "CHANGE_LICENSE_ROLE_TO_PRO",
          "CHANGE_LICENSE_ROLE_TO_BUSINESS",
          "CHANGE_LICENSE_ROLE_TO_IGA",
          "MARK_FOR_RENAME"
        ]
      },
      "auth.AccountChangeLocale": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AccountChangeLocale",
            "required": [
              "$type",
              "locale"
            ],
            "type": "object",
            "properties": {
              "locale": {
                "maxLength": 31,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "auth.AccountChangeLocale"
              }
            },
            "x-tkh-discriminator": "auth.AccountChangeLocale"
          }
        ]
      },
      "auth.AccountLicenseRole": {
        "type": "string",
        "enum": [
          "IGA",
          "BUSINESS",
          "PRO"
        ]
      },
      "auth.AccountLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/auth.Account"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "auth.AccountPrimer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "AccountPrimer",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "validity": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/auth.AccountValidity"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "uuid": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "username": {
                "type": "string",
                "readOnly": true
              },
              "displayName": {
                "type": "string",
                "readOnly": true
              },
              "lastActive": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "$type": {
                "type": "string",
                "default": "auth.AccountPrimer"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "auth.Account": "#/components/schemas/auth.Account",
                "auth.AccountPrimer": "#/components/schemas/auth.AccountPrimer",
                "auth.InternalAccount": "#/components/schemas/auth.InternalAccount",
                "group.GroupAccount": "#/components/schemas/group.GroupAccount",
                "organization.OrganizationalUnitAccount": "#/components/schemas/organization.OrganizationalUnitAccount",
                "profile.AccessProfileAccount": "#/components/schemas/profile.AccessProfileAccount",
                "profile.AccessProfileAccountWithAttributes": "#/components/schemas/profile.AccessProfileAccountWithAttributes",
                "provisioning.ProvisionedAccount": "#/components/schemas/provisioning.ProvisionedAccount"
              }
            },
            "x-tkh-discriminator": "auth.AccountPrimer"
          }
        ]
      },
      "auth.AccountRecoveryStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AccountRecoveryStatus",
            "required": [
              "$type",
              "pending2FARecoveryRequest",
              "pendingPasswordRecoveryRequest"
            ],
            "type": "object",
            "properties": {
              "pendingPasswordRecoveryRequest": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "pending2FARecoveryRequest": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "auth.AccountRecoveryStatus"
              }
            },
            "x-tkh-discriminator": "auth.AccountRecoveryStatus"
          }
        ]
      },
      "auth.AccountSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AccountSettings",
            "required": [
              "$type",
              "inGroups",
              "inMultipleOrganizationalUnits",
              "keyHubAdmin",
              "multipleOrganizationalUnitsExist",
              "useTokenPassword"
            ],
            "type": "object",
            "properties": {
              "twoFactorAuthentication": {
                "$ref": "#/components/schemas/auth.TwoFactorAuthenticationStatus"
              },
              "inGroups": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "vaultStatus": {
                "$ref": "#/components/schemas/vault.AccountVaultStatus"
              },
              "passwordMode": {
                "$ref": "#/components/schemas/auth.PasswordMode"
              },
              "useTokenPassword": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "sshPublicKey": {
                "type": "string"
              },
              "keyHubAdmin": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "directoryType": {
                "$ref": "#/components/schemas/directory.AccountDirectoryType"
              },
              "directoryName": {
                "type": "string"
              },
              "inMultipleOrganizationalUnits": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "multipleOrganizationalUnitsExist": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "defaultOrganizationalUnit": {
                "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
              },
              "$type": {
                "type": "string",
                "default": "auth.AccountSettings"
              }
            },
            "x-tkh-discriminator": "auth.AccountSettings"
          }
        ]
      },
      "auth.AccountStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AccountStatus",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "accountEnabled": {
                "type": "boolean"
              },
              "twoFactorAuthenticationEnabled": {
                "type": "boolean"
              },
              "canRequestGroups": {
                "type": "boolean"
              },
              "reregistrationRequired": {
                "type": "boolean"
              },
              "declineRecoveryRequests": {
                "type": "boolean"
              },
              "licenseRole": {
                "$ref": "#/components/schemas/auth.AccountLicenseRole"
              },
              "$type": {
                "type": "string",
                "default": "auth.AccountStatus"
              }
            },
            "x-tkh-discriminator": "auth.AccountStatus"
          }
        ]
      },
      "auth.AccountValidity": {
        "type": "string",
        "enum": [
          "VALID",
          "NOT_APPLICABLE",
          "REREGISTRATION_REQUIRED",
          "DISABLED",
          "DIRECTORY_DISABLED",
          "INVALID_IN_DIRECTORY"
        ]
      },
      "auth.AccountsAuditStats": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AccountsAuditStats",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "validityStats": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "directoryStats": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "twoFAStats": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "$type": {
                "type": "string",
                "default": "auth.AccountsAuditStats"
              }
            },
            "x-tkh-discriminator": "auth.AccountsAuditStats"
          }
        ]
      },
      "auth.InternalAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/auth.Account"
          },
          {
            "title": "InternalAccount",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "activationDeadline": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "activationCode": {
                "type": "string",
                "readOnly": true
              },
              "status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/auth.InternalAccountStatus"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "company": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "auth.InternalAccount"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string",
                    "writeOnly": true
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "auth.Account": false,
              "auth.AccountPrimer": false,
              "auth.InternalAccount": true
            },
            "x-tkh-discriminator": "auth.InternalAccount"
          }
        ]
      },
      "auth.InternalAccountLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/auth.InternalAccount"
            }
          }
        }
      },
      "auth.InternalAccountStatus": {
        "type": "string",
        "enum": [
          "UNVERIFIED",
          "NOT_ACTIVATED",
          "ACTIVATION_NOT_SENT",
          "ACTIVATION_EXPIRED",
          "ACTIVATED"
        ]
      },
      "auth.InternalAccountStatusObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "InternalAccountStatusObject",
            "required": [
              "$type",
              "status"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/auth.InternalAccountStatus"
              },
              "$type": {
                "type": "string",
                "default": "auth.InternalAccountStatusObject"
              }
            },
            "x-tkh-discriminator": "auth.InternalAccountStatusObject"
          }
        ]
      },
      "auth.MoveInternalAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "MoveInternalAccount",
            "required": [
              "$type",
              "internalDirectory"
            ],
            "type": "object",
            "properties": {
              "internalDirectory": {
                "$ref": "#/components/schemas/directory.InternalDirectory"
              },
              "$type": {
                "type": "string",
                "default": "auth.MoveInternalAccount"
              }
            },
            "x-tkh-discriminator": "auth.MoveInternalAccount"
          }
        ]
      },
      "auth.PasswordMode": {
        "type": "string",
        "enum": [
          "UNSET",
          "ONE_PASSWORD_UNSYNCED",
          "ONE_PASSWORD",
          "TWO_PASSWORDS"
        ]
      },
      "auth.Permission": {
        "type": "object",
        "properties": {
          "full": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "operations": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/auth.PermittedOperation"
            }
          },
          "instances": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "auth.PermittedOperation": {
        "type": "string",
        "enum": [
          "CREATE",
          "READ",
          "UPDATE",
          "DELETE"
        ]
      },
      "auth.SecurityLevel": {
        "type": "string",
        "enum": [
          "LOW",
          "MEDIUM",
          "HIGH"
        ]
      },
      "auth.StoredAccountAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "StoredAccountAttribute",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "auth.StoredAccountAttribute"
              }
            },
            "x-tkh-discriminator": "auth.StoredAccountAttribute"
          }
        ]
      },
      "auth.StoredAccountAttributes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "StoredAccountAttributes",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/auth.StoredAccountAttribute"
                }
              },
              "$type": {
                "type": "string",
                "default": "auth.StoredAccountAttributes"
              }
            },
            "x-tkh-discriminator": "auth.StoredAccountAttributes"
          }
        ]
      },
      "auth.StoredUserSession": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "StoredUserSession",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              },
              "ipAddress": {
                "type": "string"
              },
              "userAgent": {
                "type": "string"
              },
              "loginDate": {
                "type": "string",
                "format": "date-time"
              },
              "lastUsed": {
                "type": "string",
                "format": "date-time"
              },
              "location": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "auth.StoredUserSession"
              }
            },
            "x-tkh-discriminator": "auth.StoredUserSession"
          }
        ]
      },
      "auth.StoredUserSessionLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/auth.StoredUserSession"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "auth.TwoFactorAuthenticationStatus": {
        "type": "string",
        "enum": [
          "DISABLED",
          "EXTERNAL",
          "TOTP",
          "APP",
          "WEBAUTHN",
          "MIXED"
        ]
      },
      "auth.WebAuthnKey": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "WebAuthnKey",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "keyId": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "publicKey": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "displayName": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "prfSupport": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/auth.WebAuthnPRFSupported"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "auth.WebAuthnKey"
              }
            },
            "x-tkh-writescope": {
              "auth.WebAuthnKey": true
            },
            "x-tkh-discriminator": "auth.WebAuthnKey"
          }
        ]
      },
      "auth.WebAuthnPRFSupported": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "SUPPORTED_NOT_LINKED",
          "SUPPORTED",
          "NOT_SUPPORTED"
        ]
      },
      "certificate.Certificate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/certificate.CertificatePrimer"
          },
          {
            "title": "Certificate",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "keyData": {
                "type": "string",
                "format": "byte",
                "x-tkh-sensitive": true
              },
              "$type": {
                "type": "string",
                "default": "certificate.Certificate"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "certificate.Certificate": true,
              "certificate.CertificatePrimer": true
            },
            "x-tkh-discriminator": "certificate.Certificate"
          }
        ]
      },
      "certificate.CertificateLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/certificate.Certificate"
            }
          }
        }
      },
      "certificate.CertificatePrimer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "CertificatePrimer",
            "required": [
              "$type",
              "global"
            ],
            "type": "object",
            "properties": {
              "type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/certificate.CertificateType"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "uuid": {
                "maxLength": 36,
                "minLength": 0,
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "global": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "alias": {
                "maxLength": 128,
                "minLength": 0,
                "type": "string"
              },
              "subjectDN": {
                "type": "string",
                "readOnly": true
              },
              "fingerprintSha1": {
                "type": "string",
                "readOnly": true
              },
              "fingerprintSha256": {
                "type": "string",
                "readOnly": true
              },
              "certificateData": {
                "type": "string",
                "format": "byte"
              },
              "expiration": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "$type": {
                "type": "string",
                "default": "certificate.CertificatePrimer"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "certificate.Certificate": "#/components/schemas/certificate.Certificate",
                "certificate.CertificatePrimer": "#/components/schemas/certificate.CertificatePrimer"
              }
            },
            "x-tkh-discriminator": "certificate.CertificatePrimer"
          }
        ]
      },
      "certificate.CertificateType": {
        "type": "string",
        "enum": [
          "PUBLIC_CERTIFICATE",
          "PRIVATE_KEY_PAIR"
        ]
      },
      "client.ClientApplication": {
        "allOf": [
          {
            "$ref": "#/components/schemas/client.ClientApplicationPrimer"
          },
          {
            "title": "ClientApplication",
            "required": [
              "$type",
              "name"
            ],
            "type": "object",
            "properties": {
              "lastModifiedAt": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "owner": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true,
                    "x-tkh-backend-determines-default": true
                  }
                ]
              },
              "technicalAdministrator": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true,
                    "x-tkh-backend-determines-default": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "client.ClientApplication"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "secret": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GeneratedSecret"
                      },
                      {
                        "x-tkh-backend-determines-default": true
                      }
                    ]
                  },
                  "groups": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "organizationalUnits": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/organization.ClientApplicationOrganizationalUnitLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "groupclients": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupClientLinkableWrapperWithCount"
                      },
                      {
                        "x-tkh-create-only": true
                      }
                    ]
                  },
                  "accessprofileclients": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/profile.AccessProfileClientLinkableWrapperWithCount"
                      },
                      {
                        "x-tkh-create-only": true
                      }
                    ]
                  },
                  "vaultRecordCount": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "tile": {
                    "$ref": "#/components/schemas/launchpad.SsoApplicationLaunchpadTile"
                  },
                  "deleteTile": {
                    "type": "boolean",
                    "writeOnly": true
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "client.ClientApplication": "#/components/schemas/client.ClientApplication",
                "client.LdapClient": "#/components/schemas/client.LdapClient",
                "client.OAuth2Client": "#/components/schemas/client.OAuth2Client",
                "client.Saml2Client": "#/components/schemas/client.Saml2Client"
              }
            },
            "x-tkh-discriminator": "client.ClientApplication"
          }
        ]
      },
      "client.ClientApplicationLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/client.ClientApplication"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "client.ClientApplicationPrimer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "ClientApplicationPrimer",
            "required": [
              "$type",
              "name",
              "ssoApplication"
            ],
            "type": "object",
            "properties": {
              "uuid": {
                "maxLength": 36,
                "minLength": 0,
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "clientId": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "x-tkh-backend-determines-default": true
              },
              "type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/client.ClientApplicationType"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "name": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "scopes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-tkh-backend-determines-default": true
              },
              "ssoApplication": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false,
                "x-tkh-immutable": true
              },
              "$type": {
                "type": "string",
                "default": "client.ClientApplicationPrimer"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "client.ClientApplication": "#/components/schemas/client.ClientApplication",
                "client.ClientApplicationPrimer": "#/components/schemas/client.ClientApplicationPrimer",
                "client.LdapClient": "#/components/schemas/client.LdapClient",
                "client.OAuth2Client": "#/components/schemas/client.OAuth2Client",
                "client.Saml2Client": "#/components/schemas/client.Saml2Client",
                "organization.OrganizationalUnitClientApplication": "#/components/schemas/organization.OrganizationalUnitClientApplication"
              }
            },
            "x-tkh-discriminator": "client.ClientApplicationPrimer"
          }
        ]
      },
      "client.ClientApplicationType": {
        "type": "string",
        "enum": [
          "OAUTH2",
          "SAML2",
          "LDAP"
        ]
      },
      "client.ClientConsent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "ClientConsent",
            "required": [
              "$type",
              "client",
              "identifier"
            ],
            "type": "object",
            "properties": {
              "client": {
                "$ref": "#/components/schemas/client.ClientApplicationPrimer"
              },
              "allowedScopes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "identifier": {
                "minLength": 1,
                "type": "string",
                "readOnly": true,
                "x-tkh-default": "UNSET",
                "x-tkh-immutable": true
              },
              "$type": {
                "type": "string",
                "default": "client.ClientConsent"
              }
            },
            "x-tkh-writescope": {
              "client.ClientConsent": true
            },
            "x-tkh-discriminator": "client.ClientConsent"
          }
        ]
      },
      "client.LdapClient": {
        "allOf": [
          {
            "$ref": "#/components/schemas/client.ClientApplication"
          },
          {
            "title": "LdapClient",
            "required": [
              "$type",
              "name",
              "shareSecretInVault",
              "usedForProvisioning"
            ],
            "type": "object",
            "properties": {
              "bindDn": {
                "type": "string",
                "readOnly": true
              },
              "clientCertificate": {
                "$ref": "#/components/schemas/certificate.CertificatePrimer"
              },
              "shareSecretInVault": {
                "type": "boolean",
                "x-tkh-default": true
              },
              "usedForProvisioning": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "sharedSecret": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vault.VaultRecordPrimer"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "client.LdapClient"
              }
            },
            "x-tkh-writescope": {
              "client.ClientApplication": true,
              "client.ClientApplicationPrimer": true,
              "client.LdapClient": true
            },
            "x-tkh-discriminator": "client.LdapClient"
          }
        ]
      },
      "client.OAuth2Client": {
        "allOf": [
          {
            "$ref": "#/components/schemas/client.ClientApplication"
          },
          {
            "title": "OAuth2Client",
            "required": [
              "$type",
              "debugMode",
              "forIdentitySource",
              "name",
              "profile",
              "shareSecretInVault",
              "showLandingPage",
              "useClientCredentials"
            ],
            "type": "object",
            "properties": {
              "callbackURI": {
                "type": "string"
              },
              "initiateLoginURI": {
                "type": "string"
              },
              "showLandingPage": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "debugMode": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "useClientCredentials": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "profile": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/client.OAuth2ClientProfile"
                  },
                  {
                    "x-tkh-default": "WEB_APPLICATION"
                  }
                ]
              },
              "accountPermissions": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/auth.Permission"
                }
              },
              "attributes": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "idTokenClaims": {
                "maxLength": 512,
                "minLength": 0,
                "type": "string"
              },
              "resourceURIs": {
                "type": "string"
              },
              "shareSecretInVault": {
                "type": "boolean",
                "x-tkh-default": true
              },
              "sharedSecret": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vault.VaultRecordPrimer"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "forIdentitySource": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "client.OAuth2Client"
              }
            },
            "x-tkh-writescope": {
              "client.ClientApplication": true,
              "client.ClientApplicationPrimer": true,
              "client.OAuth2Client": true
            },
            "x-tkh-discriminator": "client.OAuth2Client"
          }
        ]
      },
      "client.OAuth2ClientPermission": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "OAuth2ClientPermission",
            "required": [
              "$type",
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "$ref": "#/components/schemas/client.OAuth2ClientPermissionType"
              },
              "forSystem": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.ProvisionedSystemPrimer"
                  },
                  {
                    "x-tkh-backend-determines-default": true
                  }
                ]
              },
              "forGroup": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-backend-determines-default": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "client.OAuth2ClientPermission"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "client.OAuth2ClientPermission": "#/components/schemas/client.OAuth2ClientPermission",
                "client.OAuth2ClientPermissionWithClient": "#/components/schemas/client.OAuth2ClientPermissionWithClient"
              }
            },
            "x-tkh-writescope": {
              "client.OAuth2ClientPermission": true
            },
            "x-tkh-discriminator": "client.OAuth2ClientPermission"
          }
        ]
      },
      "client.OAuth2ClientPermissionLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/client.OAuth2ClientPermission"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "client.OAuth2ClientPermissionType": {
        "type": "string",
        "enum": [
          "ACCOUNTS_CREATE",
          "ACCOUNTS_QUERY",
          "ACCOUNTS_REMOVE",
          "CLIENTS_CREATE",
          "CLIENTS_QUERY",
          "GROUPONSYSTEM_CREATE",
          "GROUPS_CREATE",
          "GROUPS_GRANT_PERMISSIONS_AFTER_CREATE",
          "GROUPS_QUERY",
          "GROUPS_SET_CLASSIFICATION",
          "GROUP_FULL_VAULT_ACCESS",
          "GROUP_LAUNCHPADTILES",
          "GROUP_READ_CONTENTS",
          "GROUP_SET_AUTHORIZATION",
          "PROVISIONEDSYSTEMS_QUERY",
          "SERVICE_ACCOUNTS_CREATE",
          "SERVICE_ACCOUNTS_QUERY",
          "SERVICE_ACCOUNTS_UPDATE"
        ]
      },
      "client.OAuth2ClientPermissionWithClient": {
        "allOf": [
          {
            "$ref": "#/components/schemas/client.OAuth2ClientPermission"
          },
          {
            "title": "OAuth2ClientPermissionWithClient",
            "required": [
              "$type",
              "value"
            ],
            "type": "object",
            "properties": {
              "client": {
                "$ref": "#/components/schemas/client.OAuth2Client"
              },
              "$type": {
                "type": "string",
                "default": "client.OAuth2ClientPermissionWithClient"
              }
            },
            "x-tkh-writescope": {
              "client.OAuth2ClientPermission": true
            },
            "x-tkh-discriminator": "client.OAuth2ClientPermissionWithClient"
          }
        ]
      },
      "client.OAuth2ClientPermissionWithClientLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/client.OAuth2ClientPermissionWithClient"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "client.OAuth2ClientProfile": {
        "type": "string",
        "enum": [
          "SERVER_TO_SERVER",
          "WEB_APPLICATION",
          "BROWSER_BASED_APPLICATION",
          "BROWSER_BASED_APPLICATION_WITH_REFRESH_TOKEN",
          "PUBLIC_NATIVE_APPLICATION",
          "PUBLIC_NATIVE_APPLICATION_WITH_SECURE_STORAGE",
          "CONFIDENTIAL_NATIVE_APPLICATION"
        ]
      },
      "client.Saml2Client": {
        "allOf": [
          {
            "$ref": "#/components/schemas/client.ClientApplication"
          },
          {
            "title": "Saml2Client",
            "required": [
              "$type",
              "name",
              "subjectFormat"
            ],
            "type": "object",
            "properties": {
              "metadataUrl": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "metadata": {
                "type": "string"
              },
              "subjectFormat": {
                "$ref": "#/components/schemas/client.SubjectFormat"
              },
              "attributes": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "$type": {
                "type": "string",
                "default": "client.Saml2Client"
              }
            },
            "x-tkh-writescope": {
              "client.ClientApplication": true,
              "client.ClientApplicationPrimer": true,
              "client.Saml2Client": true
            },
            "x-tkh-discriminator": "client.Saml2Client"
          }
        ]
      },
      "client.SubjectFormat": {
        "type": "string",
        "enum": [
          "ID",
          "UPN",
          "USERNAME",
          "EMAIL"
        ]
      },
      "directory.AccountDirectory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/directory.AccountDirectoryPrimer"
          },
          {
            "title": "AccountDirectory",
            "required": [
              "$type",
              "baseOrganizationalUnit",
              "defaultDirectory",
              "name",
              "restrict2fa",
              "rotatingPassword",
              "usernameCustomizable"
            ],
            "type": "object",
            "properties": {
              "defaultDirectory": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "usernameCustomizable": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "rotatingPassword": {
                "$ref": "#/components/schemas/directory.DirectoryRotatingPassword"
              },
              "helpdeskGroup": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "restrict2fa": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "baseOrganizationalUnit": {
                "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
              },
              "$type": {
                "type": "string",
                "default": "directory.AccountDirectory"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "status": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/directory.AccountDirectoryStatusReport"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "markers": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/mark.ItemMarkers"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "directory.AccountDirectory": "#/components/schemas/directory.AccountDirectory",
                "directory.InternalDirectory": "#/components/schemas/directory.InternalDirectory",
                "directory.LDAPDirectory": "#/components/schemas/directory.LDAPDirectory",
                "directory.MaintenanceDirectory": "#/components/schemas/directory.MaintenanceDirectory",
                "directory.OIDCDirectory": "#/components/schemas/directory.OIDCDirectory",
                "directory.PendingAccountsDirectory": "#/components/schemas/directory.PendingAccountsDirectory"
              }
            },
            "x-tkh-discriminator": "directory.AccountDirectory"
          }
        ]
      },
      "directory.AccountDirectoryLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/directory.AccountDirectory"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "directory.AccountDirectoryPrimer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "AccountDirectoryPrimer",
            "required": [
              "$type",
              "accountValiditySupported",
              "active",
              "name"
            ],
            "type": "object",
            "properties": {
              "active": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "uuid": {
                "maxLength": 36,
                "minLength": 0,
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "name": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/directory.AccountDirectoryType"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "accountValiditySupported": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": true,
                "x-tkh-immutable": true
              },
              "$type": {
                "type": "string",
                "default": "directory.AccountDirectoryPrimer"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "directory.AccountDirectory": "#/components/schemas/directory.AccountDirectory",
                "directory.AccountDirectoryPrimer": "#/components/schemas/directory.AccountDirectoryPrimer",
                "directory.InternalDirectory": "#/components/schemas/directory.InternalDirectory",
                "directory.LDAPDirectory": "#/components/schemas/directory.LDAPDirectory",
                "directory.MaintenanceDirectory": "#/components/schemas/directory.MaintenanceDirectory",
                "directory.OIDCDirectory": "#/components/schemas/directory.OIDCDirectory",
                "directory.PendingAccountsDirectory": "#/components/schemas/directory.PendingAccountsDirectory"
              }
            },
            "x-tkh-discriminator": "directory.AccountDirectoryPrimer"
          }
        ]
      },
      "directory.AccountDirectoryStatus": {
        "type": "string",
        "enum": [
          "INIT_REQUIRED",
          "ONLINE",
          "DEGRADED",
          "NON_REDUNDANT",
          "OFFLINE",
          "DISABLED"
        ]
      },
      "directory.AccountDirectoryStatusReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AccountDirectoryStatusReport",
            "required": [
              "$type",
              "accounts"
            ],
            "type": "object",
            "properties": {
              "status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/directory.AccountDirectoryStatus"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "reason": {
                "type": "string",
                "readOnly": true
              },
              "accounts": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "$type": {
                "type": "string",
                "default": "directory.AccountDirectoryStatusReport"
              }
            },
            "x-tkh-discriminator": "directory.AccountDirectoryStatusReport"
          }
        ]
      },
      "directory.AccountDirectorySummary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "AccountDirectorySummary",
            "required": [
              "$type",
              "usernameCustomizable"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "usernameCustomizable": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "status": {
                "$ref": "#/components/schemas/directory.AccountDirectoryStatusReport"
              },
              "type": {
                "$ref": "#/components/schemas/directory.AccountDirectoryType"
              },
              "fullyResolvedIssuer": {
                "type": "string"
              },
              "domainRestriction": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "directory.AccountDirectorySummary"
              }
            },
            "x-tkh-discriminator": "directory.AccountDirectorySummary"
          }
        ]
      },
      "directory.AccountDirectorySummaryLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/directory.AccountDirectorySummary"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "directory.AccountDirectoryType": {
        "type": "string",
        "enum": [
          "MAINTENANCE",
          "LDAP",
          "INTERNAL",
          "OIDC",
          "PENDING_ACCOUNTS"
        ]
      },
      "directory.DirectoryRotatingPassword": {
        "type": "string",
        "enum": [
          "DEFAULT_OFF",
          "DEFAULT_ON",
          "ALWAYS_ON"
        ]
      },
      "directory.InternalDirectory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/directory.AccountDirectory"
          },
          {
            "title": "InternalDirectory",
            "required": [
              "$type",
              "baseOrganizationalUnit",
              "name",
              "owner",
              "rotatingPassword"
            ],
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "$type": {
                "type": "string",
                "default": "directory.InternalDirectory"
              }
            },
            "x-tkh-writescope": {
              "directory.AccountDirectory": true,
              "directory.AccountDirectoryPrimer": true,
              "directory.InternalDirectory": true
            },
            "x-tkh-discriminator": "directory.InternalDirectory"
          }
        ]
      },
      "directory.LDAPDialect": {
        "type": "string",
        "enum": [
          "ACTIVE_DIRECTORY",
          "OPENLDAP"
        ]
      },
      "directory.LDAPDirectory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/directory.AccountDirectory"
          },
          {
            "title": "LDAPDirectory",
            "required": [
              "$type",
              "baseDN",
              "baseOrganizationalUnit",
              "dialect",
              "host",
              "name",
              "passwordRecovery",
              "port",
              "rotatingPassword",
              "tls"
            ],
            "type": "object",
            "properties": {
              "dialect": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/directory.LDAPDialect"
                  },
                  {
                    "x-tkh-default": "ACTIVE_DIRECTORY"
                  }
                ]
              },
              "host": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "port": {
                "type": "integer",
                "format": "int32",
                "x-tkh-default": 0
              },
              "failoverHost": {
                "type": "string"
              },
              "tls": {
                "$ref": "#/components/schemas/TLSLevel"
              },
              "baseDN": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "searchBindDN": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "searchBindPassword": {
                "maxLength": 128,
                "minLength": 0,
                "type": "string",
                "x-tkh-sensitive": true
              },
              "searchFilter": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "passwordRecovery": {
                "$ref": "#/components/schemas/directory.LDAPDirectoryPasswordRecovery"
              },
              "trustedCertificate": {
                "$ref": "#/components/schemas/certificate.CertificatePrimer"
              },
              "failoverTrustedCertificate": {
                "$ref": "#/components/schemas/certificate.CertificatePrimer"
              },
              "clientCertificate": {
                "$ref": "#/components/schemas/certificate.CertificatePrimer"
              },
              "attributesToStore": {
                "maxLength": 512,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "directory.LDAPDirectory"
              }
            },
            "x-tkh-writescope": {
              "directory.AccountDirectory": true,
              "directory.AccountDirectoryPrimer": true,
              "directory.LDAPDirectory": true
            },
            "x-tkh-discriminator": "directory.LDAPDirectory"
          }
        ]
      },
      "directory.LDAPDirectoryPasswordRecovery": {
        "type": "string",
        "enum": [
          "DISABLED",
          "VERIFY_2FA",
          "VERIFY_MAIL",
          "VERIFY_MAIL_AND_2FA"
        ]
      },
      "directory.MaintenanceDirectory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/directory.AccountDirectory"
          },
          {
            "title": "MaintenanceDirectory",
            "required": [
              "$type",
              "baseOrganizationalUnit",
              "name",
              "rotatingPassword"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "directory.MaintenanceDirectory"
              }
            },
            "x-tkh-discriminator": "directory.MaintenanceDirectory"
          }
        ]
      },
      "directory.OIDCDirectory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/directory.AccountDirectory"
          },
          {
            "title": "OIDCDirectory",
            "required": [
              "$type",
              "baseOrganizationalUnit",
              "clientId",
              "clientSecret",
              "enforces2fa",
              "issuer",
              "name",
              "rotatingPassword",
              "sendLoginHint",
              "vendor"
            ],
            "type": "object",
            "properties": {
              "issuer": {
                "maxLength": 512,
                "minLength": 0,
                "type": "string"
              },
              "clientId": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "clientSecret": {
                "minLength": 1,
                "type": "string",
                "x-tkh-sensitive": true
              },
              "enforces2fa": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "vendor": {
                "$ref": "#/components/schemas/directory.OIDCVendor"
              },
              "domainRestriction": {
                "maxLength": 512,
                "minLength": 0,
                "type": "string"
              },
              "logoutUrl": {
                "maxLength": 512,
                "minLength": 0,
                "type": "string"
              },
              "acrValues": {
                "maxLength": 512,
                "minLength": 0,
                "type": "string"
              },
              "sendLoginHint": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "fullyResolvedIssuer": {
                "maxLength": 1024,
                "minLength": 0,
                "type": "string",
                "readOnly": true
              },
              "attributesToStore": {
                "maxLength": 512,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "directory.OIDCDirectory"
              }
            },
            "x-tkh-writescope": {
              "directory.AccountDirectory": true,
              "directory.AccountDirectoryPrimer": true,
              "directory.OIDCDirectory": true
            },
            "x-tkh-discriminator": "directory.OIDCDirectory"
          }
        ]
      },
      "directory.OIDCVendor": {
        "type": "string",
        "enum": [
          "GENERIC",
          "GOOGLE",
          "AZURE_AD"
        ]
      },
      "directory.PendingAccountsDirectory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/directory.AccountDirectory"
          },
          {
            "title": "PendingAccountsDirectory",
            "required": [
              "$type",
              "baseOrganizationalUnit",
              "name",
              "rotatingPassword"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "directory.PendingAccountsDirectory"
              }
            },
            "x-tkh-discriminator": "directory.PendingAccountsDirectory"
          }
        ]
      },
      "group.AccountGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/group.GroupPrimer"
          },
          {
            "title": "AccountGroup",
            "required": [
              "$type",
              "name",
              "rights",
              "visibleForProvisioning"
            ],
            "type": "object",
            "properties": {
              "rights": {
                "$ref": "#/components/schemas/group.GroupRights"
              },
              "endDate": {
                "type": "string",
                "format": "date"
              },
              "provisioningEndTime": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "visibleForProvisioning": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": true
              },
              "folder": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupFolder"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "lastUsed": {
                "type": "string",
                "format": "date",
                "readOnly": true
              },
              "$type": {
                "type": "string",
                "default": "group.AccountGroup"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "vault": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/vault.Vault"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "group.AccountGroup": true,
              "group.GroupPrimer": false
            },
            "x-tkh-discriminator": "group.AccountGroup"
          }
        ]
      },
      "group.AccountGroupLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group.AccountGroup"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "group.AccountGroupLinkableWrapperWithCount": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group.AccountGroup"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          }
        },
        "x-tkh-discriminator": "LinkableWrapperWithCount"
      },
      "group.Group": {
        "allOf": [
          {
            "$ref": "#/components/schemas/group.GroupPrimer"
          },
          {
            "title": "Group",
            "required": [
              "$type",
              "applicationAdministration",
              "auditRequested",
              "extendedAccess",
              "hideAuditTrail",
              "name",
              "privateGroup",
              "profileAdministration",
              "recordTrail",
              "rotatingPasswordRequired",
              "singleManaged",
              "vaultRecovery",
              "vaultRequiresActivation"
            ],
            "type": "object",
            "properties": {
              "applicationAdministration": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "profileAdministration": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "singleManaged": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "auditRequested": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "rotatingPasswordRequired": {
                "type": "boolean",
                "x-tkh-default": false,
                "x-tkh-backend-determines-default": true
              },
              "extendedAccess": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupExtendedAccess"
                  },
                  {
                    "x-tkh-default": "NOT_ALLOWED"
                  }
                ]
              },
              "recordTrail": {
                "type": "boolean",
                "x-tkh-default": false,
                "x-tkh-backend-determines-default": true
              },
              "authorizingGroupProvisioning": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true
                  }
                ]
              },
              "authorizingGroupMembership": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true
                  }
                ]
              },
              "authorizingGroupDelegation": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true
                  }
                ]
              },
              "authorizingGroupAuditing": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true
                  }
                ]
              },
              "authorizingGroupTypes": {
                "uniqueItems": true,
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/request.AuthorizingGroupType"
                }
              },
              "classification": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupClassificationPrimer"
                  },
                  {
                    "x-tkh-create-only": true,
                    "x-tkh-backend-determines-default": true
                  }
                ]
              },
              "description": {
                "type": "string"
              },
              "auditConfig": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupAuditConfig"
                  },
                  {
                    "x-tkh-backend-determines-default": true
                  }
                ]
              },
              "privateGroup": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "hideAuditTrail": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "vaultRequiresActivation": {
                "type": "boolean",
                "x-tkh-default": false,
                "x-tkh-backend-determines-default": true
              },
              "vaultRecovery": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.VaultRecoveryAvailability"
                  },
                  {
                    "x-tkh-default": "FULL"
                  }
                ]
              },
              "nestedUnder": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "group.Group"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "clients": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupClientLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "clientPermissions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/client.OAuth2ClientPermissionWithClientLinkableWrapper"
                      },
                      {
                        "x-tkh-create-only": true
                      }
                    ]
                  },
                  "administeredClients": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/client.ClientApplicationLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "administeredSystems": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/provisioning.ProvisionedSystemLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "contentAdministeredSystems": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/provisioning.ProvisionedSystemLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "serviceAccounts": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/serviceaccount.ServiceAccountLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "ownedClients": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/client.ClientApplicationLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "ownedSystems": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/provisioning.ProvisionedSystemLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "ownedGroupsOnSystem": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/provisioning.OwnedGroupOnSystemsWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "ownedDirectories": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/directory.AccountDirectoryLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "ownedOrganizationalUnits": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/organization.OrganizationalUnitLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "ownedAccessProfiles": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/profile.AccessProfileLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "systems": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.ProvisioningGroupLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "webhooks": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/webhook.WebhookLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "groupinfo": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "requeststatus": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupRequestStatus"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "vault": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/vault.Vault"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "groupAccessInfo": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupAccessInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "admins": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupAccountLinkableWrapper"
                      },
                      {
                        "deprecated": true,
                        "x-tkh-create-only": true
                      }
                    ]
                  },
                  "accounts": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupAccountLinkableWrapper"
                      },
                      {
                        "x-tkh-create-only": true
                      }
                    ]
                  },
                  "myaccount": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupAccount"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "mydelegatedaccount": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupAccount"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "markers": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/mark.ItemMarkers"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "groupauditinginfo": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupAuditingInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "recentAudits": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/audit.GroupAuditLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "helpdesk": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/directory.AccountDirectorySummaryLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "authorizedGroups": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupLinkableWrapperWithCount"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "nestedGroups": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupPrimerLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "globalRoles": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupGlobalRoleInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "group.Group": true,
              "group.GroupPrimer": true
            },
            "x-tkh-discriminator": "group.Group"
          }
        ]
      },
      "group.GroupAccessInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "GroupAccessInfo",
            "required": [
              "$type",
              "businessAccounts"
            ],
            "type": "object",
            "properties": {
              "businessAccounts": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "group.GroupAccessInfo"
              }
            },
            "x-tkh-discriminator": "group.GroupAccessInfo"
          }
        ]
      },
      "group.GroupAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/auth.AccountPrimer"
          },
          {
            "title": "GroupAccount",
            "required": [
              "$type",
              "disconnectedNested",
              "managerWithoutEndDate",
              "nested",
              "rights",
              "visibleForProvisioning"
            ],
            "type": "object",
            "properties": {
              "rights": {
                "$ref": "#/components/schemas/group.GroupRights"
              },
              "endDate": {
                "type": "string",
                "format": "date"
              },
              "provisioningEndTime": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "provisioningPermissionEndTime": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "visibleForProvisioning": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": true
              },
              "directory": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/directory.AccountDirectoryPrimer"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "twoFactorStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/auth.TwoFactorAuthenticationStatus"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "lastUsed": {
                "type": "string",
                "format": "date",
                "readOnly": true
              },
              "nested": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "disconnectedNested": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "group.GroupAccount"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "auth.AccountPrimer": false,
              "group.GroupAccount": true
            },
            "x-tkh-discriminator": "group.GroupAccount"
          }
        ]
      },
      "group.GroupAccountLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group.GroupAccount"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "group.GroupAccountNesting": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "GroupAccountNesting",
            "required": [
              "$type",
              "connected"
            ],
            "type": "object",
            "properties": {
              "connected": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "group.GroupAccountNesting"
              }
            },
            "x-tkh-discriminator": "group.GroupAccountNesting"
          }
        ]
      },
      "group.GroupAccountStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "GroupAccountStatus",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "visibleForProvisioning": {
                "type": "boolean"
              },
              "folder": {
                "$ref": "#/components/schemas/group.GroupFolder"
              },
              "$type": {
                "type": "string",
                "default": "group.GroupAccountStatus"
              }
            },
            "x-tkh-discriminator": "group.GroupAccountStatus"
          }
        ]
      },
      "group.GroupAdminMail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "GroupAdminMail",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "body": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "group.GroupAdminMail"
              }
            },
            "x-tkh-discriminator": "group.GroupAdminMail"
          }
        ]
      },
      "group.GroupAuditConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "GroupAuditConfig",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "months": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Month"
                },
                "x-tkh-backend-determines-default": true
              },
              "$type": {
                "type": "string",
                "default": "group.GroupAuditConfig"
              }
            },
            "x-tkh-discriminator": "group.GroupAuditConfig"
          }
        ]
      },
      "group.GroupAuditingInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "GroupAuditingInfo",
            "required": [
              "$type",
              "nrAccounts",
              "nrDisabledAccounts",
              "nrDisabledManagers",
              "nrExpiredVaultRecords",
              "nrManagers",
              "nrVaultRecordsWithEndDate"
            ],
            "type": "object",
            "properties": {
              "nrManagers": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "nrAccounts": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "nrDisabledManagers": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "nrDisabledAccounts": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "auditDueDate": {
                "type": "string",
                "format": "date",
                "readOnly": true
              },
              "lastAuditDate": {
                "type": "string",
                "format": "date",
                "readOnly": true
              },
              "nrExpiredVaultRecords": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "nrVaultRecordsWithEndDate": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "$type": {
                "type": "string",
                "default": "group.GroupAuditingInfo"
              }
            },
            "x-tkh-discriminator": "group.GroupAuditingInfo"
          }
        ]
      },
      "group.GroupAuditingStatus": {
        "type": "string",
        "enum": [
          "AUDITED",
          "UNAUDITED",
          "OVERDUE"
        ]
      },
      "group.GroupClassification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/group.GroupClassificationPrimer"
          },
          {
            "title": "GroupClassification",
            "required": [
              "$type",
              "authorizingGroupAuditingRequired",
              "authorizingGroupDelegationRequired",
              "authorizingGroupMembershipRequired",
              "authorizingGroupProvisioningRequired",
              "defaultClassification",
              "maximumAuditInterval",
              "minimumNrManagers",
              "name",
              "recordTrailRequired",
              "rotatingPasswordRequired",
              "vaultRequiresActivation"
            ],
            "type": "object",
            "properties": {
              "defaultClassification": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false,
                "x-tkh-immutable": true
              },
              "maximumAuditInterval": {
                "maximum": 12,
                "minimum": 0,
                "type": "integer",
                "format": "int32",
                "x-tkh-default": 0
              },
              "requiredMonths": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Month"
                }
              },
              "recordTrailRequired": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "rotatingPasswordRequired": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "authorizingGroupProvisioningRequired": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "authorizingGroupMembershipRequired": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "authorizingGroupDelegationRequired": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "authorizingGroupAuditingRequired": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "vaultRequiresActivation": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "minimumNrManagers": {
                "minimum": 1,
                "type": "integer",
                "format": "int32",
                "x-tkh-default": 1
              },
              "description": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "group.GroupClassification"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "info": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/group.GroupClassificationInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "group.GroupClassification": true,
              "group.GroupClassificationPrimer": true
            },
            "x-tkh-discriminator": "group.GroupClassification"
          }
        ]
      },
      "group.GroupClassificationConformance": {
        "type": "string",
        "enum": [
          "MATCHES_ALL_CRITERIA",
          "UNMATCHED_FIXABLE_CRITERIA",
          "UNMATCHED_CRITERIA"
        ]
      },
      "group.GroupClassificationInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "GroupClassificationInfo",
            "required": [
              "$type",
              "nrGroups"
            ],
            "type": "object",
            "properties": {
              "nrGroups": {
                "type": "integer",
                "format": "int32",
                "x-tkh-default": 0
              },
              "$type": {
                "type": "string",
                "default": "group.GroupClassificationInfo"
              }
            },
            "x-tkh-discriminator": "group.GroupClassificationInfo"
          }
        ]
      },
      "group.GroupClassificationLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group.GroupClassification"
            }
          }
        }
      },
      "group.GroupClassificationPrimer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "GroupClassificationPrimer",
            "required": [
              "$type",
              "name"
            ],
            "type": "object",
            "properties": {
              "uuid": {
                "maxLength": 36,
                "minLength": 0,
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "name": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "group.GroupClassificationPrimer"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "group.GroupClassification": "#/components/schemas/group.GroupClassification",
                "group.GroupClassificationPrimer": "#/components/schemas/group.GroupClassificationPrimer"
              }
            },
            "x-tkh-discriminator": "group.GroupClassificationPrimer"
          }
        ]
      },
      "group.GroupClassificationUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "GroupClassificationUpdate",
            "required": [
              "$type",
              "classificaton"
            ],
            "type": "object",
            "properties": {
              "classificaton": {
                "$ref": "#/components/schemas/group.GroupClassificationPrimer"
              },
              "$type": {
                "type": "string",
                "default": "group.GroupClassificationUpdate"
              }
            },
            "x-tkh-discriminator": "group.GroupClassificationUpdate"
          }
        ]
      },
      "group.GroupClient": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "GroupClient",
            "required": [
              "$type",
              "activationRequired",
              "group"
            ],
            "type": "object",
            "properties": {
              "client": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/client.ClientApplicationPrimer"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "group": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "owner": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true,
                    "x-tkh-backend-determines-default": true
                  }
                ]
              },
              "technicalAdministrator": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true,
                    "x-tkh-backend-determines-default": true
                  }
                ]
              },
              "activationRequired": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "group.GroupClient"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "group.GroupClient": true
            },
            "x-tkh-discriminator": "group.GroupClient"
          }
        ]
      },
      "group.GroupClientLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group.GroupClient"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "group.GroupClientLinkableWrapperWithCount": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group.GroupClient"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          }
        },
        "x-tkh-discriminator": "LinkableWrapperWithCount"
      },
      "group.GroupEditRequiredReason": {
        "type": "string",
        "enum": [
          "ONE_MANAGER",
          "CRITERIA_UNSATISFIED_AUDIT_INTERVAL",
          "CRITERIA_UNSATISFIED_AUDIT_MONTHS",
          "CRITERIA_UNSATISFIED_AUTHORIZING_GROUP_PROVISIONING",
          "CRITERIA_UNSATISFIED_AUTHORIZING_GROUP_MEMBERSHIP",
          "CRITERIA_UNSATISFIED_AUTHORIZING_GROUP_DELEGATION",
          "CRITERIA_UNSATISFIED_AUTHORIZING_GROUP_AUDITING",
          "CRITERIA_UNSATISFIED_RECORD_TRAIL",
          "CRITERIA_UNSATISFIED_ROTATING_PASSWORD_REQUIRED",
          "CRITERIA_UNSATISFIED_VAULT_REQUIRES_ACTIVATION",
          "CRITERIA_UNSATISFIED_MINIMUM_NR_MANAGERS"
        ]
      },
      "group.GroupExtendedAccess": {
        "type": "string",
        "enum": [
          "NOT_ALLOWED",
          "ONE_WEEK",
          "TWO_WEEKS",
          "TWO_WEEKS_NO_CONFIRM"
        ]
      },
      "group.GroupFolder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "GroupFolder",
            "required": [
              "$type",
              "name"
            ],
            "type": "object",
            "properties": {
              "name": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "group.GroupFolder"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "group.GroupFolder": true
            },
            "x-tkh-discriminator": "group.GroupFolder"
          }
        ]
      },
      "group.GroupFolderLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group.GroupFolder"
            }
          }
        }
      },
      "group.GroupGlobalRoleInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "GroupGlobalRoleInfo",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "auditorGroupFor": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
                }
              },
              "createGroupApproveGroupFor": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
                }
              },
              "removeGroupApproveGroupFor": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
                }
              },
              "enableTechAdminApproveGroupFor": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
                }
              },
              "recoveryFallbackGroupFor": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
                }
              },
              "$type": {
                "type": "string",
                "default": "group.GroupGlobalRoleInfo"
              }
            },
            "x-tkh-discriminator": "group.GroupGlobalRoleInfo"
          }
        ]
      },
      "group.GroupInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "GroupInfo",
            "required": [
              "$type",
              "nrAccounts",
              "nrAccountsWithVault",
              "nrAudits",
              "nrClients",
              "nrProvisionedSystems",
              "nrVaultRecords"
            ],
            "type": "object",
            "properties": {
              "nrAccounts": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "nrAccountsWithVault": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "nrProvisionedSystems": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "nrClients": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "nrVaultRecords": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "nrAudits": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "$type": {
                "type": "string",
                "default": "group.GroupInfo"
              }
            },
            "x-tkh-discriminator": "group.GroupInfo"
          }
        ]
      },
      "group.GroupLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group.Group"
            }
          }
        }
      },
      "group.GroupLinkableWrapperWithCount": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group.Group"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          }
        },
        "x-tkh-discriminator": "LinkableWrapperWithCount"
      },
      "group.GroupPrimer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "GroupPrimer",
            "required": [
              "$type",
              "admin",
              "name"
            ],
            "type": "object",
            "properties": {
              "admin": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false,
                "x-tkh-immutable": true
              },
              "uuid": {
                "maxLength": 36,
                "minLength": 0,
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "name": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "organizationalUnit": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
                  },
                  {
                    "x-tkh-create-only": true,
                    "x-tkh-backend-determines-default": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "group.GroupPrimer"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "group.AccountGroup": "#/components/schemas/group.AccountGroup",
                "group.Group": "#/components/schemas/group.Group",
                "group.GroupPrimer": "#/components/schemas/group.GroupPrimer"
              }
            },
            "x-tkh-discriminator": "group.GroupPrimer"
          }
        ]
      },
      "group.GroupPrimerLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group.GroupPrimer"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "group.GroupRequestStatus": {
        "type": "string",
        "enum": [
          "MEMBER",
          "REQUEST_OPEN",
          "AVAILABLE"
        ]
      },
      "group.GroupRights": {
        "type": "string",
        "enum": [
          "MANAGER",
          "NORMAL"
        ]
      },
      "group.GroupSegmentedLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group.Group"
            }
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentCount"
            }
          }
        },
        "x-tkh-discriminator": "SegmentedLinkableWrapper"
      },
      "group.GroupVisibility": {
        "type": "string",
        "enum": [
          "ALL",
          "PUBLIC",
          "PUBLIC_OR_MEMBER"
        ]
      },
      "group.GroupsAuditStats": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "GroupsAuditStats",
            "required": [
              "$type",
              "auditedGroups",
              "overdueAuditGroups",
              "overdueVaultPolicies",
              "unauditedGroups",
              "validVaultPolicies",
              "vaultsWithoutPolicies"
            ],
            "type": "object",
            "properties": {
              "auditedGroups": {
                "type": "integer",
                "format": "int64",
                "x-tkh-default": 0
              },
              "unauditedGroups": {
                "type": "integer",
                "format": "int64",
                "x-tkh-default": 0
              },
              "overdueAuditGroups": {
                "type": "integer",
                "format": "int64",
                "x-tkh-default": 0
              },
              "validVaultPolicies": {
                "type": "integer",
                "format": "int64",
                "x-tkh-default": 0
              },
              "vaultsWithoutPolicies": {
                "type": "integer",
                "format": "int64",
                "x-tkh-default": 0
              },
              "overdueVaultPolicies": {
                "type": "integer",
                "format": "int64",
                "x-tkh-default": 0
              },
              "classifications": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/group.GroupClassification"
                }
              },
              "$type": {
                "type": "string",
                "default": "group.GroupsAuditStats"
              }
            },
            "x-tkh-discriminator": "group.GroupsAuditStats"
          }
        ]
      },
      "group.ProvisioningGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "ProvisioningGroup",
            "required": [
              "$type",
              "activationRequired",
              "group"
            ],
            "type": "object",
            "properties": {
              "groupOnSystem": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.GroupOnSystem"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "group": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "activationRequired": {
                "type": "boolean",
                "x-tkh-default": true
              },
              "$type": {
                "type": "string",
                "default": "group.ProvisioningGroup"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "group.ProvisioningGroup": true
            },
            "x-tkh-discriminator": "group.ProvisioningGroup"
          }
        ]
      },
      "group.ProvisioningGroupLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group.ProvisioningGroup"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "group.ProvisioningGroupLinkableWrapperWithCount": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group.ProvisioningGroup"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          }
        },
        "x-tkh-discriminator": "LinkableWrapperWithCount"
      },
      "group.VaultRecoveryAvailability": {
        "type": "string",
        "enum": [
          "NONE",
          "RECOVERY_KEY_ONLY",
          "FULL"
        ]
      },
      "identity.AccountAttributeDefinition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "AccountAttributeDefinition",
            "required": [
              "$type",
              "format",
              "freelyUseable",
              "list",
              "name",
              "required",
              "unique"
            ],
            "type": "object",
            "properties": {
              "systemDefinition": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/identity.AccountAttributeSystemDefinition"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "name": {
                "minLength": 1,
                "type": "string"
              },
              "format": {
                "$ref": "#/components/schemas/identity.AccountAttributeFormat"
              },
              "required": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "list": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "unique": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "freelyUseable": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "identity.AccountAttributeDefinition"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "identity.AccountAttributeDefinition": true
            },
            "x-tkh-discriminator": "identity.AccountAttributeDefinition"
          }
        ]
      },
      "identity.AccountAttributeDefinitionLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identity.AccountAttributeDefinition"
            }
          }
        }
      },
      "identity.AccountAttributeFormat": {
        "type": "string",
        "enum": [
          "INTERNAL",
          "EMAIL",
          "TELEPHONE",
          "NUMBER",
          "DATE",
          "DATETIME",
          "BOOLEAN",
          "TEXT"
        ]
      },
      "identity.AccountAttributeRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "AccountAttributeRule",
            "required": [
              "$type",
              "allowOverride",
              "allowSelfService",
              "exclusive",
              "updateAutomatically"
            ],
            "type": "object",
            "properties": {
              "attribute": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/identity.AccountAttributeDefinition"
                  },
                  {
                    "x-tkh-create-only": true
                  }
                ]
              },
              "exclusive": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "updateAutomatically": {
                "type": "boolean",
                "x-tkh-default": true
              },
              "script": {
                "type": "string"
              },
              "prioritySCIM": {
                "type": "integer",
                "format": "int32",
                "x-tkh-default": 1
              },
              "priorityExternalSource": {
                "type": "integer",
                "format": "int32"
              },
              "priorityDirectory": {
                "type": "integer",
                "format": "int32",
                "x-tkh-default": 2
              },
              "priorityFormula": {
                "type": "integer",
                "format": "int32",
                "x-tkh-default": 3
              },
              "allowSelfService": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "allowOverride": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "defaultValue": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "identity.AccountAttributeRule"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "identity.AccountAttributeRule": true
            },
            "x-tkh-discriminator": "identity.AccountAttributeRule"
          }
        ]
      },
      "identity.AccountAttributeRuleLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identity.AccountAttributeRule"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "identity.AccountAttributeSource": {
        "type": "string",
        "enum": [
          "SCIM",
          "EXTERNAL",
          "DIRECTORY",
          "FORMULA",
          "DEFAULT",
          "SELF_SERVICE",
          "OVERRIDE"
        ]
      },
      "identity.AccountAttributeSystemDefinition": {
        "type": "string",
        "enum": [
          "USERNAME",
          "DISPLAY_NAME",
          "GIVEN_NAME",
          "MIDDLE_NAME",
          "FAMILY_NAME",
          "EMAIL",
          "EMAIL_PRIVATE",
          "TELEPHONE",
          "TELEPHONE_PRIVATE",
          "LICENSE",
          "CAN_REQUEST_GROUPS",
          "CUSTOM"
        ]
      },
      "identity.AccountAttributeUpdateOperation": {
        "type": "string",
        "enum": [
          "SYNC_ONLY",
          "UPDATE_AUTOMATICALLY",
          "UPDATE_FULLY"
        ]
      },
      "identity.AccountAttributeValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "AccountAttributeValue",
            "required": [
              "$type",
              "empty",
              "latestForSource"
            ],
            "type": "object",
            "properties": {
              "attribute": {
                "$ref": "#/components/schemas/identity.AccountAttributeDefinition"
              },
              "date": {
                "type": "string",
                "format": "date-time"
              },
              "source": {
                "$ref": "#/components/schemas/identity.AccountAttributeSource"
              },
              "value": {
                "type": "string"
              },
              "latestForSource": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "status": {
                "$ref": "#/components/schemas/identity.AccountAttributeValueStatus"
              },
              "context": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "identity.AccountAttributeValue"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "previous": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identity.AccountAttributeValue"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "selection": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identity.AccountAttributeValueSelection"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-discriminator": "identity.AccountAttributeValue"
          }
        ]
      },
      "identity.AccountAttributeValueLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identity.AccountAttributeValue"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "identity.AccountAttributeValueSelection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AccountAttributeValueSelection",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/identity.AccountAttributeValueSelectionStatus"
              },
              "context": {
                "type": "string"
              },
              "currentValue": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "identity.AccountAttributeValueSelection"
              }
            },
            "x-tkh-discriminator": "identity.AccountAttributeValueSelection"
          }
        ]
      },
      "identity.AccountAttributeValueSelectionStatus": {
        "type": "string",
        "enum": [
          "IN_SYNC",
          "OUT_OF_SYNC",
          "INVALID",
          "DUPLICATE",
          "ERROR",
          "MISSING",
          "UNKNOWN"
        ]
      },
      "identity.AccountAttributeValueStatus": {
        "type": "string",
        "enum": [
          "VALID",
          "INVALID",
          "DUPLICATE",
          "ERROR"
        ]
      },
      "identity.AccountAttributeValueSummary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AccountAttributeValueSummary",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "attribute": {
                "$ref": "#/components/schemas/identity.AccountAttributeDefinition"
              },
              "source": {
                "$ref": "#/components/schemas/identity.AccountAttributeSource"
              },
              "date": {
                "type": "string",
                "format": "date-time"
              },
              "expectedValue": {
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/identity.AccountAttributeValueSelectionStatus"
              },
              "context": {
                "type": "string"
              },
              "currentValue": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "identity.AccountAttributeValueSummary"
              }
            },
            "x-tkh-discriminator": "identity.AccountAttributeValueSummary"
          }
        ]
      },
      "identity.AccountAttributeValueUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AccountAttributeValueUpdate",
            "required": [
              "$type",
              "attribute"
            ],
            "type": "object",
            "properties": {
              "attribute": {
                "$ref": "#/components/schemas/identity.AccountAttributeDefinition"
              },
              "value": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "identity.AccountAttributeValueUpdate"
              }
            },
            "x-tkh-discriminator": "identity.AccountAttributeValueUpdate"
          }
        ]
      },
      "identity.Identity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "Identity",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "displayName": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "givenName": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "middleName": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "familyName": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "privateEmail": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "telephone": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "privateTelephone": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "identity.Identity"
              }
            },
            "x-tkh-discriminator": "identity.Identity"
          }
        ]
      },
      "identitysource.AFASIdentitySource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/identitysource.IdentitySource"
          },
          {
            "title": "AFASIdentitySource",
            "required": [
              "$type",
              "name",
              "schedule",
              "token",
              "url"
            ],
            "type": "object",
            "properties": {
              "url": {
                "maxLength": 512,
                "minLength": 0,
                "type": "string"
              },
              "token": {
                "minLength": 1,
                "type": "string",
                "x-tkh-sensitive": true
              },
              "$type": {
                "type": "string",
                "default": "identitysource.AFASIdentitySource"
              }
            },
            "x-tkh-writescope": {
              "identitysource.AFASIdentitySource": true,
              "identitysource.IdentitySource": true,
              "identitysource.IdentitySourcePrimer": true
            },
            "x-tkh-discriminator": "identitysource.AFASIdentitySource"
          }
        ]
      },
      "identitysource.IdentitySource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/identitysource.IdentitySourcePrimer"
          },
          {
            "title": "IdentitySource",
            "required": [
              "$type",
              "name",
              "schedule"
            ],
            "type": "object",
            "properties": {
              "schedule": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "identitysource.IdentitySource"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "identitysource.AFASIdentitySource": "#/components/schemas/identitysource.AFASIdentitySource",
                "identitysource.IdentitySource": "#/components/schemas/identitysource.IdentitySource"
              }
            },
            "x-tkh-discriminator": "identitysource.IdentitySource"
          }
        ]
      },
      "identitysource.IdentitySourceLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/identitysource.IdentitySource"
            }
          }
        }
      },
      "identitysource.IdentitySourcePrimer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "IdentitySourcePrimer",
            "required": [
              "$type",
              "active",
              "name"
            ],
            "type": "object",
            "properties": {
              "active": {
                "type": "boolean",
                "x-tkh-default": true
              },
              "uuid": {
                "maxLength": 36,
                "minLength": 0,
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "name": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/identitysource.IdentitySourceType"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "identitysource.IdentitySourcePrimer"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "identitysource.AFASIdentitySource": "#/components/schemas/identitysource.AFASIdentitySource",
                "identitysource.IdentitySource": "#/components/schemas/identitysource.IdentitySource",
                "identitysource.IdentitySourcePrimer": "#/components/schemas/identitysource.IdentitySourcePrimer"
              }
            },
            "x-tkh-discriminator": "identitysource.IdentitySourcePrimer"
          }
        ]
      },
      "identitysource.IdentitySourceType": {
        "type": "string",
        "enum": [
          "AFAS"
        ]
      },
      "launchpad.DisplayedLaunchpadTile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "DisplayedLaunchpadTile",
            "required": [
              "$type",
              "identiconCode"
            ],
            "type": "object",
            "properties": {
              "tile": {
                "$ref": "#/components/schemas/launchpad.LaunchpadTilePrimer"
              },
              "group": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "identiconCode": {
                "type": "integer",
                "format": "int32",
                "x-tkh-default": 0
              },
              "logo": {
                "type": "string",
                "format": "byte"
              },
              "title": {
                "type": "string"
              },
              "uri": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "launchpad.DisplayedLaunchpadTile"
              }
            },
            "x-tkh-discriminator": "launchpad.DisplayedLaunchpadTile"
          }
        ]
      },
      "launchpad.DisplayedLaunchpadTiles": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "DisplayedLaunchpadTiles",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/launchpad.DisplayedLaunchpadTile"
                }
              },
              "$type": {
                "type": "string",
                "default": "launchpad.DisplayedLaunchpadTiles"
              }
            },
            "x-tkh-discriminator": "launchpad.DisplayedLaunchpadTiles"
          }
        ]
      },
      "launchpad.LaunchpadTile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/launchpad.LaunchpadTilePrimer"
          },
          {
            "title": "LaunchpadTile",
            "required": [
              "$type",
              "identiconCode"
            ],
            "type": "object",
            "properties": {
              "type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/launchpad.LaunchpadTileType"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-default": "MANUAL",
                    "x-tkh-immutable": true
                  }
                ]
              },
              "identiconCode": {
                "type": "integer",
                "format": "int32",
                "x-tkh-default": 0
              },
              "logo": {
                "type": "string",
                "format": "byte"
              },
              "group": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "application": {
                "$ref": "#/components/schemas/client.ClientApplicationPrimer"
              },
              "vaultRecord": {
                "$ref": "#/components/schemas/vault.VaultRecordPrimer"
              },
              "$type": {
                "type": "string",
                "default": "launchpad.LaunchpadTile"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "launchpad.LaunchpadTile": "#/components/schemas/launchpad.LaunchpadTile",
                "launchpad.ManualLaunchpadTile": "#/components/schemas/launchpad.ManualLaunchpadTile",
                "launchpad.SsoApplicationLaunchpadTile": "#/components/schemas/launchpad.SsoApplicationLaunchpadTile",
                "launchpad.VaultRecordLaunchpadTile": "#/components/schemas/launchpad.VaultRecordLaunchpadTile"
              }
            },
            "x-tkh-discriminator": "launchpad.LaunchpadTile"
          }
        ]
      },
      "launchpad.LaunchpadTileLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/launchpad.LaunchpadTile"
            }
          }
        }
      },
      "launchpad.LaunchpadTilePrimer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "LaunchpadTilePrimer",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "launchpad.LaunchpadTilePrimer"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "launchpad.LaunchpadTile": "#/components/schemas/launchpad.LaunchpadTile",
                "launchpad.LaunchpadTilePrimer": "#/components/schemas/launchpad.LaunchpadTilePrimer",
                "launchpad.ManualLaunchpadTile": "#/components/schemas/launchpad.ManualLaunchpadTile",
                "launchpad.SsoApplicationLaunchpadTile": "#/components/schemas/launchpad.SsoApplicationLaunchpadTile",
                "launchpad.VaultRecordLaunchpadTile": "#/components/schemas/launchpad.VaultRecordLaunchpadTile"
              }
            },
            "x-tkh-discriminator": "launchpad.LaunchpadTilePrimer"
          }
        ]
      },
      "launchpad.LaunchpadTileType": {
        "type": "string",
        "enum": [
          "MANUAL",
          "SSO_APPLICATION",
          "VAULT_RECORD"
        ]
      },
      "launchpad.ManualLaunchpadTile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/launchpad.LaunchpadTile"
          },
          {
            "title": "ManualLaunchpadTile",
            "required": [
              "$type",
              "title",
              "uri"
            ],
            "type": "object",
            "properties": {
              "title": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "uri": {
                "minLength": 1,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "launchpad.ManualLaunchpadTile"
              }
            },
            "x-tkh-writescope": {
              "launchpad.LaunchpadTile": true,
              "launchpad.LaunchpadTilePrimer": true,
              "launchpad.ManualLaunchpadTile": true
            },
            "x-tkh-discriminator": "launchpad.ManualLaunchpadTile"
          }
        ]
      },
      "launchpad.SsoApplicationLaunchpadTile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/launchpad.LaunchpadTile"
          },
          {
            "title": "SsoApplicationLaunchpadTile",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "uri": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "launchpad.SsoApplicationLaunchpadTile"
              }
            },
            "x-tkh-writescope": {
              "launchpad.LaunchpadTile": true,
              "launchpad.LaunchpadTilePrimer": true,
              "launchpad.SsoApplicationLaunchpadTile": true
            },
            "x-tkh-discriminator": "launchpad.SsoApplicationLaunchpadTile"
          }
        ]
      },
      "launchpad.VaultRecordLaunchpadTile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/launchpad.LaunchpadTile"
          },
          {
            "title": "VaultRecordLaunchpadTile",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "launchpad.VaultRecordLaunchpadTile"
              }
            },
            "x-tkh-writescope": {
              "launchpad.LaunchpadTile": true,
              "launchpad.LaunchpadTilePrimer": true,
              "launchpad.VaultRecordLaunchpadTile": true
            },
            "x-tkh-discriminator": "launchpad.VaultRecordLaunchpadTile"
          }
        ]
      },
      "license.KeyHubLicenseInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "KeyHubLicenseInfo",
            "required": [
              "$type",
              "correct",
              "oK",
              "version"
            ],
            "type": "object",
            "properties": {
              "version": {
                "type": "integer",
                "format": "int32",
                "x-tkh-default": 0
              },
              "uuid": {
                "maxLength": 36,
                "minLength": 0,
                "type": "string"
              },
              "customerCompany": {
                "maxLength": 100,
                "minLength": 0,
                "type": "string"
              },
              "customerContact": {
                "maxLength": 100,
                "minLength": 0,
                "type": "string"
              },
              "customerDomains": {
                "maxItems": 100,
                "minItems": 0,
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "issueTime": {
                "type": "string",
                "format": "date-time"
              },
              "notBeforeTime": {
                "type": "string",
                "format": "date-time"
              },
              "expirationTime": {
                "type": "string",
                "format": "date-time"
              },
              "usersSoftLimit": {
                "type": "integer",
                "format": "int32"
              },
              "usersHardLimit": {
                "type": "integer",
                "format": "int32"
              },
              "usersBusinessLimit": {
                "type": "integer",
                "format": "int32"
              },
              "usersProLimit": {
                "type": "integer",
                "format": "int32"
              },
              "features": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/license.LicenseFeature"
                }
              },
              "licenseKey": {
                "type": "string"
              },
              "keyHubDomain": {
                "type": "string"
              },
              "currentLicenseStatus": {
                "$ref": "#/components/schemas/license.KeyHubLicenseInfoLicenseStatus"
              },
              "$type": {
                "type": "string",
                "default": "license.KeyHubLicenseInfo"
              }
            },
            "x-tkh-discriminator": "license.KeyHubLicenseInfo"
          }
        ]
      },
      "license.KeyHubLicenseInfoLicenseStatus": {
        "type": "string",
        "enum": [
          "OK",
          "NOT_YET_VALID",
          "EXPIRED",
          "TERMINATED",
          "SOFT_LIMIT_REACHED",
          "HARD_LIMIT_REACHED",
          "HARD_LIMIT_EXCEEDED",
          "WRONG_DOMAIN",
          "BUSINESS_LIMIT_EXCEEDED",
          "PRO_LIMIT_EXCEEDED",
          "FEATURE_IN_USE"
        ]
      },
      "license.LicenseFeature": {
        "type": "string",
        "enum": [
          "CLUSTER_HA",
          "CLUSTER_HA_ENTERPRISE",
          "WORKFLOWS",
          "NESTED_GROUPS",
          "ENTERPRISE_ORGANISATION",
          "COMPLIANCE_PLUS",
          "OFFLINE_MODE",
          "SERVICE_ACCOUNTS",
          "ILM",
          "SCIM",
          "GROUP_ACTIVATION"
        ]
      },
      "mark.ItemMarker": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "ItemMarker",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "level": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/mark.ItemMarkerLevel"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/mark.ItemMarkerType"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "parameters": {
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "readOnly": true
                },
                "readOnly": true
              },
              "$type": {
                "type": "string",
                "default": "mark.ItemMarker"
              }
            },
            "x-tkh-discriminator": "mark.ItemMarker"
          }
        ]
      },
      "mark.ItemMarkerLevel": {
        "type": "string",
        "enum": [
          "INFO",
          "WARNING"
        ]
      },
      "mark.ItemMarkerType": {
        "type": "string",
        "enum": [
          "TLS_DISABLED",
          "TLS_UNVERIFIED",
          "WEAK_PASSWORD_HASHING",
          "GROUP_NO_MANAGER",
          "GROUP_ONE_MANAGER",
          "GROUP_UNREADABLE_VAULT",
          "GROUP_UNRECOVERABLE_VAULT",
          "GROUP_CRITERIA_UNSATISFIED_AUDIT_INTERVAL",
          "GROUP_CRITERIA_UNSATISFIED_AUDIT_MONTHS",
          "GROUP_CRITERIA_UNSATISFIED_AUTHORIZING_GROUP_PROVISIONING",
          "GROUP_CRITERIA_UNSATISFIED_AUTHORIZING_GROUP_MEMBERSHIP",
          "GROUP_CRITERIA_UNSATISFIED_AUTHORIZING_GROUP_DELEGATION",
          "GROUP_CRITERIA_UNSATISFIED_AUTHORIZING_GROUP_AUDITING",
          "GROUP_CRITERIA_UNSATISFIED_RECORD_TRAIL",
          "GROUP_CRITERIA_UNSATISFIED_ROTATING_PASSWORD_REQUIRED",
          "GROUP_CRITERIA_UNSATISFIED_VAULT_REQUIRES_ACTIVATION",
          "GROUP_CRITERIA_UNSATISFIED_MINIMUM_NR_MANAGERS"
        ]
      },
      "mark.ItemMarkers": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "ItemMarkers",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "markers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/mark.ItemMarker"
                }
              },
              "$type": {
                "type": "string",
                "default": "mark.ItemMarkers"
              }
            },
            "x-tkh-discriminator": "mark.ItemMarkers"
          }
        ]
      },
      "misc.AttributeCustomization": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AttributeCustomization",
            "required": [
              "$type",
              "name"
            ],
            "type": "object",
            "properties": {
              "name": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "script": {
                "type": "string"
              },
              "attributeDefinition": {
                "$ref": "#/components/schemas/identity.AccountAttributeDefinition"
              },
              "$type": {
                "type": "string",
                "default": "misc.AttributeCustomization"
              }
            },
            "x-tkh-discriminator": "misc.AttributeCustomization"
          }
        ]
      },
      "notification.CertificateExpiredNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/notification.Notification"
          },
          {
            "title": "CertificateExpiredNotification",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "usage": {
                "$ref": "#/components/schemas/notification.CertificateUsage"
              },
              "directory": {
                "$ref": "#/components/schemas/directory.LDAPDirectory"
              },
              "system": {
                "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
              },
              "webhook": {
                "$ref": "#/components/schemas/webhook.Webhook"
              },
              "ldapClient": {
                "$ref": "#/components/schemas/client.LdapClient"
              },
              "certificate": {
                "$ref": "#/components/schemas/certificate.Certificate"
              },
              "expiration": {
                "type": "string",
                "format": "date-time"
              },
              "$type": {
                "type": "string",
                "default": "notification.CertificateExpiredNotification"
              }
            },
            "x-tkh-discriminator": "notification.CertificateExpiredNotification"
          }
        ]
      },
      "notification.CertificateUsage": {
        "type": "string",
        "enum": [
          "LDAP_DIRECTORY",
          "PROVISIONED_AD",
          "PROVISIONED_LDAP",
          "WEBHOOK",
          "LDAP_CLIENT",
          "LDAP_SERVER_SETTING",
          "GLOBAL_TRUSTED_CERTIFICATE",
          "IDP",
          "KEYHUB"
        ]
      },
      "notification.GroupAuditRequiredNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/notification.Notification"
          },
          {
            "title": "GroupAuditRequiredNotification",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "group": {
                "$ref": "#/components/schemas/group.Group"
              },
              "type": {
                "$ref": "#/components/schemas/audit.AuditRequiredSourceType"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time"
              },
              "$type": {
                "type": "string",
                "default": "notification.GroupAuditRequiredNotification"
              }
            },
            "x-tkh-discriminator": "notification.GroupAuditRequiredNotification"
          }
        ]
      },
      "notification.GroupEditRequiredNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/notification.Notification"
          },
          {
            "title": "GroupEditRequiredNotification",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "group": {
                "$ref": "#/components/schemas/group.Group"
              },
              "reason": {
                "$ref": "#/components/schemas/group.GroupEditRequiredReason"
              },
              "parameters": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "$type": {
                "type": "string",
                "default": "notification.GroupEditRequiredNotification"
              }
            },
            "x-tkh-discriminator": "notification.GroupEditRequiredNotification"
          }
        ]
      },
      "notification.InvalidSignaturesDetectedNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/notification.Notification"
          },
          {
            "title": "InvalidSignaturesDetectedNotification",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "notification.InvalidSignaturesDetectedNotification"
              }
            },
            "x-tkh-discriminator": "notification.InvalidSignaturesDetectedNotification"
          }
        ]
      },
      "notification.LicenseStatusNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/notification.Notification"
          },
          {
            "title": "LicenseStatusNotification",
            "required": [
              "$type",
              "activeAccounts"
            ],
            "type": "object",
            "properties": {
              "activeAccounts": {
                "type": "integer",
                "format": "int32",
                "x-tkh-default": 0
              },
              "licenseInfo": {
                "$ref": "#/components/schemas/license.KeyHubLicenseInfo"
              },
              "$type": {
                "type": "string",
                "default": "notification.LicenseStatusNotification"
              }
            },
            "x-tkh-discriminator": "notification.LicenseStatusNotification"
          }
        ]
      },
      "notification.ModificationRequestNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/notification.Notification"
          },
          {
            "title": "ModificationRequestNotification",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "request": {
                "$ref": "#/components/schemas/request.ModificationRequest"
              },
              "admins": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "groups": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "$type": {
                "type": "string",
                "default": "notification.ModificationRequestNotification"
              }
            },
            "x-tkh-discriminator": "notification.ModificationRequestNotification"
          }
        ]
      },
      "notification.Notification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "Notification",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "inPlainText": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "notification.Notification"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "notification.CertificateExpiredNotification": "#/components/schemas/notification.CertificateExpiredNotification",
                "notification.GroupAuditRequiredNotification": "#/components/schemas/notification.GroupAuditRequiredNotification",
                "notification.GroupEditRequiredNotification": "#/components/schemas/notification.GroupEditRequiredNotification",
                "notification.InvalidSignaturesDetectedNotification": "#/components/schemas/notification.InvalidSignaturesDetectedNotification",
                "notification.LicenseStatusNotification": "#/components/schemas/notification.LicenseStatusNotification",
                "notification.ModificationRequestNotification": "#/components/schemas/notification.ModificationRequestNotification",
                "notification.Notification": "#/components/schemas/notification.Notification",
                "notification.OldApiVersionUsageNotification": "#/components/schemas/notification.OldApiVersionUsageNotification",
                "notification.ProvisionConfigRequiredNotification": "#/components/schemas/notification.ProvisionConfigRequiredNotification",
                "notification.RotatingPasswordRequiredNotification": "#/components/schemas/notification.RotatingPasswordRequiredNotification",
                "notification.UpdateAvailableNotification": "#/components/schemas/notification.UpdateAvailableNotification",
                "notification.VaultRecordExpiredNotification": "#/components/schemas/notification.VaultRecordExpiredNotification"
              }
            },
            "x-tkh-discriminator": "notification.Notification"
          }
        ]
      },
      "notification.Notifications": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "Notifications",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/notification.Notification"
                }
              },
              "$type": {
                "type": "string",
                "default": "notification.Notifications"
              }
            },
            "x-tkh-discriminator": "notification.Notifications"
          }
        ]
      },
      "notification.OldApiVersionUsageNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/notification.Notification"
          },
          {
            "title": "OldApiVersionUsageNotification",
            "required": [
              "$type",
              "apiVersion"
            ],
            "type": "object",
            "properties": {
              "client": {
                "$ref": "#/components/schemas/client.OAuth2Client"
              },
              "apiVersion": {
                "type": "integer",
                "format": "int32",
                "x-tkh-default": 0
              },
              "$type": {
                "type": "string",
                "default": "notification.OldApiVersionUsageNotification"
              }
            },
            "x-tkh-discriminator": "notification.OldApiVersionUsageNotification"
          }
        ]
      },
      "notification.ProvisionConfigRequiredNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/notification.Notification"
          },
          {
            "title": "ProvisionConfigRequiredNotification",
            "required": [
              "$type",
              "keyhubPassword"
            ],
            "type": "object",
            "properties": {
              "systems": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/provisioning.ProvisionedSystemPrimer"
                }
              },
              "keyhubPassword": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "notification.ProvisionConfigRequiredNotification"
              }
            },
            "x-tkh-discriminator": "notification.ProvisionConfigRequiredNotification"
          }
        ]
      },
      "notification.RotatingPasswordRequiredNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/notification.Notification"
          },
          {
            "title": "RotatingPasswordRequiredNotification",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "groups": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/group.GroupPrimer"
                }
              },
              "$type": {
                "type": "string",
                "default": "notification.RotatingPasswordRequiredNotification"
              }
            },
            "x-tkh-discriminator": "notification.RotatingPasswordRequiredNotification"
          }
        ]
      },
      "notification.UpdateAvailableNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/notification.Notification"
          },
          {
            "title": "UpdateAvailableNotification",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "releasedAt": {
                "type": "string",
                "format": "date"
              },
              "$type": {
                "type": "string",
                "default": "notification.UpdateAvailableNotification"
              }
            },
            "x-tkh-discriminator": "notification.UpdateAvailableNotification"
          }
        ]
      },
      "notification.VaultRecordExpiredNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/notification.Notification"
          },
          {
            "title": "VaultRecordExpiredNotification",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "record": {
                "$ref": "#/components/schemas/vault.VaultRecord"
              },
              "$type": {
                "type": "string",
                "default": "notification.VaultRecordExpiredNotification"
              }
            },
            "x-tkh-discriminator": "notification.VaultRecordExpiredNotification"
          }
        ]
      },
      "organization.AccountOrganizationalUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
          },
          {
            "title": "AccountOrganizationalUnit",
            "required": [
              "$type",
              "name"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "organization.AccountOrganizationalUnit"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "organization.AccountOrganizationalUnit": true,
              "organization.OrganizationalUnitPrimer": false
            },
            "x-tkh-discriminator": "organization.AccountOrganizationalUnit"
          }
        ]
      },
      "organization.AccountOrganizationalUnitLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/organization.AccountOrganizationalUnit"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "organization.ClientApplicationOrganizationalUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
          },
          {
            "title": "ClientApplicationOrganizationalUnit",
            "required": [
              "$type",
              "name"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "organization.ClientApplicationOrganizationalUnit"
              }
            },
            "x-tkh-writescope": {
              "organization.ClientApplicationOrganizationalUnit": true,
              "organization.OrganizationalUnitPrimer": false
            },
            "x-tkh-discriminator": "organization.ClientApplicationOrganizationalUnit"
          }
        ]
      },
      "organization.ClientApplicationOrganizationalUnitLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/organization.ClientApplicationOrganizationalUnit"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "organization.OrganizationalUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
          },
          {
            "title": "OrganizationalUnit",
            "required": [
              "$type",
              "depth",
              "name",
              "owner",
              "root"
            ],
            "type": "object",
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "parent": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "description": {
                "type": "string"
              },
              "depth": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "createGroupPlaceholder": {
                "type": "string"
              },
              "createGroupApproveGroup": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "removeGroupApproveGroup": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "enableTechAdminApproveGroup": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "recoveryFallbackGroup": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "auditorGroup": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "$type": {
                "type": "string",
                "default": "organization.OrganizationalUnit"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "createAsParentOf": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/organization.OrganizationalUnitPrimerLinkableWrapper"
                      },
                      {
                        "writeOnly": true
                      }
                    ]
                  },
                  "settings": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/organization.OrganizationalUnitSettings"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "organization.OrganizationalUnit": true,
              "organization.OrganizationalUnitPrimer": true
            },
            "x-tkh-discriminator": "organization.OrganizationalUnit"
          }
        ]
      },
      "organization.OrganizationalUnitAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/auth.AccountPrimer"
          },
          {
            "title": "OrganizationalUnitAccount",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "directory": {
                "$ref": "#/components/schemas/directory.AccountDirectoryPrimer"
              },
              "$type": {
                "type": "string",
                "default": "organization.OrganizationalUnitAccount"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "auth.AccountPrimer": false,
              "organization.OrganizationalUnitAccount": true
            },
            "x-tkh-discriminator": "organization.OrganizationalUnitAccount"
          }
        ]
      },
      "organization.OrganizationalUnitAccountLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/organization.OrganizationalUnitAccount"
            }
          }
        }
      },
      "organization.OrganizationalUnitClientApplication": {
        "allOf": [
          {
            "$ref": "#/components/schemas/client.ClientApplicationPrimer"
          },
          {
            "title": "OrganizationalUnitClientApplication",
            "required": [
              "$type",
              "name"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "organization.OrganizationalUnitClientApplication"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "client.ClientApplicationPrimer": false,
              "organization.OrganizationalUnitClientApplication": true
            },
            "x-tkh-discriminator": "organization.OrganizationalUnitClientApplication"
          }
        ]
      },
      "organization.OrganizationalUnitClientApplicationLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/organization.OrganizationalUnitClientApplication"
            }
          }
        }
      },
      "organization.OrganizationalUnitLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/organization.OrganizationalUnit"
            }
          }
        }
      },
      "organization.OrganizationalUnitPrimer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "OrganizationalUnitPrimer",
            "required": [
              "$type",
              "name"
            ],
            "type": "object",
            "properties": {
              "uuid": {
                "maxLength": 36,
                "minLength": 0,
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "name": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "organization.OrganizationalUnitPrimer"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "organization.AccountOrganizationalUnit": "#/components/schemas/organization.AccountOrganizationalUnit",
                "organization.ClientApplicationOrganizationalUnit": "#/components/schemas/organization.ClientApplicationOrganizationalUnit",
                "organization.OrganizationalUnit": "#/components/schemas/organization.OrganizationalUnit",
                "organization.OrganizationalUnitPrimer": "#/components/schemas/organization.OrganizationalUnitPrimer"
              }
            },
            "x-tkh-discriminator": "organization.OrganizationalUnitPrimer"
          }
        ]
      },
      "organization.OrganizationalUnitPrimerLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "organization.OrganizationalUnitSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "OrganizationalUnitSettings",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "createGroupPlaceholder": {
                "type": "string"
              },
              "createGroupApproveGroup": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "removeGroupApproveGroup": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "enableTechAdminApproveGroup": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "recoveryFallbackGroup": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "$type": {
                "type": "string",
                "default": "organization.OrganizationalUnitSettings"
              }
            },
            "x-tkh-discriminator": "organization.OrganizationalUnitSettings"
          }
        ]
      },
      "profile.AccessProfile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/profile.AccessProfilePrimer"
          },
          {
            "title": "AccessProfile",
            "required": [
              "$type",
              "name",
              "owner"
            ],
            "type": "object",
            "properties": {
              "matchRuleScript": {
                "type": "string"
              },
              "activateRuleScript": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "owner": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true
                  }
                ]
              },
              "directory": {
                "$ref": "#/components/schemas/directory.AccountDirectoryPrimer"
              },
              "$type": {
                "type": "string",
                "default": "profile.AccessProfile"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "accountsWithAttributes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/profile.AccessProfileAccountWithAttributesLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "provisioning": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/profile.AccessProfileProvisioningLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "clients": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/profile.AccessProfileClientLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "groups": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/profile.AccessProfileGroupLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "attributeRules": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/identity.AccountAttributeRuleLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "identity.AccountAttributeRule": true,
              "profile.AccessProfile": true,
              "profile.AccessProfilePrimer": true
            },
            "x-tkh-discriminator": "profile.AccessProfile"
          }
        ]
      },
      "profile.AccessProfileAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/auth.AccountPrimer"
          },
          {
            "title": "AccessProfileAccount",
            "required": [
              "$type",
              "activation",
              "manual"
            ],
            "type": "object",
            "properties": {
              "manual": {
                "type": "boolean",
                "x-tkh-default": true,
                "x-tkh-backend-determines-default": true
              },
              "activation": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/profile.AccessProfileAccountActivation"
                  },
                  {
                    "x-tkh-default": "ACTIVE",
                    "x-tkh-backend-determines-default": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "profile.AccessProfileAccount"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "profile.AccessProfileAccount": "#/components/schemas/profile.AccessProfileAccount",
                "profile.AccessProfileAccountWithAttributes": "#/components/schemas/profile.AccessProfileAccountWithAttributes"
              }
            },
            "x-tkh-writescope": {
              "auth.AccountPrimer": false,
              "profile.AccessProfileAccount": true
            },
            "x-tkh-discriminator": "profile.AccessProfileAccount"
          }
        ]
      },
      "profile.AccessProfileAccountActivation": {
        "type": "string",
        "enum": [
          "INACTIVE",
          "ACTIVE",
          "FORCE_INACTIVE",
          "FORCE_ACTIVE"
        ]
      },
      "profile.AccessProfileAccountLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/profile.AccessProfileAccount"
            }
          }
        }
      },
      "profile.AccessProfileAccountWithAttributes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/profile.AccessProfileAccount"
          },
          {
            "title": "AccessProfileAccountWithAttributes",
            "required": [
              "$type",
              "activation"
            ],
            "type": "object",
            "properties": {
              "attributes": {
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/identity.AccountAttributeValueSummary"
                }
              },
              "$type": {
                "type": "string",
                "default": "profile.AccessProfileAccountWithAttributes"
              }
            },
            "x-tkh-writescope": {
              "auth.AccountPrimer": false,
              "profile.AccessProfileAccount": true
            },
            "x-tkh-discriminator": "profile.AccessProfileAccountWithAttributes"
          }
        ]
      },
      "profile.AccessProfileAccountWithAttributesLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/profile.AccessProfileAccountWithAttributes"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "profile.AccessProfileClient": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "AccessProfileClient",
            "required": [
              "$type",
              "accessProfile"
            ],
            "type": "object",
            "properties": {
              "client": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/client.ClientApplicationPrimer"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "accessProfile": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/profile.AccessProfilePrimer"
                  },
                  {
                    "x-tkh-create-only": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "profile.AccessProfileClient"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "profile.AccessProfileClient": true
            },
            "x-tkh-discriminator": "profile.AccessProfileClient"
          }
        ]
      },
      "profile.AccessProfileClientLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/profile.AccessProfileClient"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "profile.AccessProfileClientLinkableWrapperWithCount": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/profile.AccessProfileClient"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          }
        },
        "x-tkh-discriminator": "LinkableWrapperWithCount"
      },
      "profile.AccessProfileGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "AccessProfileGroup",
            "required": [
              "$type",
              "accessProfile",
              "group"
            ],
            "type": "object",
            "properties": {
              "group": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "accessProfile": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/profile.AccessProfilePrimer"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "profile.AccessProfileGroup"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "profile.AccessProfileGroup": true
            },
            "x-tkh-discriminator": "profile.AccessProfileGroup"
          }
        ]
      },
      "profile.AccessProfileGroupLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/profile.AccessProfileGroup"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "profile.AccessProfileLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/profile.AccessProfile"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "profile.AccessProfilePrimer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "AccessProfilePrimer",
            "required": [
              "$type",
              "name"
            ],
            "type": "object",
            "properties": {
              "uuid": {
                "maxLength": 36,
                "minLength": 0,
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "name": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "profile.AccessProfilePrimer"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "profile.AccessProfile": "#/components/schemas/profile.AccessProfile",
                "profile.AccessProfilePrimer": "#/components/schemas/profile.AccessProfilePrimer"
              }
            },
            "x-tkh-discriminator": "profile.AccessProfilePrimer"
          }
        ]
      },
      "profile.AccessProfileProvisioning": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "AccessProfileProvisioning",
            "required": [
              "$type",
              "accessProfile",
              "groupOnSystem"
            ],
            "type": "object",
            "properties": {
              "groupOnSystem": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.GroupOnSystem"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "accessProfile": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/profile.AccessProfilePrimer"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "profile.AccessProfileProvisioning"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "profile.AccessProfileProvisioning": true
            },
            "x-tkh-discriminator": "profile.AccessProfileProvisioning"
          }
        ]
      },
      "profile.AccessProfileProvisioningLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/profile.AccessProfileProvisioning"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "profile.AccessProfileProvisioningLinkableWrapperWithCount": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/profile.AccessProfileProvisioning"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          }
        },
        "x-tkh-discriminator": "LinkableWrapperWithCount"
      },
      "provisioning.ADSamAccountNameScheme": {
        "type": "string",
        "enum": [
          "OMIT",
          "TRUNCATE",
          "TRANSFER",
          "TRANSFER_TRUNCATE",
          "USERNAME"
        ]
      },
      "provisioning.AbstractProvisionedLDAP": {
        "allOf": [
          {
            "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
          },
          {
            "title": "AbstractProvisionedLDAP",
            "required": [
              "$type",
              "baseDN",
              "cleanupPeriod",
              "groupOnSystemProvisioning",
              "host",
              "name",
              "owner",
              "port",
              "sshPublicKeySupport",
              "technicalAdministrator",
              "tls"
            ],
            "type": "object",
            "properties": {
              "host": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "port": {
                "type": "integer",
                "format": "int32",
                "x-tkh-default": 0
              },
              "failoverHost": {
                "type": "string"
              },
              "tls": {
                "$ref": "#/components/schemas/TLSLevel"
              },
              "baseDN": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "bindDN": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "bindPassword": {
                "maxLength": 128,
                "minLength": 0,
                "type": "string",
                "x-tkh-sensitive": true
              },
              "userDN": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "serviceAccountDN": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "groupDN": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "sshPublicKeySupport": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.LDAPSshPublicKeySupport"
                  },
                  {
                    "x-tkh-default": "SSH_PUBLIC_KEY"
                  }
                ]
              },
              "objectClasses": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "trustedCertificate": {
                "$ref": "#/components/schemas/certificate.CertificatePrimer"
              },
              "failoverTrustedCertificate": {
                "$ref": "#/components/schemas/certificate.CertificatePrimer"
              },
              "clientCertificate": {
                "$ref": "#/components/schemas/certificate.CertificatePrimer"
              },
              "attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/misc.AttributeCustomization"
                }
              },
              "$type": {
                "type": "string",
                "default": "provisioning.AbstractProvisionedLDAP"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "provisioning.AbstractProvisionedLDAP": "#/components/schemas/provisioning.AbstractProvisionedLDAP",
                "provisioning.ProvisionedAD": "#/components/schemas/provisioning.ProvisionedAD",
                "provisioning.ProvisionedLDAP": "#/components/schemas/provisioning.ProvisionedLDAP"
              }
            },
            "x-tkh-discriminator": "provisioning.AbstractProvisionedLDAP"
          }
        ]
      },
      "provisioning.AccountProvisioningResult": {
        "type": "string",
        "enum": [
          "OK",
          "CONFIGURATION_REQUIRED",
          "ERROR"
        ]
      },
      "provisioning.AccountProvisioningStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AccountProvisioningStatus",
            "required": [
              "$type",
              "configurationRequired",
              "error",
              "ok"
            ],
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/provisioning.AccountProvisioningResult"
              },
              "provisioningGroup": {
                "$ref": "#/components/schemas/group.ProvisioningGroup"
              },
              "provisionedSystem": {
                "$ref": "#/components/schemas/provisioning.ProvisionedSystemPrimer"
              },
              "description": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "provisioning.AccountProvisioningStatus"
              }
            },
            "x-tkh-discriminator": "provisioning.AccountProvisioningStatus"
          }
        ]
      },
      "provisioning.AccountProvisioningStatusReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AccountProvisioningStatusReport",
            "required": [
              "$type",
              "allOk",
              "anyError",
              "anyOk",
              "configurationRequired"
            ],
            "type": "object",
            "properties": {
              "status": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/provisioning.AccountProvisioningStatus"
                }
              },
              "$type": {
                "type": "string",
                "default": "provisioning.AccountProvisioningStatusReport"
              }
            },
            "x-tkh-discriminator": "provisioning.AccountProvisioningStatusReport"
          }
        ]
      },
      "provisioning.CircuitBreakerState": {
        "type": "string",
        "enum": [
          "CLOSED",
          "OPEN",
          "HALF_OPEN",
          "FORCED_OPEN"
        ]
      },
      "provisioning.CircuitBreakerStatistics": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "CircuitBreakerStatistics",
            "required": [
              "$type",
              "numberOfFailedCalls",
              "numberOfNotPermittedCalls",
              "numberOfSuccessfulCalls"
            ],
            "type": "object",
            "properties": {
              "numberOfFailedCalls": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "numberOfNotPermittedCalls": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "numberOfSuccessfulCalls": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "state": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.CircuitBreakerState"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "provisioning.CircuitBreakerStatistics"
              }
            },
            "x-tkh-discriminator": "provisioning.CircuitBreakerStatistics"
          }
        ]
      },
      "provisioning.DeprovisionAction": {
        "type": "string",
        "enum": [
          "NONE",
          "DEPROVISION_ACCOUNTS",
          "DESTROY_ACCOUNTS",
          "DESTROY_ALL"
        ]
      },
      "provisioning.GroupOnSystem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/provisioning.GroupOnSystemPrimer"
          },
          {
            "title": "GroupOnSystem",
            "required": [
              "$type",
              "nameInSystem",
              "owner",
              "provisioningEnabled",
              "type"
            ],
            "type": "object",
            "properties": {
              "system": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.ProvisionedSystemPrimer"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "owner": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true
                  }
                ]
              },
              "provisioningEnabled": {
                "type": "boolean",
                "x-tkh-default": true
              },
              "$type": {
                "type": "string",
                "default": "provisioning.GroupOnSystem"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "provgroups": {
                    "$ref": "#/components/schemas/group.ProvisioningGroupLinkableWrapperWithCount"
                  },
                  "serviceAccounts": {
                    "$ref": "#/components/schemas/serviceaccount.ServiceAccountPrimerLinkableWrapperWithCount"
                  },
                  "accessProfileProvisioning": {
                    "$ref": "#/components/schemas/profile.AccessProfileProvisioningLinkableWrapperWithCount"
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "provisioning.GroupOnSystem": true,
              "provisioning.GroupOnSystemPrimer": true
            },
            "x-tkh-discriminator": "provisioning.GroupOnSystem"
          }
        ]
      },
      "provisioning.GroupOnSystemLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/provisioning.GroupOnSystem"
            }
          }
        }
      },
      "provisioning.GroupOnSystemPrimer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "GroupOnSystemPrimer",
            "required": [
              "$type",
              "nameInSystem",
              "type"
            ],
            "type": "object",
            "properties": {
              "type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.GroupOnSystemType"
                  },
                  {
                    "x-tkh-create-only": true
                  }
                ]
              },
              "nameInSystem": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "x-tkh-create-only": true,
                "x-tkh-backend-determines-default": true
              },
              "shortNameInSystem": {
                "type": "string",
                "readOnly": true
              },
              "displayName": {
                "type": "string",
                "readOnly": true
              },
              "$type": {
                "type": "string",
                "default": "provisioning.GroupOnSystemPrimer"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "provisioning.GroupOnSystem": "#/components/schemas/provisioning.GroupOnSystem",
                "provisioning.GroupOnSystemPrimer": "#/components/schemas/provisioning.GroupOnSystemPrimer",
                "serviceaccount.ServiceAccountGroup": "#/components/schemas/serviceaccount.ServiceAccountGroup"
              }
            },
            "x-tkh-discriminator": "provisioning.GroupOnSystemPrimer"
          }
        ]
      },
      "provisioning.GroupOnSystemProvisioning": {
        "type": "string",
        "enum": [
          "ALWAYS_PROVISIONED",
          "PROVISIONED_BY_DEFAULT_CAN_ONLY_BE_ENABLED",
          "NOT_PROVISIONED_BY_DEFAULT_CAN_ONLY_BE_ENABLED",
          "PROVISIONED_BY_DEFAULT",
          "NOT_PROVISIONED_BY_DEFAULT"
        ]
      },
      "provisioning.GroupOnSystemType": {
        "type": "string",
        "enum": [
          "POSIX_GROUP",
          "GROUP_OF_NAMES",
          "GROUP_OF_UNIQUE_NAMES",
          "GROUP_GLOBAL_SECURITY",
          "GROUP_LOCAL_SECURITY",
          "GROUP_UNIVERSAL_SECURITY",
          "GROUP_UNKNOWN",
          "AZURE_ROLE",
          "AZURE_UNIFIED_GROUP",
          "AZURE_SECURITY_GROUP",
          "SCIM",
          "ACCOUNT_ONLY"
        ]
      },
      "provisioning.GroupOnSystemTypes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "GroupOnSystemTypes",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "types": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/provisioning.GroupOnSystemType"
                }
              },
              "$type": {
                "type": "string",
                "default": "provisioning.GroupOnSystemTypes"
              }
            },
            "x-tkh-discriminator": "provisioning.GroupOnSystemTypes"
          }
        ]
      },
      "provisioning.GroupProvisioningStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "GroupProvisioningStatus",
            "required": [
              "$type",
              "provisioningEndTime",
              "visibleOnDashboard"
            ],
            "type": "object",
            "properties": {
              "provisioningEndTime": {
                "type": "string",
                "format": "date-time"
              },
              "provisioningDuration": {
                "type": "string",
                "format": "duration",
                "readOnly": true
              },
              "provisioningPermissionEndTime": {
                "type": "string",
                "format": "date-time",
                "readOnly": true
              },
              "group": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.Group"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "folder": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupFolder"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "visibleOnDashboard": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "statusReport": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.AccountProvisioningStatusReport"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "provisioning.GroupProvisioningStatus"
              }
            },
            "x-tkh-discriminator": "provisioning.GroupProvisioningStatus"
          }
        ]
      },
      "provisioning.LDAPPasswordHashingScheme": {
        "type": "string",
        "enum": [
          "SSHA",
          "PBKDF2"
        ]
      },
      "provisioning.LDAPSshPublicKeySupport": {
        "type": "string",
        "enum": [
          "DISABLED",
          "SSH_PUBLIC_KEY",
          "ALT_SECURITY_IDENTITIES"
        ]
      },
      "provisioning.OwnedGroupOnSystemsWrapper": {
        "allOf": [
          {
            "$ref": "#/components/schemas/provisioning.GroupOnSystemLinkableWrapper"
          },
          {
            "required": [
              "unlinkedCount"
            ],
            "type": "object",
            "properties": {
              "unlinkedCount": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "x-tkh-default": 0
              }
            },
            "x-tkh-discriminator": "provisioning.OwnedGroupOnSystemsWrapper"
          }
        ],
        "x-tkh-discriminator": "provisioning.OwnedGroupOnSystemsWrapper"
      },
      "provisioning.ProvisionNumberSequence": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "ProvisionNumberSequence",
            "required": [
              "$type",
              "name",
              "nextID"
            ],
            "type": "object",
            "properties": {
              "name": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "nextID": {
                "maximum": 60000,
                "minimum": 2000,
                "type": "integer",
                "format": "int64",
                "x-tkh-default": 2001
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisionNumberSequence"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "systems": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/provisioning.ProvisionedSystemPrimerLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "provisioning.ProvisionNumberSequence": true
            },
            "x-tkh-discriminator": "provisioning.ProvisionNumberSequence"
          }
        ]
      },
      "provisioning.ProvisionNumberSequenceLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/provisioning.ProvisionNumberSequence"
            }
          }
        }
      },
      "provisioning.ProvisionedAD": {
        "allOf": [
          {
            "$ref": "#/components/schemas/provisioning.AbstractProvisionedLDAP"
          },
          {
            "title": "ProvisionedAD",
            "required": [
              "$type",
              "baseDN",
              "cleanupPeriod",
              "groupOnSystemProvisioning",
              "host",
              "name",
              "owner",
              "samAccountNameScheme",
              "sshPublicKeySupport",
              "technicalAdministrator",
              "tls"
            ],
            "type": "object",
            "properties": {
              "samAccountNameScheme": {
                "$ref": "#/components/schemas/provisioning.ADSamAccountNameScheme"
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisionedAD"
              }
            },
            "x-tkh-writescope": {
              "provisioning.AbstractProvisionedLDAP": true,
              "provisioning.ProvisionedAD": true,
              "provisioning.ProvisionedSystem": true,
              "provisioning.ProvisionedSystemPrimer": true
            },
            "x-tkh-discriminator": "provisioning.ProvisionedAD"
          }
        ]
      },
      "provisioning.ProvisionedAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/auth.AccountPrimer"
          },
          {
            "title": "ProvisionedAccount",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "uid": {
                "type": "integer",
                "format": "int64",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisionedAccount"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "auth.AccountPrimer": false,
              "provisioning.ProvisionedAccount": true
            },
            "x-tkh-discriminator": "provisioning.ProvisionedAccount"
          }
        ]
      },
      "provisioning.ProvisionedAccountLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/provisioning.ProvisionedAccount"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "provisioning.ProvisionedAzureOIDCDirectory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
          },
          {
            "title": "ProvisionedAzureOIDCDirectory",
            "required": [
              "$type",
              "accountsWritable",
              "cleanupPeriod",
              "directory",
              "groupOnSystemProvisioning",
              "name",
              "owner",
              "technicalAdministrator",
              "tenant"
            ],
            "type": "object",
            "properties": {
              "directory": {
                "$ref": "#/components/schemas/directory.AccountDirectoryPrimer"
              },
              "tenant": {
                "minLength": 1,
                "type": "string"
              },
              "accountsWritable": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisionedAzureOIDCDirectory"
              }
            },
            "x-tkh-writescope": {
              "provisioning.ProvisionedAzureOIDCDirectory": true,
              "provisioning.ProvisionedSystem": true,
              "provisioning.ProvisionedSystemPrimer": true
            },
            "x-tkh-discriminator": "provisioning.ProvisionedAzureOIDCDirectory"
          }
        ]
      },
      "provisioning.ProvisionedAzureSyncLDAPDirectory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
          },
          {
            "title": "ProvisionedAzureSyncLDAPDirectory",
            "required": [
              "$type",
              "cleanupPeriod",
              "clientId",
              "clientSecret",
              "directory",
              "groupOnSystemProvisioning",
              "name",
              "owner",
              "technicalAdministrator",
              "tenant"
            ],
            "type": "object",
            "properties": {
              "directory": {
                "$ref": "#/components/schemas/directory.AccountDirectoryPrimer"
              },
              "clientId": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "clientSecret": {
                "minLength": 1,
                "type": "string",
                "x-tkh-sensitive": true
              },
              "tenant": {
                "minLength": 1,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisionedAzureSyncLDAPDirectory"
              }
            },
            "x-tkh-writescope": {
              "provisioning.ProvisionedAzureSyncLDAPDirectory": true,
              "provisioning.ProvisionedSystem": true,
              "provisioning.ProvisionedSystemPrimer": true
            },
            "x-tkh-discriminator": "provisioning.ProvisionedAzureSyncLDAPDirectory"
          }
        ]
      },
      "provisioning.ProvisionedAzureTenant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
          },
          {
            "title": "ProvisionedAzureTenant",
            "required": [
              "$type",
              "cleanupPeriod",
              "clientId",
              "clientSecret",
              "groupOnSystemProvisioning",
              "name",
              "owner",
              "technicalAdministrator",
              "tenant"
            ],
            "type": "object",
            "properties": {
              "clientId": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "clientSecret": {
                "minLength": 1,
                "type": "string",
                "x-tkh-sensitive": true
              },
              "tenant": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "idpDomain": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisionedAzureTenant"
              }
            },
            "x-tkh-writescope": {
              "provisioning.ProvisionedAzureTenant": true,
              "provisioning.ProvisionedSystem": true,
              "provisioning.ProvisionedSystemPrimer": true
            },
            "x-tkh-discriminator": "provisioning.ProvisionedAzureTenant"
          }
        ]
      },
      "provisioning.ProvisionedInternalLDAP": {
        "allOf": [
          {
            "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
          },
          {
            "title": "ProvisionedInternalLDAP",
            "required": [
              "$type",
              "cleanupPeriod",
              "groupOnSystemProvisioning",
              "name",
              "owner",
              "technicalAdministrator"
            ],
            "type": "object",
            "properties": {
              "client": {
                "$ref": "#/components/schemas/client.LdapClient"
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisionedInternalLDAP"
              }
            },
            "x-tkh-writescope": {
              "provisioning.ProvisionedInternalLDAP": true,
              "provisioning.ProvisionedSystem": true,
              "provisioning.ProvisionedSystemPrimer": true
            },
            "x-tkh-discriminator": "provisioning.ProvisionedInternalLDAP"
          }
        ]
      },
      "provisioning.ProvisionedLDAP": {
        "allOf": [
          {
            "$ref": "#/components/schemas/provisioning.AbstractProvisionedLDAP"
          },
          {
            "title": "ProvisionedLDAP",
            "required": [
              "$type",
              "baseDN",
              "cleanupPeriod",
              "gid",
              "gidNumbering",
              "groupOnSystemProvisioning",
              "hashingScheme",
              "host",
              "name",
              "numbering",
              "owner",
              "sshPublicKeySupport",
              "technicalAdministrator",
              "tls"
            ],
            "type": "object",
            "properties": {
              "gid": {
                "type": "integer",
                "format": "int64",
                "x-tkh-default": 2000
              },
              "hashingScheme": {
                "$ref": "#/components/schemas/provisioning.LDAPPasswordHashingScheme"
              },
              "numbering": {
                "$ref": "#/components/schemas/provisioning.ProvisionNumberSequence"
              },
              "gidNumbering": {
                "$ref": "#/components/schemas/provisioning.ProvisionNumberSequence"
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisionedLDAP"
              }
            },
            "x-tkh-writescope": {
              "provisioning.AbstractProvisionedLDAP": true,
              "provisioning.ProvisionedLDAP": true,
              "provisioning.ProvisionedSystem": true,
              "provisioning.ProvisionedSystemPrimer": true
            },
            "x-tkh-discriminator": "provisioning.ProvisionedLDAP"
          }
        ]
      },
      "provisioning.ProvisionedLDAPDirectory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
          },
          {
            "title": "ProvisionedLDAPDirectory",
            "required": [
              "$type",
              "accountsWritable",
              "cleanupPeriod",
              "directory",
              "gid",
              "groupDN",
              "groupOnSystemProvisioning",
              "hashingScheme",
              "name",
              "owner",
              "samAccountNameScheme",
              "sshPublicKeySupport",
              "technicalAdministrator"
            ],
            "type": "object",
            "properties": {
              "directory": {
                "$ref": "#/components/schemas/directory.AccountDirectoryPrimer"
              },
              "groupDN": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "accountsWritable": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "samAccountNameScheme": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.ADSamAccountNameScheme"
                  },
                  {
                    "x-tkh-default": "USERNAME"
                  }
                ]
              },
              "attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/misc.AttributeCustomization"
                }
              },
              "sshPublicKeySupport": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.LDAPSshPublicKeySupport"
                  },
                  {
                    "x-tkh-default": "DISABLED"
                  }
                ]
              },
              "objectClasses": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "hashingScheme": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.LDAPPasswordHashingScheme"
                  },
                  {
                    "x-tkh-default": "PBKDF2"
                  }
                ]
              },
              "numbering": {
                "$ref": "#/components/schemas/provisioning.ProvisionNumberSequence"
              },
              "gidNumbering": {
                "$ref": "#/components/schemas/provisioning.ProvisionNumberSequence"
              },
              "gid": {
                "type": "integer",
                "format": "int64",
                "x-tkh-default": 2000
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisionedLDAPDirectory"
              }
            },
            "x-tkh-writescope": {
              "provisioning.ProvisionedLDAPDirectory": true,
              "provisioning.ProvisionedSystem": true,
              "provisioning.ProvisionedSystemPrimer": true
            },
            "x-tkh-discriminator": "provisioning.ProvisionedLDAPDirectory"
          }
        ]
      },
      "provisioning.ProvisionedNamespace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
          },
          {
            "title": "ProvisionedNamespace",
            "required": [
              "$type",
              "baseSystem",
              "cleanupPeriod",
              "groupDN",
              "groupOnSystemProvisioning",
              "name",
              "owner",
              "serviceAccountDN",
              "technicalAdministrator"
            ],
            "type": "object",
            "properties": {
              "baseSystem": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.ProvisionedSystemPrimer"
                  },
                  {
                    "x-tkh-create-only": true
                  }
                ]
              },
              "groupDN": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "serviceAccountDN": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisionedNamespace"
              }
            },
            "x-tkh-writescope": {
              "provisioning.ProvisionedNamespace": true,
              "provisioning.ProvisionedSystem": true,
              "provisioning.ProvisionedSystemPrimer": true
            },
            "x-tkh-discriminator": "provisioning.ProvisionedNamespace"
          }
        ]
      },
      "provisioning.ProvisionedSCIM": {
        "allOf": [
          {
            "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
          },
          {
            "title": "ProvisionedSCIM",
            "required": [
              "$type",
              "authenticationScheme",
              "cleanupPeriod",
              "groupOnSystemProvisioning",
              "name",
              "owner",
              "technicalAdministrator",
              "url",
              "vendor"
            ],
            "type": "object",
            "properties": {
              "vendor": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.ProvisionedSCIMVendor"
                  },
                  {
                    "x-tkh-default": "DEFAULT"
                  }
                ]
              },
              "url": {
                "maxLength": 512,
                "minLength": 0,
                "type": "string"
              },
              "authenticationScheme": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/HttpAuthenticationScheme"
                  },
                  {
                    "x-tkh-default": "NONE"
                  }
                ]
              },
              "basicAuthUsername": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "basicAuthPassword": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "bearerToken": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "customHeaderName": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              },
              "customHeaderValue": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/misc.AttributeCustomization"
                }
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisionedSCIM"
              }
            },
            "x-tkh-writescope": {
              "provisioning.ProvisionedSCIM": true,
              "provisioning.ProvisionedSystem": true,
              "provisioning.ProvisionedSystemPrimer": true
            },
            "x-tkh-discriminator": "provisioning.ProvisionedSCIM"
          }
        ]
      },
      "provisioning.ProvisionedSCIMVendor": {
        "type": "string",
        "enum": [
          "DEFAULT",
          "AWS",
          "KEYSTONE"
        ]
      },
      "provisioning.ProvisionedSystem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/provisioning.ProvisionedSystemPrimer"
          },
          {
            "title": "ProvisionedSystem",
            "required": [
              "$type",
              "accountCount",
              "cleanupPeriod",
              "groupOnSystemProvisioning",
              "name",
              "owner",
              "selfServiceExistingGroups",
              "selfServiceNewGroups",
              "selfServiceNewNamespaces",
              "selfServiceServiceAccounts",
              "shouldDestroyUnknownAccounts",
              "technicalAdministrator"
            ],
            "type": "object",
            "properties": {
              "accountCount": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "usernamePrefix": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "owner": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true
                  }
                ]
              },
              "technicalAdministrator": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true
                  }
                ]
              },
              "contentAdministrator": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupPrimer"
                  },
                  {
                    "x-tkh-create-only": true,
                    "x-tkh-backend-determines-default": true
                  }
                ]
              },
              "externalUuid": {
                "type": "string",
                "format": "uuid",
                "readOnly": true
              },
              "shouldDestroyUnknownAccounts": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "selfServiceNewGroups": {
                "type": "boolean",
                "x-tkh-default": true
              },
              "selfServiceExistingGroups": {
                "type": "boolean",
                "x-tkh-default": true
              },
              "selfServiceServiceAccounts": {
                "type": "boolean",
                "x-tkh-default": true
              },
              "selfServiceNewNamespaces": {
                "type": "boolean",
                "x-tkh-default": true
              },
              "cleanupPeriod": {
                "type": "object",
                "properties": {
                  "years": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "months": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "days": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "groupOnSystemProvisioning": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.GroupOnSystemProvisioning"
                  },
                  {
                    "x-tkh-default": "ALWAYS_PROVISIONED"
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisionedSystem"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "account": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/provisioning.ProvisionedAccount"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "loginName": {
                    "type": "string",
                    "readOnly": true
                  },
                  "markers": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/mark.ItemMarkers"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "supportedGroupTypes": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/provisioning.GroupOnSystemTypes"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "issuedPermissions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/client.OAuth2ClientPermissionWithClientLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "statistics": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/provisioning.CircuitBreakerStatistics"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "managementPermissions": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/provisioning.ProvisioningManagementPermissions"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "provisioning.AbstractProvisionedLDAP": "#/components/schemas/provisioning.AbstractProvisionedLDAP",
                "provisioning.ProvisionedAD": "#/components/schemas/provisioning.ProvisionedAD",
                "provisioning.ProvisionedAzureOIDCDirectory": "#/components/schemas/provisioning.ProvisionedAzureOIDCDirectory",
                "provisioning.ProvisionedAzureSyncLDAPDirectory": "#/components/schemas/provisioning.ProvisionedAzureSyncLDAPDirectory",
                "provisioning.ProvisionedAzureTenant": "#/components/schemas/provisioning.ProvisionedAzureTenant",
                "provisioning.ProvisionedInternalLDAP": "#/components/schemas/provisioning.ProvisionedInternalLDAP",
                "provisioning.ProvisionedLDAP": "#/components/schemas/provisioning.ProvisionedLDAP",
                "provisioning.ProvisionedLDAPDirectory": "#/components/schemas/provisioning.ProvisionedLDAPDirectory",
                "provisioning.ProvisionedNamespace": "#/components/schemas/provisioning.ProvisionedNamespace",
                "provisioning.ProvisionedSCIM": "#/components/schemas/provisioning.ProvisionedSCIM",
                "provisioning.ProvisionedSystem": "#/components/schemas/provisioning.ProvisionedSystem"
              }
            },
            "x-tkh-discriminator": "provisioning.ProvisionedSystem"
          }
        ]
      },
      "provisioning.ProvisionedSystemLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/provisioning.ProvisionedSystem"
            }
          }
        }
      },
      "provisioning.ProvisionedSystemPrimer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "ProvisionedSystemPrimer",
            "required": [
              "$type",
              "active",
              "adminPermissions",
              "canWriteAccounts",
              "contentAdminPermissions",
              "name",
              "ownerPermissions"
            ],
            "type": "object",
            "properties": {
              "active": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "uuid": {
                "maxLength": 36,
                "minLength": 0,
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "name": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.ProvisionedSystemType"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "organizationalUnit": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
                  },
                  {
                    "x-tkh-create-only": true,
                    "x-tkh-backend-determines-default": true
                  }
                ]
              },
              "ownerPermissions": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "adminPermissions": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "contentAdminPermissions": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "canWriteAccounts": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisionedSystemPrimer"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "provisioning.AbstractProvisionedLDAP": "#/components/schemas/provisioning.AbstractProvisionedLDAP",
                "provisioning.ProvisionedAD": "#/components/schemas/provisioning.ProvisionedAD",
                "provisioning.ProvisionedAzureOIDCDirectory": "#/components/schemas/provisioning.ProvisionedAzureOIDCDirectory",
                "provisioning.ProvisionedAzureSyncLDAPDirectory": "#/components/schemas/provisioning.ProvisionedAzureSyncLDAPDirectory",
                "provisioning.ProvisionedAzureTenant": "#/components/schemas/provisioning.ProvisionedAzureTenant",
                "provisioning.ProvisionedInternalLDAP": "#/components/schemas/provisioning.ProvisionedInternalLDAP",
                "provisioning.ProvisionedLDAP": "#/components/schemas/provisioning.ProvisionedLDAP",
                "provisioning.ProvisionedLDAPDirectory": "#/components/schemas/provisioning.ProvisionedLDAPDirectory",
                "provisioning.ProvisionedNamespace": "#/components/schemas/provisioning.ProvisionedNamespace",
                "provisioning.ProvisionedSCIM": "#/components/schemas/provisioning.ProvisionedSCIM",
                "provisioning.ProvisionedSystem": "#/components/schemas/provisioning.ProvisionedSystem",
                "provisioning.ProvisionedSystemPrimer": "#/components/schemas/provisioning.ProvisionedSystemPrimer"
              }
            },
            "x-tkh-discriminator": "provisioning.ProvisionedSystemPrimer"
          }
        ]
      },
      "provisioning.ProvisionedSystemPrimerLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/provisioning.ProvisionedSystemPrimer"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "provisioning.ProvisionedSystemType": {
        "type": "string",
        "enum": [
          "LDAP",
          "ACTIVE_DIRECTORY",
          "AZURE_TENANT",
          "SOURCE_LDAP_DIRECTORY",
          "SOURCE_AZURE_OIDC_DIRECTORY",
          "SOURCE_AZURE_SYNC_LDAP_DIRECTORY",
          "SCIM",
          "INTERNAL_LDAP",
          "PROVISIONED_NAMESPACE"
        ]
      },
      "provisioning.ProvisioningManagementPermissions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "ProvisioningManagementPermissions",
            "required": [
              "$type",
              "createNewGroupsAllowed",
              "createServiceAccountsAllowed",
              "reuseExistingGroupsAllowed"
            ],
            "type": "object",
            "properties": {
              "createNewGroupsAllowed": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "reuseExistingGroupsAllowed": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "createServiceAccountsAllowed": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisioningManagementPermissions"
              }
            },
            "x-tkh-discriminator": "provisioning.ProvisioningManagementPermissions"
          }
        ]
      },
      "provisioning.ProvisioningOperationAction": {
        "type": "string",
        "enum": [
          "LOG",
          "READ",
          "WRITE"
        ]
      },
      "provisioning.ProvisioningOperationLog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "ProvisioningOperationLog",
            "required": [
              "$type",
              "endTime",
              "startTime",
              "type"
            ],
            "type": "object",
            "properties": {
              "startTime": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "endTime": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.ProvisioningOperationType"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "context": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisioningOperationLog"
              }
            },
            "x-tkh-writescope": {
              "provisioning.ProvisioningOperationLog": true
            },
            "x-tkh-discriminator": "provisioning.ProvisioningOperationLog"
          }
        ]
      },
      "provisioning.ProvisioningOperationLogLevel": {
        "type": "string",
        "enum": [
          "ERROR",
          "WARNING",
          "INFO",
          "TRACE"
        ]
      },
      "provisioning.ProvisioningOperationLogLine": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "ProvisioningOperationLogLine",
            "required": [
              "$type",
              "action",
              "level",
              "message",
              "thread",
              "time"
            ],
            "type": "object",
            "properties": {
              "time": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "level": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.ProvisioningOperationLogLevel"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "action": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.ProvisioningOperationAction"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "message": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "thread": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "account": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "system": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "group": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "accessProfile": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "groupOnSystem": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "serviceAccount": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisioningOperationLogLine"
              }
            },
            "x-tkh-writescope": {
              "provisioning.ProvisioningOperationLogLine": true
            },
            "x-tkh-discriminator": "provisioning.ProvisioningOperationLogLine"
          }
        ]
      },
      "provisioning.ProvisioningOperationType": {
        "type": "string",
        "enum": [
          "INIT_ACCOUNT",
          "CHANGE_PASSWORD",
          "ROTATE_PASSWORDS",
          "UPDATE_ACCOUNT_ATTRIBUTES",
          "PRE_PROVISIONING_CHECK",
          "SYNC_MEMBERSHIP",
          "SYNC_COLLECTION",
          "SYNC_ACCOUNT",
          "SYNC_SERVICE_ACCOUNT",
          "SYNC_INCREMENTAL",
          "SYNC_METADATA",
          "SYNC_FULL",
          "DEACTIVATE_SYSTEM",
          "UPDATE_SYSTEM",
          "CREATE_GROUP_ON_SYSTEM",
          "REMOVE_GROUP_ON_SYSTEM",
          "UNLINK_GROUP_ON_SYSTEM",
          "DESTROY_ACCOUNT",
          "DESTROY_SERVICE_ACCOUNT",
          "CLEANUP_OLD_ACCOUNTS"
        ]
      },
      "provisioning.ProvisioningStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "ProvisioningStatus",
            "required": [
              "$type",
              "allLoaded",
              "ignoreErrors",
              "restrictedByLicense"
            ],
            "type": "object",
            "properties": {
              "ignoreErrors": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "restrictedByLicense": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "allLoaded": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "groups": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/provisioning.GroupProvisioningStatus"
                }
              },
              "$type": {
                "type": "string",
                "default": "provisioning.ProvisioningStatus"
              }
            },
            "x-tkh-discriminator": "provisioning.ProvisioningStatus"
          }
        ]
      },
      "provisioning.TokenPassword": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "TokenPassword",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "password": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "$type": {
                "type": "string",
                "default": "provisioning.TokenPassword"
              }
            },
            "x-tkh-discriminator": "provisioning.TokenPassword"
          }
        ]
      },
      "request.AbstractAccessProfileModificationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "AbstractAccessProfileModificationRequest",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "accessProfile": {
                "$ref": "#/components/schemas/profile.AccessProfilePrimer"
              },
              "$type": {
                "type": "string",
                "default": "request.AbstractAccessProfileModificationRequest"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "request.AbstractAccessProfileModificationRequest": "#/components/schemas/request.AbstractAccessProfileModificationRequest",
                "request.AddGroupToAccessProfileRequest": "#/components/schemas/request.AddGroupToAccessProfileRequest",
                "request.GrantApplicationRequest": "#/components/schemas/request.GrantApplicationRequest",
                "request.GrantGroupOnSystemRequest": "#/components/schemas/request.GrantGroupOnSystemRequest",
                "request.GrantGroupOnSystemRequestRequest": "#/components/schemas/request.GrantGroupOnSystemRequestRequest",
                "request.JoinGroupRequest": "#/components/schemas/request.JoinGroupRequest",
                "request.LinkDirectoryToAccessProfileRequest": "#/components/schemas/request.LinkDirectoryToAccessProfileRequest",
                "request.RemoveAccessProfileRequest": "#/components/schemas/request.RemoveAccessProfileRequest",
                "request.TransferAccessProfileOwnershipRequest": "#/components/schemas/request.TransferAccessProfileOwnershipRequest"
              }
            },
            "x-tkh-discriminator": "request.AbstractAccessProfileModificationRequest"
          }
        ]
      },
      "request.AbstractApplicationModificationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "AbstractApplicationModificationRequest",
            "required": [
              "$type",
              "application"
            ],
            "type": "object",
            "properties": {
              "application": {
                "$ref": "#/components/schemas/client.ClientApplicationPrimer"
              },
              "$type": {
                "type": "string",
                "default": "request.AbstractApplicationModificationRequest"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "request.AbstractApplicationModificationRequest": "#/components/schemas/request.AbstractApplicationModificationRequest",
                "request.GrantClientPermissionRequest": "#/components/schemas/request.GrantClientPermissionRequest",
                "request.TransferApplicationAdministrationRequest": "#/components/schemas/request.TransferApplicationAdministrationRequest",
                "request.TransferApplicationOwnershipRequest": "#/components/schemas/request.TransferApplicationOwnershipRequest"
              }
            },
            "x-tkh-discriminator": "request.AbstractApplicationModificationRequest"
          }
        ]
      },
      "request.AbstractOrganizationalUnitModificationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "AbstractOrganizationalUnitModificationRequest",
            "required": [
              "$type",
              "organizationalUnit"
            ],
            "type": "object",
            "properties": {
              "organizationalUnit": {
                "$ref": "#/components/schemas/organization.OrganizationalUnitPrimer"
              },
              "$type": {
                "type": "string",
                "default": "request.AbstractOrganizationalUnitModificationRequest"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "request.AbstractOrganizationalUnitModificationRequest": "#/components/schemas/request.AbstractOrganizationalUnitModificationRequest",
                "request.CreateGroupRequest": "#/components/schemas/request.CreateGroupRequest",
                "request.MoveGroupsRequest": "#/components/schemas/request.MoveGroupsRequest",
                "request.RemoveOrganizationalUnitRequest": "#/components/schemas/request.RemoveOrganizationalUnitRequest",
                "request.TransferOrganizationalUnitOwnershipRequest": "#/components/schemas/request.TransferOrganizationalUnitOwnershipRequest"
              }
            },
            "x-tkh-discriminator": "request.AbstractOrganizationalUnitModificationRequest"
          }
        ]
      },
      "request.AbstractProvisionedSystemModificationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "AbstractProvisionedSystemModificationRequest",
            "required": [
              "$type",
              "system"
            ],
            "type": "object",
            "properties": {
              "system": {
                "$ref": "#/components/schemas/provisioning.ProvisionedSystemPrimer"
              },
              "$type": {
                "type": "string",
                "default": "request.AbstractProvisionedSystemModificationRequest"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "request.AbstractProvisionedSystemModificationRequest": "#/components/schemas/request.AbstractProvisionedSystemModificationRequest",
                "request.CreateGroupOnSystemRequest": "#/components/schemas/request.CreateGroupOnSystemRequest",
                "request.CreateProvisionedNamespaceRequest": "#/components/schemas/request.CreateProvisionedNamespaceRequest",
                "request.CreateServiceAccountRequest": "#/components/schemas/request.CreateServiceAccountRequest",
                "request.RemoveProvisionedSystemRequest": "#/components/schemas/request.RemoveProvisionedSystemRequest",
                "request.TransferProvisionedSystemAdministrationRequest": "#/components/schemas/request.TransferProvisionedSystemAdministrationRequest",
                "request.TransferProvisionedSystemContentAdministrationRequest": "#/components/schemas/request.TransferProvisionedSystemContentAdministrationRequest",
                "request.TransferProvisionedSystemOwnershipRequest": "#/components/schemas/request.TransferProvisionedSystemOwnershipRequest"
              }
            },
            "x-tkh-discriminator": "request.AbstractProvisionedSystemModificationRequest"
          }
        ]
      },
      "request.AcceptCreateGroupOnSystemRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AcceptModificationRequestParameters"
          },
          {
            "title": "AcceptCreateGroupOnSystemRequestParameters",
            "required": [
              "$type",
              "updatedName"
            ],
            "type": "object",
            "properties": {
              "updatedName": {
                "minLength": 1,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "request.AcceptCreateGroupOnSystemRequestParameters"
              }
            },
            "x-tkh-discriminator": "request.AcceptCreateGroupOnSystemRequestParameters"
          }
        ]
      },
      "request.AcceptCreateGroupRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AcceptModificationRequestParameters"
          },
          {
            "title": "AcceptCreateGroupRequestParameters",
            "required": [
              "$type",
              "updatedName"
            ],
            "type": "object",
            "properties": {
              "updatedName": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "request.AcceptCreateGroupRequestParameters"
              }
            },
            "x-tkh-discriminator": "request.AcceptCreateGroupRequestParameters"
          }
        ]
      },
      "request.AcceptCreateProvisionedNamespaceRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AcceptModificationRequestParameters"
          },
          {
            "title": "AcceptCreateProvisionedNamespaceRequestParameters",
            "required": [
              "$type",
              "groupDN",
              "serviceAccountDN",
              "updatedName"
            ],
            "type": "object",
            "properties": {
              "updatedName": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "groupDN": {
                "type": "string"
              },
              "serviceAccountDN": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "request.AcceptCreateProvisionedNamespaceRequestParameters"
              }
            },
            "x-tkh-discriminator": "request.AcceptCreateProvisionedNamespaceRequestParameters"
          }
        ]
      },
      "request.AcceptCreateServiceAccountRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AcceptModificationRequestParameters"
          },
          {
            "title": "AcceptCreateServiceAccountRequestParameters",
            "required": [
              "$type",
              "updatedName"
            ],
            "type": "object",
            "properties": {
              "updatedName": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "request.AcceptCreateServiceAccountRequestParameters"
              }
            },
            "x-tkh-discriminator": "request.AcceptCreateServiceAccountRequestParameters"
          }
        ]
      },
      "request.AcceptGrantAccessRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AcceptModificationRequestParameters"
          },
          {
            "title": "AcceptGrantAccessRequestParameters",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "accessDuration": {
                "type": "string",
                "format": "duration"
              },
              "$type": {
                "type": "string",
                "default": "request.AcceptGrantAccessRequestParameters"
              }
            },
            "x-tkh-discriminator": "request.AcceptGrantAccessRequestParameters"
          }
        ]
      },
      "request.AcceptJoinGroupRequestParameters": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AcceptModificationRequestParameters"
          },
          {
            "title": "AcceptJoinGroupRequestParameters",
            "required": [
              "$type",
              "makeManager"
            ],
            "type": "object",
            "properties": {
              "makeManager": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "endDate": {
                "type": "string",
                "format": "date"
              },
              "$type": {
                "type": "string",
                "default": "request.AcceptJoinGroupRequestParameters"
              }
            },
            "x-tkh-discriminator": "request.AcceptJoinGroupRequestParameters"
          }
        ]
      },
      "request.AcceptModificationRequestParameters": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "AcceptModificationRequestParameters",
            "required": [
              "$type"
            ],
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.AcceptModificationRequestParameters"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "request.AcceptCreateGroupOnSystemRequestParameters": "#/components/schemas/request.AcceptCreateGroupOnSystemRequestParameters",
                "request.AcceptCreateGroupRequestParameters": "#/components/schemas/request.AcceptCreateGroupRequestParameters",
                "request.AcceptCreateProvisionedNamespaceRequestParameters": "#/components/schemas/request.AcceptCreateProvisionedNamespaceRequestParameters",
                "request.AcceptCreateServiceAccountRequestParameters": "#/components/schemas/request.AcceptCreateServiceAccountRequestParameters",
                "request.AcceptGrantAccessRequestParameters": "#/components/schemas/request.AcceptGrantAccessRequestParameters",
                "request.AcceptJoinGroupRequestParameters": "#/components/schemas/request.AcceptJoinGroupRequestParameters",
                "request.AcceptModificationRequestParameters": "#/components/schemas/request.AcceptModificationRequestParameters"
              }
            },
            "x-tkh-discriminator": "request.AcceptModificationRequestParameters"
          }
        ]
      },
      "request.AddGroupAdminRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "AddGroupAdminRequest",
            "required": [
              "$type",
              "newAdmin"
            ],
            "type": "object",
            "properties": {
              "newAdmin": {
                "$ref": "#/components/schemas/auth.AccountPrimer"
              },
              "privateKey": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "$type": {
                "type": "string",
                "default": "request.AddGroupAdminRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AddGroupAdminRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.AddGroupAdminRequest"
          }
        ]
      },
      "request.AddGroupToAccessProfileRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractAccessProfileModificationRequest"
          },
          {
            "title": "AddGroupToAccessProfileRequest",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.AddGroupToAccessProfileRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractAccessProfileModificationRequest": true,
              "request.AddGroupToAccessProfileRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.AddGroupToAccessProfileRequest"
          }
        ]
      },
      "request.AuthorizingGroupType": {
        "type": "string",
        "enum": [
          "PROVISIONING",
          "MEMBERSHIP",
          "DELEGATION",
          "AUDITING"
        ]
      },
      "request.CreateGroupOnSystemRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractProvisionedSystemModificationRequest"
          },
          {
            "title": "CreateGroupOnSystemRequest",
            "required": [
              "$type",
              "activationRequired",
              "groupOnSystemType",
              "nameInSystem",
              "owner",
              "system"
            ],
            "type": "object",
            "properties": {
              "accessProfile": {
                "$ref": "#/components/schemas/profile.AccessProfilePrimer"
              },
              "nameInSystem": {
                "minLength": 1,
                "type": "string"
              },
              "groupOnSystemType": {
                "$ref": "#/components/schemas/provisioning.GroupOnSystemType"
              },
              "activationRequired": {
                "type": "boolean",
                "x-tkh-default": true
              },
              "owner": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "$type": {
                "type": "string",
                "default": "request.CreateGroupOnSystemRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractProvisionedSystemModificationRequest": true,
              "request.CreateGroupOnSystemRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.CreateGroupOnSystemRequest"
          }
        ]
      },
      "request.CreateGroupRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractOrganizationalUnitModificationRequest"
          },
          {
            "title": "CreateGroupRequest",
            "required": [
              "$type",
              "groupName",
              "organizationalUnit"
            ],
            "type": "object",
            "properties": {
              "groupName": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "request.CreateGroupRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractOrganizationalUnitModificationRequest": true,
              "request.CreateGroupRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.CreateGroupRequest"
          }
        ]
      },
      "request.CreateProvisionedNamespaceRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractProvisionedSystemModificationRequest"
          },
          {
            "title": "CreateProvisionedNamespaceRequest",
            "required": [
              "$type",
              "namespaceName",
              "system"
            ],
            "type": "object",
            "properties": {
              "namespaceName": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "request.CreateProvisionedNamespaceRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractProvisionedSystemModificationRequest": true,
              "request.CreateProvisionedNamespaceRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.CreateProvisionedNamespaceRequest"
          }
        ]
      },
      "request.CreateServiceAccountRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractProvisionedSystemModificationRequest"
          },
          {
            "title": "CreateServiceAccountRequest",
            "required": [
              "$type",
              "system",
              "username"
            ],
            "type": "object",
            "properties": {
              "username": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "request.CreateServiceAccountRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractProvisionedSystemModificationRequest": true,
              "request.CreateServiceAccountRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.CreateServiceAccountRequest"
          }
        ]
      },
      "request.Disable2FARequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "Disable2FARequest",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "subject": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "request.Disable2FARequest"
              }
            },
            "x-tkh-writescope": {
              "request.Disable2FARequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.Disable2FARequest"
          }
        ]
      },
      "request.EnableProfileAdministrationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "EnableProfileAdministrationRequest",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.EnableProfileAdministrationRequest"
              }
            },
            "x-tkh-writescope": {
              "request.EnableProfileAdministrationRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.EnableProfileAdministrationRequest"
          }
        ]
      },
      "request.EnableTechnicalAdministrationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "EnableTechnicalAdministrationRequest",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.EnableTechnicalAdministrationRequest"
              }
            },
            "x-tkh-writescope": {
              "request.EnableTechnicalAdministrationRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.EnableTechnicalAdministrationRequest"
          }
        ]
      },
      "request.ExtendAccessRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "ExtendAccessRequest",
            "required": [
              "$type",
              "extendUntil"
            ],
            "type": "object",
            "properties": {
              "extendUntil": {
                "type": "string",
                "format": "date-time"
              },
              "$type": {
                "type": "string",
                "default": "request.ExtendAccessRequest"
              }
            },
            "x-tkh-writescope": {
              "request.ExtendAccessRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.ExtendAccessRequest"
          }
        ]
      },
      "request.GrantAccessRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "GrantAccessRequest",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.GrantAccessRequest"
              }
            },
            "x-tkh-writescope": {
              "request.GrantAccessRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.GrantAccessRequest"
          }
        ]
      },
      "request.GrantApplicationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractAccessProfileModificationRequest"
          },
          {
            "title": "GrantApplicationRequest",
            "required": [
              "$type",
              "application"
            ],
            "type": "object",
            "properties": {
              "application": {
                "$ref": "#/components/schemas/client.ClientApplicationPrimer"
              },
              "$type": {
                "type": "string",
                "default": "request.GrantApplicationRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractAccessProfileModificationRequest": true,
              "request.GrantApplicationRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.GrantApplicationRequest"
          }
        ]
      },
      "request.GrantClientPermissionRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractApplicationModificationRequest"
          },
          {
            "title": "GrantClientPermissionRequest",
            "required": [
              "$type",
              "application",
              "permissionType"
            ],
            "type": "object",
            "properties": {
              "permissionType": {
                "$ref": "#/components/schemas/client.OAuth2ClientPermissionType"
              },
              "system": {
                "$ref": "#/components/schemas/provisioning.ProvisionedSystemPrimer"
              },
              "$type": {
                "type": "string",
                "default": "request.GrantClientPermissionRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractApplicationModificationRequest": true,
              "request.GrantClientPermissionRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.GrantClientPermissionRequest"
          }
        ]
      },
      "request.GrantGroupOnSystemRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractAccessProfileModificationRequest"
          },
          {
            "title": "GrantGroupOnSystemRequest",
            "required": [
              "$type",
              "activationRequired",
              "groupOnSystem"
            ],
            "type": "object",
            "properties": {
              "groupOnSystem": {
                "$ref": "#/components/schemas/provisioning.GroupOnSystem"
              },
              "activationRequired": {
                "type": "boolean",
                "x-tkh-default": true
              },
              "originalRequester": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/auth.AccountPrimer"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "request.GrantGroupOnSystemRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractAccessProfileModificationRequest": true,
              "request.GrantGroupOnSystemRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.GrantGroupOnSystemRequest"
          }
        ]
      },
      "request.GrantGroupOnSystemRequestRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractAccessProfileModificationRequest"
          },
          {
            "title": "GrantGroupOnSystemRequestRequest",
            "required": [
              "$type",
              "activationRequired",
              "groupOnSystem"
            ],
            "type": "object",
            "properties": {
              "groupOnSystem": {
                "$ref": "#/components/schemas/provisioning.GroupOnSystem"
              },
              "activationRequired": {
                "type": "boolean",
                "x-tkh-default": true
              },
              "$type": {
                "type": "string",
                "default": "request.GrantGroupOnSystemRequestRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractAccessProfileModificationRequest": true,
              "request.GrantGroupOnSystemRequestRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.GrantGroupOnSystemRequestRequest"
          }
        ]
      },
      "request.GrantServiceAccountGroupRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "GrantServiceAccountGroupRequest",
            "required": [
              "$type",
              "groupOnSystem",
              "serviceAccount"
            ],
            "type": "object",
            "properties": {
              "groupOnSystem": {
                "$ref": "#/components/schemas/provisioning.GroupOnSystem"
              },
              "serviceAccount": {
                "$ref": "#/components/schemas/serviceaccount.ServiceAccountPrimer"
              },
              "$type": {
                "type": "string",
                "default": "request.GrantServiceAccountGroupRequest"
              }
            },
            "x-tkh-writescope": {
              "request.GrantServiceAccountGroupRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.GrantServiceAccountGroupRequest"
          }
        ]
      },
      "request.GroupNestAccountAction": {
        "type": "string",
        "enum": [
          "REMOVE",
          "CONVERT",
          "RETAIN"
        ]
      },
      "request.JoinGroupRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractAccessProfileModificationRequest"
          },
          {
            "title": "JoinGroupRequest",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.JoinGroupRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractAccessProfileModificationRequest": true,
              "request.JoinGroupRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.JoinGroupRequest"
          }
        ]
      },
      "request.JoinVaultRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "JoinVaultRequest",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.JoinVaultRequest"
              }
            },
            "x-tkh-writescope": {
              "request.JoinVaultRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.JoinVaultRequest"
          }
        ]
      },
      "request.LinkDirectoryToAccessProfileRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractAccessProfileModificationRequest"
          },
          {
            "title": "LinkDirectoryToAccessProfileRequest",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "directory": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/directory.AccountDirectoryPrimer"
                  },
                  {
                    "x-tkh-immutable": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "request.LinkDirectoryToAccessProfileRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractAccessProfileModificationRequest": true,
              "request.LinkDirectoryToAccessProfileRequest": true,
              "request.ModificationRequest": true
            },
            "x-tkh-discriminator": "request.LinkDirectoryToAccessProfileRequest"
          }
        ]
      },
      "request.ModificationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "ModificationRequest",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "account": {
                "$ref": "#/components/schemas/auth.AccountPrimer"
              },
              "group": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "comment": {
                "type": "string"
              },
              "feedback": {
                "type": "string"
              },
              "type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/request.ModificationRequestType"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "status": {
                "$ref": "#/components/schemas/request.ModificationRequestStatus"
              },
              "mailKey": {
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "$type": {
                "type": "string",
                "default": "request.ModificationRequest"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "acceptParams": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/request.AcceptModificationRequestParameters"
                      },
                      {
                        "writeOnly": true
                      }
                    ]
                  },
                  "resetStatus": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/request.PasswordResetRequestStatus"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "request.AbstractAccessProfileModificationRequest": "#/components/schemas/request.AbstractAccessProfileModificationRequest",
                "request.AbstractApplicationModificationRequest": "#/components/schemas/request.AbstractApplicationModificationRequest",
                "request.AbstractOrganizationalUnitModificationRequest": "#/components/schemas/request.AbstractOrganizationalUnitModificationRequest",
                "request.AbstractProvisionedSystemModificationRequest": "#/components/schemas/request.AbstractProvisionedSystemModificationRequest",
                "request.AddGroupAdminRequest": "#/components/schemas/request.AddGroupAdminRequest",
                "request.AddGroupToAccessProfileRequest": "#/components/schemas/request.AddGroupToAccessProfileRequest",
                "request.CreateGroupOnSystemRequest": "#/components/schemas/request.CreateGroupOnSystemRequest",
                "request.CreateGroupRequest": "#/components/schemas/request.CreateGroupRequest",
                "request.CreateProvisionedNamespaceRequest": "#/components/schemas/request.CreateProvisionedNamespaceRequest",
                "request.CreateServiceAccountRequest": "#/components/schemas/request.CreateServiceAccountRequest",
                "request.Disable2FARequest": "#/components/schemas/request.Disable2FARequest",
                "request.EnableProfileAdministrationRequest": "#/components/schemas/request.EnableProfileAdministrationRequest",
                "request.EnableTechnicalAdministrationRequest": "#/components/schemas/request.EnableTechnicalAdministrationRequest",
                "request.ExtendAccessRequest": "#/components/schemas/request.ExtendAccessRequest",
                "request.GrantAccessRequest": "#/components/schemas/request.GrantAccessRequest",
                "request.GrantApplicationRequest": "#/components/schemas/request.GrantApplicationRequest",
                "request.GrantClientPermissionRequest": "#/components/schemas/request.GrantClientPermissionRequest",
                "request.GrantGroupOnSystemRequest": "#/components/schemas/request.GrantGroupOnSystemRequest",
                "request.GrantGroupOnSystemRequestRequest": "#/components/schemas/request.GrantGroupOnSystemRequestRequest",
                "request.GrantServiceAccountGroupRequest": "#/components/schemas/request.GrantServiceAccountGroupRequest",
                "request.JoinGroupRequest": "#/components/schemas/request.JoinGroupRequest",
                "request.JoinVaultRequest": "#/components/schemas/request.JoinVaultRequest",
                "request.LinkDirectoryToAccessProfileRequest": "#/components/schemas/request.LinkDirectoryToAccessProfileRequest",
                "request.ModificationRequest": "#/components/schemas/request.ModificationRequest",
                "request.MoveGroupsRequest": "#/components/schemas/request.MoveGroupsRequest",
                "request.PasswordResetRequest": "#/components/schemas/request.PasswordResetRequest",
                "request.RemoveAccessProfileRequest": "#/components/schemas/request.RemoveAccessProfileRequest",
                "request.RemoveGroupRequest": "#/components/schemas/request.RemoveGroupRequest",
                "request.RemoveOrganizationalUnitRequest": "#/components/schemas/request.RemoveOrganizationalUnitRequest",
                "request.RemoveProvisionedSystemRequest": "#/components/schemas/request.RemoveProvisionedSystemRequest",
                "request.ReviewAuditRequest": "#/components/schemas/request.ReviewAuditRequest",
                "request.RevokeAdminRequest": "#/components/schemas/request.RevokeAdminRequest",
                "request.SetupAuthorizingGroupRequest": "#/components/schemas/request.SetupAuthorizingGroupRequest",
                "request.SetupNestedGroupRequest": "#/components/schemas/request.SetupNestedGroupRequest",
                "request.TransferAccessProfileOwnershipRequest": "#/components/schemas/request.TransferAccessProfileOwnershipRequest",
                "request.TransferApplicationAdministrationRequest": "#/components/schemas/request.TransferApplicationAdministrationRequest",
                "request.TransferApplicationOwnershipRequest": "#/components/schemas/request.TransferApplicationOwnershipRequest",
                "request.TransferGroupOnSystemOwnershipRequest": "#/components/schemas/request.TransferGroupOnSystemOwnershipRequest",
                "request.TransferOrganizationalUnitOwnershipRequest": "#/components/schemas/request.TransferOrganizationalUnitOwnershipRequest",
                "request.TransferProvisionedSystemAdministrationRequest": "#/components/schemas/request.TransferProvisionedSystemAdministrationRequest",
                "request.TransferProvisionedSystemContentAdministrationRequest": "#/components/schemas/request.TransferProvisionedSystemContentAdministrationRequest",
                "request.TransferProvisionedSystemOwnershipRequest": "#/components/schemas/request.TransferProvisionedSystemOwnershipRequest",
                "request.TransferServiceAccountAdministrationRequest": "#/components/schemas/request.TransferServiceAccountAdministrationRequest",
                "request.UpdateGroupMembershipRequest": "#/components/schemas/request.UpdateGroupMembershipRequest",
                "request.UpdateLicenseRequest": "#/components/schemas/request.UpdateLicenseRequest",
                "request.VerifyInternalAccountRequest": "#/components/schemas/request.VerifyInternalAccountRequest"
              }
            },
            "x-tkh-discriminator": "request.ModificationRequest"
          }
        ]
      },
      "request.ModificationRequestLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/request.ModificationRequest"
            }
          }
        }
      },
      "request.ModificationRequestReport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "ModificationRequestReport",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "conclusion": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/request.ModificationRequestReportConclusion"
                  },
                  {
                    "x-tkh-default": "OK"
                  }
                ]
              },
              "errorDetails": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/request.ModificationRequestReportErrorDetails"
                }
              },
              "changeDetails": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/request.ModificationRequestReportObjectChangeDetails"
                }
              },
              "$type": {
                "type": "string",
                "default": "request.ModificationRequestReport"
              }
            },
            "x-tkh-discriminator": "request.ModificationRequestReport"
          }
        ]
      },
      "request.ModificationRequestReportChange": {
        "type": "string",
        "enum": [
          "ACCOUNT_REMOVED_FROM_GROUP",
          "MODIFICATION_REQUEST_CANCELLED",
          "PROVISIONING_GROUP_REMOVED_OUT_OF_SCOPE",
          "PROVISIONING_GROUP_REMOVED_OWNER",
          "SERVICE_ACCOUNT_GROUP_REMOVED_OUT_OF_SCOPE",
          "SERVICE_ACCOUNT_GROUP_REMOVED_OWNER",
          "GROUP_CLIENT_REMOVED_OUT_OF_SCOPE",
          "GROUP_CLIENT_REMOVED_OWNER",
          "ORGANIZATIONAL_UNIT_CLIENT_APPLICATION_REMOVED_OUT_OF_SCOPE",
          "CLIENT_PERMISSION_REMOVED_OUT_OF_SCOPE",
          "ACCESS_PROFILE_CLIENT_REMOVED_OUT_OF_SCOPE",
          "ACCESS_PROFILE_CLIENT_REMOVED_OWNER",
          "ACCESS_PROFILE_GROUP_REMOVED_OUT_OF_SCOPE",
          "ACCESS_PROFILE_GROUP_REMOVED_OWNER",
          "ACCESS_PROFILE_PROVISIONING_REMOVED_OUT_OF_SCOPE",
          "ACCESS_PROFILE_PROVISIONING_REMOVED_OWNER",
          "ACCOUNT_REMOVED_FROM_ACCESS_PROFILE",
          "GROUP_CLASSIFICATION_REMOVED",
          "GROUP_VAULT_RECOVERY_RESET",
          "GROUP_MADE_PUBLIC",
          "GROUP_AUTHORIZATION_REMOVED",
          "GROUP_NESTING_REMOVED",
          "SERVICE_ACCOUNT_REMOVED",
          "ORGANIZATIONAL_UNIT_REMOVED",
          "ACCESS_PROFILE_REMOVED",
          "SYSTEM_ACCOUNTS_WRITABLE_DISABLED",
          "GROUP_ACTIVATION_FOR_VAULT_DISABLED",
          "GROUP_ACTIVATION_FOR_SSO_DISABLED",
          "GROUP_ACTIVATION_FOR_PROVISIONING_DISABLED"
        ]
      },
      "request.ModificationRequestReportChangeDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "ModificationRequestReportChangeDetails",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "change": {
                "$ref": "#/components/schemas/request.ModificationRequestReportChange"
              },
              "objectName": {
                "type": "string"
              },
              "subjectName": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "request.ModificationRequestReportChangeDetails"
              }
            },
            "x-tkh-discriminator": "request.ModificationRequestReportChangeDetails"
          }
        ]
      },
      "request.ModificationRequestReportConclusion": {
        "type": "string",
        "enum": [
          "OK",
          "CANNOT_BE_EXECUTED"
        ]
      },
      "request.ModificationRequestReportError": {
        "type": "string",
        "enum": [
          "ADMIN_GROUP_CANNOT_BE_MOVED",
          "AUDITOR_GROUP_CANNOT_BE_MOVED",
          "GROUP_FULFILLS_GLOBAL_ROLE",
          "GROUP_OWNS_OR_HELPDESKS_DIRECTORY",
          "GROUP_OWNS_OR_ADMINS_SYSTEM",
          "GROUP_OWNS_OU",
          "GROUP_PART_OF_NESTING_TREE",
          "MANAGER_CANNOT_BE_MOVED",
          "MULTIPLE_OUS",
          "ONE_MOVEABLE_VAULT_ACCESS_OF_MULTIPLE_MEMBERS",
          "ZERO_MOVEABLE_VAULT_ACCESS_MEMBERS",
          "GROUP_OWNER_CLIENTAPP_WITH_TECHADMIN_OTHER_OU",
          "GROUP_TECHADMIN_CLIENTAPP_WITH_OWNER_OTHER_OU"
        ]
      },
      "request.ModificationRequestReportErrorDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "ModificationRequestReportErrorDetails",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "error": {
                "$ref": "#/components/schemas/request.ModificationRequestReportError"
              },
              "names": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "$type": {
                "type": "string",
                "default": "request.ModificationRequestReportErrorDetails"
              }
            },
            "x-tkh-discriminator": "request.ModificationRequestReportErrorDetails"
          }
        ]
      },
      "request.ModificationRequestReportObjectChangeDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "ModificationRequestReportObjectChangeDetails",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "changeDetails": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/request.ModificationRequestReportChangeDetails"
                }
              },
              "$type": {
                "type": "string",
                "default": "request.ModificationRequestReportObjectChangeDetails"
              }
            },
            "x-tkh-discriminator": "request.ModificationRequestReportObjectChangeDetails"
          }
        ]
      },
      "request.ModificationRequestStatus": {
        "type": "string",
        "enum": [
          "REQUESTED",
          "ALLOWED",
          "DISALLOWED",
          "CANCELLED"
        ]
      },
      "request.ModificationRequestType": {
        "type": "string",
        "enum": [
          "ADD_GROUP_ADMIN",
          "ADD_GROUP_TO_ACCESS_PROFILE",
          "CREATE_GROUP",
          "CREATE_GROUP_ON_SYSTEM",
          "CREATE_PROVISIONED_NAMESPACE",
          "CREATE_SERVICE_ACCOUNT",
          "DISABLE_2FA",
          "ENABLE_PROFILE_ADMINISTRATION",
          "ENABLE_TECHNICAL_ADMINISTRATION",
          "EXTEND_ACCESS",
          "GRANT_ACCESS",
          "GRANT_APPLICATION",
          "GRANT_CLIENT_PERMISSION",
          "GRANT_GROUP_ON_SYSTEM",
          "GRANT_GROUP_ON_SYSTEM_REQUEST",
          "GRANT_SERVICE_ACCOUNT_GROUP",
          "JOIN_GROUP",
          "JOIN_VAULT",
          "LINK_DIRECTORY_TO_ACCESS_PROFILE",
          "MOVE_GROUPS",
          "REMOVE_ACCESS_PROFILE",
          "REMOVE_GROUP",
          "REMOVE_ORGANIZATIONAL_UNIT",
          "REMOVE_PROVISIONED_SYSTEM",
          "RESET_PASSWORD",
          "REVIEW_AUDIT",
          "REVOKE_ADMIN",
          "SETUP_AUTHORIZING_GROUP",
          "SETUP_NESTED_GROUP",
          "TRANSFER_ACCESS_PROFILE_OWNERSHIP",
          "TRANSFER_APPLICATION_ADMINISTRATION",
          "TRANSFER_APPLICATION_OWNERSHIP",
          "TRANSFER_GROUP_ON_SYSTEM_OWNERSHIP",
          "TRANSFER_ORGANIZATIONAL_UNIT_OWNERSHIP",
          "TRANSFER_PROVISIONED_SYSTEM_ADMINISTRATION",
          "TRANSFER_PROVISIONED_SYSTEM_CONTENT_ADMINISTRATION",
          "TRANSFER_PROVISIONED_SYSTEM_OWNERSHIP",
          "TRANSFER_SERVICE_ACCOUNT_ADMINISTRATION",
          "UPDATE_GROUP_MEMBERSHIP",
          "UPDATE_LICENSE",
          "VERIFY_INTERNAL_ACCOUNT"
        ]
      },
      "request.MoveGroupsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractOrganizationalUnitModificationRequest"
          },
          {
            "title": "MoveGroupsRequest",
            "required": [
              "$type",
              "groupCount",
              "organizationalUnit"
            ],
            "type": "object",
            "properties": {
              "groups": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/group.GroupPrimer"
                }
              },
              "groupCount": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "$type": {
                "type": "string",
                "default": "request.MoveGroupsRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractOrganizationalUnitModificationRequest": true,
              "request.ModificationRequest": true,
              "request.MoveGroupsRequest": true
            },
            "x-tkh-discriminator": "request.MoveGroupsRequest"
          }
        ]
      },
      "request.PasswordResetEmailType": {
        "type": "string",
        "enum": [
          "NONE",
          "REACTIVATION",
          "EXTERNAL"
        ]
      },
      "request.PasswordResetRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "PasswordResetRequest",
            "required": [
              "$type",
              "unsyncedPassword"
            ],
            "type": "object",
            "properties": {
              "newVaultPassword": {
                "type": "string",
                "writeOnly": true,
                "x-tkh-sensitive": true
              },
              "newVaultAndDirectoryPassword": {
                "type": "string",
                "writeOnly": true,
                "x-tkh-sensitive": true
              },
              "unsyncedPassword": {
                "type": "boolean",
                "writeOnly": true,
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "request.PasswordResetRequest"
              }
            },
            "x-tkh-writescope": {
              "request.ModificationRequest": true,
              "request.PasswordResetRequest": true
            },
            "x-tkh-discriminator": "request.PasswordResetRequest"
          }
        ]
      },
      "request.PasswordResetRequestStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "PasswordResetRequestStatus",
            "required": [
              "$type",
              "nrAccepted"
            ],
            "type": "object",
            "properties": {
              "cooldownEnd": {
                "type": "string",
                "format": "date-time"
              },
              "nrAccepted": {
                "type": "integer",
                "format": "int64",
                "x-tkh-default": 0
              },
              "managers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "resetViaMail": {
                "$ref": "#/components/schemas/request.PasswordResetEmailType"
              },
              "$type": {
                "type": "string",
                "default": "request.PasswordResetRequestStatus"
              }
            },
            "x-tkh-discriminator": "request.PasswordResetRequestStatus"
          }
        ]
      },
      "request.RemoveAccessProfileRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractAccessProfileModificationRequest"
          },
          {
            "title": "RemoveAccessProfileRequest",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "accessProfileName": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "request.RemoveAccessProfileRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractAccessProfileModificationRequest": true,
              "request.ModificationRequest": true,
              "request.RemoveAccessProfileRequest": true
            },
            "x-tkh-discriminator": "request.RemoveAccessProfileRequest"
          }
        ]
      },
      "request.RemoveGroupRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "RemoveGroupRequest",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "groupName": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "request.RemoveGroupRequest"
              }
            },
            "x-tkh-writescope": {
              "request.ModificationRequest": true,
              "request.RemoveGroupRequest": true
            },
            "x-tkh-discriminator": "request.RemoveGroupRequest"
          }
        ]
      },
      "request.RemoveOrganizationalUnitRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractOrganizationalUnitModificationRequest"
          },
          {
            "title": "RemoveOrganizationalUnitRequest",
            "required": [
              "$type",
              "organizationalUnit"
            ],
            "type": "object",
            "properties": {
              "organizationalUnitName": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "request.RemoveOrganizationalUnitRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractOrganizationalUnitModificationRequest": true,
              "request.ModificationRequest": true,
              "request.RemoveOrganizationalUnitRequest": true
            },
            "x-tkh-discriminator": "request.RemoveOrganizationalUnitRequest"
          }
        ]
      },
      "request.RemoveProvisionedSystemRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractProvisionedSystemModificationRequest"
          },
          {
            "title": "RemoveProvisionedSystemRequest",
            "required": [
              "$type",
              "deprovisionAction",
              "system"
            ],
            "type": "object",
            "properties": {
              "systemName": {
                "type": "string"
              },
              "deprovisionAction": {
                "$ref": "#/components/schemas/provisioning.DeprovisionAction"
              },
              "$type": {
                "type": "string",
                "default": "request.RemoveProvisionedSystemRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractProvisionedSystemModificationRequest": true,
              "request.ModificationRequest": true,
              "request.RemoveProvisionedSystemRequest": true
            },
            "x-tkh-discriminator": "request.RemoveProvisionedSystemRequest"
          }
        ]
      },
      "request.ReviewAuditRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "ReviewAuditRequest",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.ReviewAuditRequest"
              }
            },
            "x-tkh-writescope": {
              "request.ModificationRequest": true,
              "request.ReviewAuditRequest": true
            },
            "x-tkh-discriminator": "request.ReviewAuditRequest"
          }
        ]
      },
      "request.RevokeAdminRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "RevokeAdminRequest",
            "required": [
              "$type",
              "admin"
            ],
            "type": "object",
            "properties": {
              "admin": {
                "$ref": "#/components/schemas/auth.AccountPrimer"
              },
              "$type": {
                "type": "string",
                "default": "request.RevokeAdminRequest"
              }
            },
            "x-tkh-writescope": {
              "request.ModificationRequest": true,
              "request.RevokeAdminRequest": true
            },
            "x-tkh-discriminator": "request.RevokeAdminRequest"
          }
        ]
      },
      "request.SetupAuthorizingGroupRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "SetupAuthorizingGroupRequest",
            "required": [
              "$type",
              "authorizingGroupType",
              "connect"
            ],
            "type": "object",
            "properties": {
              "connect": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "authorizingGroupType": {
                "$ref": "#/components/schemas/request.AuthorizingGroupType"
              },
              "requestingGroup": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "$type": {
                "type": "string",
                "default": "request.SetupAuthorizingGroupRequest"
              }
            },
            "x-tkh-writescope": {
              "request.ModificationRequest": true,
              "request.SetupAuthorizingGroupRequest": true
            },
            "x-tkh-discriminator": "request.SetupAuthorizingGroupRequest"
          }
        ]
      },
      "request.SetupNestedGroupRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "SetupNestedGroupRequest",
            "required": [
              "$type",
              "accountAction",
              "connect"
            ],
            "type": "object",
            "properties": {
              "connect": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "requestingGroup": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "accountAction": {
                "$ref": "#/components/schemas/request.GroupNestAccountAction"
              },
              "$type": {
                "type": "string",
                "default": "request.SetupNestedGroupRequest"
              }
            },
            "x-tkh-writescope": {
              "request.ModificationRequest": true,
              "request.SetupNestedGroupRequest": true
            },
            "x-tkh-discriminator": "request.SetupNestedGroupRequest"
          }
        ]
      },
      "request.TransferAccessProfileOwnershipRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractAccessProfileModificationRequest"
          },
          {
            "title": "TransferAccessProfileOwnershipRequest",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.TransferAccessProfileOwnershipRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractAccessProfileModificationRequest": true,
              "request.ModificationRequest": true,
              "request.TransferAccessProfileOwnershipRequest": true
            },
            "x-tkh-discriminator": "request.TransferAccessProfileOwnershipRequest"
          }
        ]
      },
      "request.TransferApplicationAdministrationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractApplicationModificationRequest"
          },
          {
            "title": "TransferApplicationAdministrationRequest",
            "required": [
              "$type",
              "application"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.TransferApplicationAdministrationRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractApplicationModificationRequest": true,
              "request.ModificationRequest": true,
              "request.TransferApplicationAdministrationRequest": true
            },
            "x-tkh-discriminator": "request.TransferApplicationAdministrationRequest"
          }
        ]
      },
      "request.TransferApplicationOwnershipRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractApplicationModificationRequest"
          },
          {
            "title": "TransferApplicationOwnershipRequest",
            "required": [
              "$type",
              "application"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.TransferApplicationOwnershipRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractApplicationModificationRequest": true,
              "request.ModificationRequest": true,
              "request.TransferApplicationOwnershipRequest": true
            },
            "x-tkh-discriminator": "request.TransferApplicationOwnershipRequest"
          }
        ]
      },
      "request.TransferGroupOnSystemOwnershipRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "TransferGroupOnSystemOwnershipRequest",
            "required": [
              "$type",
              "groupOnSystem"
            ],
            "type": "object",
            "properties": {
              "groupOnSystem": {
                "$ref": "#/components/schemas/provisioning.GroupOnSystem"
              },
              "$type": {
                "type": "string",
                "default": "request.TransferGroupOnSystemOwnershipRequest"
              }
            },
            "x-tkh-writescope": {
              "request.ModificationRequest": true,
              "request.TransferGroupOnSystemOwnershipRequest": true
            },
            "x-tkh-discriminator": "request.TransferGroupOnSystemOwnershipRequest"
          }
        ]
      },
      "request.TransferOrganizationalUnitOwnershipRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractOrganizationalUnitModificationRequest"
          },
          {
            "title": "TransferOrganizationalUnitOwnershipRequest",
            "required": [
              "$type",
              "organizationalUnit"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.TransferOrganizationalUnitOwnershipRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractOrganizationalUnitModificationRequest": true,
              "request.ModificationRequest": true,
              "request.TransferOrganizationalUnitOwnershipRequest": true
            },
            "x-tkh-discriminator": "request.TransferOrganizationalUnitOwnershipRequest"
          }
        ]
      },
      "request.TransferProvisionedSystemAdministrationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractProvisionedSystemModificationRequest"
          },
          {
            "title": "TransferProvisionedSystemAdministrationRequest",
            "required": [
              "$type",
              "system"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.TransferProvisionedSystemAdministrationRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractProvisionedSystemModificationRequest": true,
              "request.ModificationRequest": true,
              "request.TransferProvisionedSystemAdministrationRequest": true
            },
            "x-tkh-discriminator": "request.TransferProvisionedSystemAdministrationRequest"
          }
        ]
      },
      "request.TransferProvisionedSystemContentAdministrationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractProvisionedSystemModificationRequest"
          },
          {
            "title": "TransferProvisionedSystemContentAdministrationRequest",
            "required": [
              "$type",
              "system"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.TransferProvisionedSystemContentAdministrationRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractProvisionedSystemModificationRequest": true,
              "request.ModificationRequest": true,
              "request.TransferProvisionedSystemContentAdministrationRequest": true
            },
            "x-tkh-discriminator": "request.TransferProvisionedSystemContentAdministrationRequest"
          }
        ]
      },
      "request.TransferProvisionedSystemOwnershipRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.AbstractProvisionedSystemModificationRequest"
          },
          {
            "title": "TransferProvisionedSystemOwnershipRequest",
            "required": [
              "$type",
              "system"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "request.TransferProvisionedSystemOwnershipRequest"
              }
            },
            "x-tkh-writescope": {
              "request.AbstractProvisionedSystemModificationRequest": true,
              "request.ModificationRequest": true,
              "request.TransferProvisionedSystemOwnershipRequest": true
            },
            "x-tkh-discriminator": "request.TransferProvisionedSystemOwnershipRequest"
          }
        ]
      },
      "request.TransferServiceAccountAdministrationRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "TransferServiceAccountAdministrationRequest",
            "required": [
              "$type",
              "serviceAccount"
            ],
            "type": "object",
            "properties": {
              "serviceAccount": {
                "$ref": "#/components/schemas/serviceaccount.ServiceAccountPrimer"
              },
              "$type": {
                "type": "string",
                "default": "request.TransferServiceAccountAdministrationRequest"
              }
            },
            "x-tkh-writescope": {
              "request.ModificationRequest": true,
              "request.TransferServiceAccountAdministrationRequest": true
            },
            "x-tkh-discriminator": "request.TransferServiceAccountAdministrationRequest"
          }
        ]
      },
      "request.UpdateGroupMembershipRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "UpdateGroupMembershipRequest",
            "required": [
              "$type",
              "accountToUpdate",
              "addMember",
              "rights",
              "updateGroupMembershipType"
            ],
            "type": "object",
            "properties": {
              "accountToUpdate": {
                "$ref": "#/components/schemas/auth.AccountPrimer"
              },
              "rights": {
                "$ref": "#/components/schemas/group.GroupRights"
              },
              "endDate": {
                "type": "string",
                "format": "date"
              },
              "updateGroupMembershipType": {
                "$ref": "#/components/schemas/request.UpdateGroupMembershipType"
              },
              "currentRights": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/group.GroupRights"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "currentEndDate": {
                "type": "string",
                "format": "date",
                "readOnly": true
              },
              "$type": {
                "type": "string",
                "default": "request.UpdateGroupMembershipRequest"
              }
            },
            "x-tkh-writescope": {
              "request.ModificationRequest": true,
              "request.UpdateGroupMembershipRequest": true
            },
            "x-tkh-discriminator": "request.UpdateGroupMembershipRequest"
          }
        ]
      },
      "request.UpdateGroupMembershipType": {
        "type": "string",
        "enum": [
          "ADD",
          "MODIFY",
          "REMOVE"
        ]
      },
      "request.UpdateLicenseRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "UpdateLicenseRequest",
            "required": [
              "$type",
              "licenseKey"
            ],
            "type": "object",
            "properties": {
              "licenseKey": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "request.UpdateLicenseRequest"
              }
            },
            "x-tkh-writescope": {
              "request.ModificationRequest": true,
              "request.UpdateLicenseRequest": true
            },
            "x-tkh-discriminator": "request.UpdateLicenseRequest"
          }
        ]
      },
      "request.VerifyInternalAccountRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/request.ModificationRequest"
          },
          {
            "title": "VerifyInternalAccountRequest",
            "required": [
              "$type",
              "internalAccountName"
            ],
            "type": "object",
            "properties": {
              "internalAccountName": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "directory": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/directory.AccountDirectoryPrimer"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "request.VerifyInternalAccountRequest"
              }
            },
            "x-tkh-writescope": {
              "request.ModificationRequest": true,
              "request.VerifyInternalAccountRequest": true
            },
            "x-tkh-discriminator": "request.VerifyInternalAccountRequest"
          }
        ]
      },
      "serviceaccount.PasswordRotationScheme": {
        "type": "string",
        "enum": [
          "MANUAL",
          "MANUAL_STORED_IN_VAULT",
          "DAILY"
        ]
      },
      "serviceaccount.ServiceAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/serviceaccount.ServiceAccountPrimer"
          },
          {
            "title": "ServiceAccount",
            "required": [
              "$type",
              "name",
              "passwordRotation",
              "system",
              "technicalAdministrator",
              "username"
            ],
            "type": "object",
            "properties": {
              "technicalAdministrator": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "passwordRotation": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/serviceaccount.PasswordRotationScheme"
                  },
                  {
                    "x-tkh-default": "DAILY"
                  }
                ]
              },
              "sshPublicKey": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "password": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vault.VaultRecordPrimer"
                  },
                  {
                    "readOnly": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "serviceaccount.ServiceAccount"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "secret": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GeneratedSecret"
                      },
                      {
                        "x-tkh-backend-determines-default": true
                      }
                    ]
                  },
                  "groups": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/serviceaccount.ServiceAccountGroupLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "supportedFeatures": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/serviceaccount.ServiceAccountSupportedFeatures"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "serviceaccount.ServiceAccount": true,
              "serviceaccount.ServiceAccountPrimer": true
            },
            "x-tkh-discriminator": "serviceaccount.ServiceAccount"
          }
        ]
      },
      "serviceaccount.ServiceAccountGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/provisioning.GroupOnSystemPrimer"
          },
          {
            "title": "ServiceAccountGroup",
            "required": [
              "$type",
              "nameInSystem",
              "type"
            ],
            "type": "object",
            "properties": {
              "$type": {
                "type": "string",
                "default": "serviceaccount.ServiceAccountGroup"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-discriminator": "serviceaccount.ServiceAccountGroup"
          }
        ]
      },
      "serviceaccount.ServiceAccountGroupLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/serviceaccount.ServiceAccountGroup"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "serviceaccount.ServiceAccountLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/serviceaccount.ServiceAccount"
            }
          }
        }
      },
      "serviceaccount.ServiceAccountPrimer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "ServiceAccountPrimer",
            "required": [
              "$type",
              "active",
              "name",
              "system",
              "username"
            ],
            "type": "object",
            "properties": {
              "active": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "uuid": {
                "maxLength": 36,
                "minLength": 0,
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "name": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "username": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "x-tkh-create-only": true,
                "x-tkh-immutable": true
              },
              "system": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/provisioning.ProvisionedSystemPrimer"
                  },
                  {
                    "x-tkh-create-only": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "$type": {
                "type": "string",
                "default": "serviceaccount.ServiceAccountPrimer"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "serviceaccount.ServiceAccount": "#/components/schemas/serviceaccount.ServiceAccount",
                "serviceaccount.ServiceAccountPrimer": "#/components/schemas/serviceaccount.ServiceAccountPrimer"
              }
            },
            "x-tkh-discriminator": "serviceaccount.ServiceAccountPrimer"
          }
        ]
      },
      "serviceaccount.ServiceAccountPrimerLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/serviceaccount.ServiceAccountPrimer"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "serviceaccount.ServiceAccountPrimerLinkableWrapperWithCount": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/serviceaccount.ServiceAccountPrimer"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          }
        },
        "x-tkh-discriminator": "LinkableWrapperWithCount"
      },
      "serviceaccount.ServiceAccountStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "ServiceAccountStatus",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "accountEnabled": {
                "type": "boolean"
              },
              "$type": {
                "type": "string",
                "default": "serviceaccount.ServiceAccountStatus"
              }
            },
            "x-tkh-discriminator": "serviceaccount.ServiceAccountStatus"
          }
        ]
      },
      "serviceaccount.ServiceAccountSupportedFeatures": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "ServiceAccountSupportedFeatures",
            "required": [
              "$type",
              "sshPublicKey"
            ],
            "type": "object",
            "properties": {
              "sshPublicKey": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "serviceaccount.ServiceAccountSupportedFeatures"
              }
            },
            "x-tkh-discriminator": "serviceaccount.ServiceAccountSupportedFeatures"
          }
        ]
      },
      "serviceaccount.ServiceAccountsAuditStats": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "ServiceAccountsAuditStats",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "systemStats": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "passwordSchemeEnabledStats": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "disabledCount": {
                "type": "integer",
                "format": "int64"
              },
              "$type": {
                "type": "string",
                "default": "serviceaccount.ServiceAccountsAuditStats"
              }
            },
            "x-tkh-discriminator": "serviceaccount.ServiceAccountsAuditStats"
          }
        ]
      },
      "simple.StringValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "StringValue",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "simple.StringValue"
              }
            },
            "x-tkh-discriminator": "simple.StringValue"
          }
        ]
      },
      "simple.VersionInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "VersionInfo",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "keyHubVersion": {
                "type": "string"
              },
              "contractVersions": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "$type": {
                "type": "string",
                "default": "simple.VersionInfo"
              }
            },
            "x-tkh-discriminator": "simple.VersionInfo"
          }
        ]
      },
      "vault.AccountVaultStatus": {
        "type": "string",
        "enum": [
          "NOT_CREATED",
          "INITIALIZING",
          "LOCKED",
          "UNLOCKED"
        ]
      },
      "vault.DeletedVaultHolder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "DeletedVaultHolder",
            "required": [
              "$type",
              "recordCount"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vault.VaultHolderType"
                  },
                  {
                    "readOnly": true,
                    "x-tkh-immutable": true
                  }
                ]
              },
              "recordCount": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0,
                "x-tkh-immutable": true
              },
              "$type": {
                "type": "string",
                "default": "vault.DeletedVaultHolder"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "vault": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/vault.Vault"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-discriminator": "vault.DeletedVaultHolder"
          }
        ]
      },
      "vault.DeletedVaultHolderLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vault.DeletedVaultHolder"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "vault.DeletedVaultRecovery": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "DeletedVaultRecovery",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "privateKey": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "targetGroup": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "prefix": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "vault.DeletedVaultRecovery"
              }
            },
            "x-tkh-discriminator": "vault.DeletedVaultRecovery"
          }
        ]
      },
      "vault.MoveVaultRecord": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "MoveVaultRecord",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "group": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "account": {
                "$ref": "#/components/schemas/auth.AccountPrimer"
              },
              "action": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vault.MoveVaultRecordAction"
                  },
                  {
                    "x-tkh-default": "SHARE"
                  }
                ]
              },
              "shareDuration": {
                "type": "string",
                "format": "duration"
              },
              "shareEndDate": {
                "type": "string",
                "format": "date"
              },
              "$type": {
                "type": "string",
                "default": "vault.MoveVaultRecord"
              }
            },
            "x-tkh-discriminator": "vault.MoveVaultRecord"
          }
        ]
      },
      "vault.MoveVaultRecordAction": {
        "type": "string",
        "enum": [
          "SHARE",
          "COPY",
          "MOVE"
        ]
      },
      "vault.PasswordMetadata": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "PasswordMetadata",
            "required": [
              "$type",
              "dictionary",
              "duplicate",
              "length",
              "lowerCount",
              "numberCount",
              "specialCount",
              "strength",
              "upperCount"
            ],
            "type": "object",
            "properties": {
              "hash": {
                "type": "string",
                "readOnly": true
              },
              "duplicate": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "dictionary": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false
              },
              "strength": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "length": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "lowerCount": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "upperCount": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "numberCount": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "specialCount": {
                "type": "integer",
                "format": "int32",
                "readOnly": true,
                "x-tkh-default": 0
              },
              "$type": {
                "type": "string",
                "default": "vault.PasswordMetadata"
              }
            },
            "x-tkh-discriminator": "vault.PasswordMetadata"
          }
        ]
      },
      "vault.Vault": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "Vault",
            "required": [
              "$type",
              "accessAvailable"
            ],
            "type": "object",
            "properties": {
              "accessAvailable": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "name": {
                "type": "string"
              },
              "records": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vault.VaultRecord"
                }
              },
              "$type": {
                "type": "string",
                "default": "vault.Vault"
              }
            },
            "x-tkh-discriminator": "vault.Vault"
          }
        ]
      },
      "vault.VaultActivationStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "VaultActivationStatus",
            "required": [
              "$type",
              "activated",
              "activationRequired"
            ],
            "type": "object",
            "properties": {
              "activationRequired": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "activated": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "$type": {
                "type": "string",
                "default": "vault.VaultActivationStatus"
              }
            },
            "x-tkh-discriminator": "vault.VaultActivationStatus"
          }
        ]
      },
      "vault.VaultHolderType": {
        "type": "string",
        "enum": [
          "ACCOUNT",
          "CLIENT",
          "GROUP"
        ]
      },
      "vault.VaultRecord": {
        "allOf": [
          {
            "$ref": "#/components/schemas/vault.VaultRecordPrimer"
          },
          {
            "title": "VaultRecord",
            "required": [
              "$type",
              "color",
              "derived",
              "name"
            ],
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "additionalURLs": {
                "type": "string"
              },
              "username": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "filename": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "types": {
                "uniqueItems": true,
                "type": "array",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/vault.VaultSecretType"
                }
              },
              "endDate": {
                "type": "string",
                "format": "date"
              },
              "warningPeriod": {
                "$ref": "#/components/schemas/vault.VaultRecordWarningPeriod"
              },
              "derived": {
                "type": "boolean",
                "readOnly": true,
                "x-tkh-default": false,
                "x-tkh-immutable": true
              },
              "$type": {
                "type": "string",
                "default": "vault.VaultRecord"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "vaultholder": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Linkable"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "secret": {
                    "$ref": "#/components/schemas/vault.VaultRecordSecrets"
                  },
                  "shares": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/vault.VaultRecordPrimerLinkableWrapper"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "shareSummary": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/vault.VaultRecordShareSummary"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "parent": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/vault.VaultRecordPrimer"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "tile": {
                    "$ref": "#/components/schemas/launchpad.VaultRecordLaunchpadTile"
                  },
                  "deleteTile": {
                    "type": "boolean",
                    "writeOnly": true
                  },
                  "passwordMetadata": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/vault.PasswordMetadata"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "activationStatus": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/vault.VaultActivationStatus"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  },
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "vault.VaultRecord": true,
              "vault.VaultRecordPrimer": true
            },
            "x-tkh-discriminator": "vault.VaultRecord"
          }
        ]
      },
      "vault.VaultRecordColor": {
        "type": "string",
        "enum": [
          "NONE",
          "GREEN",
          "RED",
          "BLUE",
          "DARK",
          "PINK_LAVENDER",
          "CRIMSON_RED",
          "MIDDLE_YELLOW",
          "ANDROID_GREEN",
          "SAGE",
          "ARTICHOKE"
        ]
      },
      "vault.VaultRecordLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vault.VaultRecord"
            }
          }
        }
      },
      "vault.VaultRecordPrimer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "VaultRecordPrimer",
            "required": [
              "$type",
              "color",
              "name"
            ],
            "type": "object",
            "properties": {
              "uuid": {
                "maxLength": 36,
                "minLength": 0,
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "name": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "color": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vault.VaultRecordColor"
                  },
                  {
                    "x-tkh-default": "NONE"
                  }
                ]
              },
              "shareEndTime": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "$type": {
                "type": "string",
                "default": "vault.VaultRecordPrimer"
              }
            },
            "discriminator": {
              "propertyName": "$type",
              "mapping": {
                "vault.VaultRecord": "#/components/schemas/vault.VaultRecord",
                "vault.VaultRecordPrimer": "#/components/schemas/vault.VaultRecordPrimer"
              }
            },
            "x-tkh-discriminator": "vault.VaultRecordPrimer"
          }
        ]
      },
      "vault.VaultRecordPrimerLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vault.VaultRecordPrimer"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "vault.VaultRecordSecrets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "VaultRecordSecrets",
            "required": [
              "$type",
              "setForReading",
              "setForWriting",
              "writeTotp"
            ],
            "type": "object",
            "properties": {
              "password": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "totp": {
                "type": "string",
                "readOnly": true,
                "x-tkh-sensitive": true
              },
              "totpKey": {
                "pattern": "^$|[A-Z0-9\\s]{4,}",
                "type": "string",
                "writeOnly": true,
                "x-tkh-sensitive": true
              },
              "file": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "comment": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "$type": {
                "type": "string",
                "default": "vault.VaultRecordSecrets"
              }
            },
            "x-tkh-discriminator": "vault.VaultRecordSecrets"
          }
        ]
      },
      "vault.VaultRecordShare": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "VaultRecordShare",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/vault.VaultHolderType"
              },
              "$type": {
                "type": "string",
                "default": "vault.VaultRecordShare"
              }
            },
            "x-tkh-discriminator": "vault.VaultRecordShare"
          }
        ]
      },
      "vault.VaultRecordShareSummary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "VaultRecordShareSummary",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "parent": {
                "$ref": "#/components/schemas/vault.VaultRecordShare"
              },
              "children": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/vault.VaultRecordShare"
                }
              },
              "$type": {
                "type": "string",
                "default": "vault.VaultRecordShareSummary"
              }
            },
            "x-tkh-discriminator": "vault.VaultRecordShareSummary"
          }
        ]
      },
      "vault.VaultRecordWarningPeriod": {
        "type": "string",
        "enum": [
          "AT_EXPIRATION",
          "TWO_WEEKS",
          "ONE_MONTH",
          "TWO_MONTHS",
          "THREE_MONTHS",
          "SIX_MONTHS",
          "NEVER"
        ]
      },
      "vault.VaultRecovery": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "VaultRecovery",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "privateKey": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "account": {
                "$ref": "#/components/schemas/auth.AccountPrimer"
              },
              "$type": {
                "type": "string",
                "default": "vault.VaultRecovery"
              }
            },
            "x-tkh-discriminator": "vault.VaultRecovery"
          }
        ]
      },
      "vault.VaultSecretType": {
        "type": "string",
        "enum": [
          "PASSWORD",
          "FILE",
          "TOTP",
          "COMMENT"
        ]
      },
      "vault.VaultUnlock": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "VaultUnlock",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "password": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "$type": {
                "type": "string",
                "default": "vault.VaultUnlock"
              }
            },
            "x-tkh-discriminator": "vault.VaultUnlock"
          }
        ]
      },
      "vault.VaultUnlockResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "VaultUnlockResponse",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "sessionPassword": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "expiresAt": {
                "type": "string",
                "format": "date-time"
              },
              "$type": {
                "type": "string",
                "default": "vault.VaultUnlockResponse"
              }
            },
            "x-tkh-discriminator": "vault.VaultUnlockResponse"
          }
        ]
      },
      "webhook.Webhook": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "Webhook",
            "required": [
              "$type",
              "active",
              "allTypes",
              "tls",
              "url",
              "verbosePayloads"
            ],
            "type": "object",
            "properties": {
              "active": {
                "type": "boolean",
                "x-tkh-default": true
              },
              "uuid": {
                "maxLength": 36,
                "minLength": 0,
                "type": "string",
                "readOnly": true,
                "x-tkh-immutable": true
              },
              "name": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "url": {
                "maxLength": 512,
                "minLength": 0,
                "type": "string"
              },
              "tls": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TLSLevel"
                  },
                  {
                    "x-tkh-default": "SECURE"
                  }
                ]
              },
              "trustedCertificate": {
                "$ref": "#/components/schemas/certificate.CertificatePrimer"
              },
              "clientCertificate": {
                "$ref": "#/components/schemas/certificate.CertificatePrimer"
              },
              "authenticationScheme": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/HttpAuthenticationScheme"
                  },
                  {
                    "x-tkh-default": "NONE"
                  }
                ]
              },
              "basicAuthUsername": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string"
              },
              "basicAuthPassword": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "bearerToken": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "customHeaderName": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              },
              "customHeaderValue": {
                "type": "string",
                "x-tkh-sensitive": true
              },
              "verbosePayloads": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "group": {
                "$ref": "#/components/schemas/group.GroupPrimer"
              },
              "client": {
                "$ref": "#/components/schemas/client.ClientApplicationPrimer"
              },
              "directory": {
                "$ref": "#/components/schemas/directory.AccountDirectoryPrimer"
              },
              "system": {
                "$ref": "#/components/schemas/provisioning.ProvisionedSystemPrimer"
              },
              "account": {
                "$ref": "#/components/schemas/auth.AccountPrimer"
              },
              "allTypes": {
                "type": "boolean",
                "x-tkh-default": false
              },
              "types": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/audit.AuditRecordType"
                }
              },
              "$type": {
                "type": "string",
                "default": "webhook.Webhook"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-writescope": {
              "webhook.Webhook": true
            },
            "x-tkh-discriminator": "webhook.Webhook"
          }
        ]
      },
      "webhook.WebhookDelivery": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Linkable"
          },
          {
            "title": "WebhookDelivery",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "triggerTime": {
                "type": "string",
                "format": "date-time"
              },
              "time": {
                "type": "integer",
                "format": "int32"
              },
              "requestHeaders": {
                "type": "string"
              },
              "status": {
                "type": "integer",
                "format": "int32"
              },
              "reponseHeaders": {
                "type": "string"
              },
              "response": {
                "type": "string"
              },
              "payload": {
                "$ref": "#/components/schemas/webhook.WebhookPush"
              },
              "$type": {
                "type": "string",
                "default": "webhook.WebhookDelivery"
              },
              "additionalObjects": {
                "type": "object",
                "properties": {
                  "audit": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditInfo"
                      },
                      {
                        "readOnly": true
                      }
                    ]
                  }
                }
              }
            },
            "x-tkh-discriminator": "webhook.WebhookDelivery"
          }
        ]
      },
      "webhook.WebhookDeliveryLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webhook.WebhookDelivery"
            }
          }
        },
        "x-tkh-discriminator": "LinkableWrapper"
      },
      "webhook.WebhookLinkableWrapper": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webhook.Webhook"
            }
          }
        }
      },
      "webhook.WebhookNameUuid": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "WebhookNameUuid",
            "required": [
              "$type"
            ],
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "uuid": {
                "type": "string"
              },
              "object": {
                "$ref": "#/components/schemas/Linkable"
              },
              "$type": {
                "type": "string",
                "default": "webhook.WebhookNameUuid"
              }
            },
            "x-tkh-discriminator": "webhook.WebhookNameUuid"
          }
        ]
      },
      "webhook.WebhookPush": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NonLinkable"
          },
          {
            "title": "WebhookPush",
            "required": [
              "$type",
              "seq"
            ],
            "type": "object",
            "properties": {
              "seq": {
                "type": "integer",
                "format": "int64",
                "x-tkh-default": 0
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "type": {
                "$ref": "#/components/schemas/audit.AuditRecordType"
              },
              "byParty": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "account": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "group": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "group2": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "groupClassification": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "directory": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "client": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "system": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "serviceAccount": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "certificate": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "vaultRecord": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "webhook": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "modificationRequest": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "organizationalUnit": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "accessProfile": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "identitySource": {
                "$ref": "#/components/schemas/webhook.WebhookNameUuid"
              },
              "securityLevel": {
                "$ref": "#/components/schemas/auth.SecurityLevel"
              },
              "parameter1": {
                "type": "string"
              },
              "parameter2": {
                "type": "string"
              },
              "parameter3": {
                "type": "string"
              },
              "$type": {
                "type": "string",
                "default": "webhook.WebhookPush"
              }
            },
            "x-tkh-discriminator": "webhook.WebhookPush"
          }
        ]
      }
    },
    "responses": {
      "error": {
        "description": "error",
        "content": {
          "application/vnd.topicus.keyhub+json;version=81": {
            "schema": {
              "$ref": "#/components/schemas/ErrorReport"
            }
          },
          "application/vnd.topicus.keyhub+xml;version=81": {
            "schema": {
              "$ref": "#/components/schemas/ErrorReport"
            }
          }
        }
      }
    }
  }
}